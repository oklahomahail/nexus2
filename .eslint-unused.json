[{"filePath":"/Users/davehail/Developer/Nexus/generate-nexus-starter.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/postcss.config.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/components/AnalyticsFiltersComponent.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'filters' is defined but never used.","line":7,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":46,"suggestions":[{"messageId":"removeVar","data":{"varName":"filters"},"fix":{"range":[177,202],"text":""},"desc":"Remove unused variable 'filters'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\n\nimport { AnalyticsFilters } from \"../models/analytics\";\n\ninterface AnalyticsFiltersComponentProps {\n  filters: AnalyticsFilters;\n  onFiltersChange: (filters: AnalyticsFilters) => void;\n}\n\nconst AnalyticsFiltersComponent: React.FC<AnalyticsFiltersComponentProps> = ({\n  filters,\n  onFiltersChange,\n}) => {\n  return (\n    <div className=\"bg-white p-4 rounded-lg shadow\">\n      <h3 className=\"text-lg font-semibold mb-4\">Analytics Filters</h3>\n      <p className=\"text-gray-600\">\n        Active filters: {Object.keys(filters).length}.\n        <button\n          onClick={() => onFiltersChange(filters)}\n          className=\"text-blue-600 ml-2\"\n        >\n          Refresh Filters\n        </button>\n      </p>\n    </div>\n  );\n};\n\nexport default AnalyticsFiltersComponent;\n","usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/components/AnalyticsWidgets.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'trend' is defined but never used.","line":34,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"trend"},"fix":{"range":[747,756],"text":""},"desc":"Remove unused variable 'trend'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'trend' is defined but never used. Allowed unused args must match /^_/u.","line":34,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":8},{"ruleId":"no-unused-vars","severity":2,"message":"'timeframe' is defined but never used.","line":293,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":293,"endColumn":64,"suggestions":[{"messageId":"removeVar","data":{"varName":"timeframe"},"fix":{"range":[8921,8962],"text":""},"desc":"Remove unused variable 'timeframe'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'format' is defined but never used.","line":404,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":404,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"format"},"fix":{"range":[12780,12795],"text":""},"desc":"Remove unused variable 'format'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'dateRange' is defined but never used.","line":405,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":405,"endColumn":47,"suggestions":[{"messageId":"removeVar","data":{"varName":"dateRange"},"fix":{"range":[12794,12842],"text":""},"desc":"Remove unused variable 'dateRange'."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/components/AnalyticsWidgets.tsx - Specialized analytics and reporting components\nimport clsx from \"clsx\";\nimport {\n  TrendingUp,\n  TrendingDown,\n  Target,\n  DollarSign,\n  Users,\n  Calendar,\n  Download,\n  RefreshCw,\n  MoreHorizontal,\n} from \"lucide-react\";\nimport React, { useState } from \"react\";\n\n// KPI Widget Component\ninterface KPIWidgetProps {\n  title: string;\n  value: number | string;\n  previousValue?: number;\n  format?: \"currency\" | \"percentage\" | \"number\";\n  trend?: \"up\" | \"down\" | \"neutral\";\n  target?: number;\n  icon?: React.ReactNode;\n  color?: \"blue\" | \"green\" | \"purple\" | \"yellow\" | \"red\";\n  className?: string;\n}\n\nexport const KPIWidget: React.FC<KPIWidgetProps> = ({\n  title,\n  value,\n  previousValue,\n  format = \"number\",\n  trend,\n  target,\n  icon,\n  color = \"blue\",\n  className = \"\",\n}) => {\n  const formatValue = (val: number | string) => {\n    if (typeof val === \"string\") return val;\n\n    switch (format) {\n      case \"currency\":\n        return `$${val.toLocaleString()}`;\n      case \"percentage\":\n        return `${val.toFixed(1)}%`;\n      default:\n        return val.toLocaleString();\n    }\n  };\n\n  const calculateChange = () => {\n    if (typeof value !== \"number\" || !previousValue) return null;\n    const change = ((value - previousValue) / previousValue) * 100;\n    return change;\n  };\n\n  const change = calculateChange();\n  const colorClasses = {\n    blue: \"from-blue-500 to-blue-600\",\n    green: \"from-green-500 to-green-600\",\n    purple: \"from-purple-500 to-purple-600\",\n    yellow: \"from-yellow-500 to-yellow-600\",\n    red: \"from-red-500 to-red-600\",\n  };\n\n  const iconBgColors = {\n    blue: \"bg-blue-500/20 text-blue-400\",\n    green: \"bg-green-500/20 text-green-400\",\n    purple: \"bg-purple-500/20 text-purple-400\",\n    yellow: \"bg-yellow-500/20 text-yellow-400\",\n    red: \"bg-red-500/20 text-red-400\",\n  };\n\n  return (\n    <div className={clsx(\"card-base p-6 relative overflow-hidden\", className)}>\n      {/* Background gradient */}\n      <div\n        className={clsx(\n          \"absolute inset-0 bg-gradient-to-br opacity-5\",\n          colorClasses[color],\n        )}\n      />\n\n      <div className=\"relative\">\n        <div className=\"flex items-start justify-between mb-4\">\n          <div>\n            <p className=\"text-sm font-medium text-slate-400 mb-1\">{title}</p>\n            <p className=\"text-3xl font-bold text-white\">\n              {formatValue(value)}\n            </p>\n          </div>\n\n          {icon && (\n            <div className={clsx(\"p-3 rounded-xl\", iconBgColors[color])}>\n              {icon}\n            </div>\n          )}\n        </div>\n\n        <div className=\"space-y-3\">\n          {/* Change indicator */}\n          {change !== null && (\n            <div className=\"flex items-center space-x-2\">\n              <div\n                className={clsx(\n                  \"flex items-center space-x-1 px-2 py-1 rounded-full text-xs font-medium\",\n                  change > 0\n                    ? \"bg-green-500/20 text-green-400\"\n                    : change < 0\n                      ? \"bg-red-500/20 text-red-400\"\n                      : \"bg-slate-500/20 text-slate-400\",\n                )}\n              >\n                {change > 0 ? (\n                  <TrendingUp className=\"w-3 h-3\" />\n                ) : change < 0 ? (\n                  <TrendingDown className=\"w-3 h-3\" />\n                ) : (\n                  <div className=\"w-3 h-3\" />\n                )}\n                <span>{Math.abs(change).toFixed(1)}%</span>\n              </div>\n              <span className=\"text-xs text-slate-500\">vs previous period</span>\n            </div>\n          )}\n\n          {/* Progress bar for target */}\n          {target && typeof value === \"number\" && (\n            <div>\n              <div className=\"flex justify-between text-xs text-slate-400 mb-1\">\n                <span>Progress to target</span>\n                <span>{((value / target) * 100).toFixed(1)}%</span>\n              </div>\n              <div className=\"w-full bg-slate-700/50 rounded-full h-2\">\n                <div\n                  className={clsx(\n                    \"h-2 rounded-full bg-gradient-to-r\",\n                    colorClasses[color],\n                  )}\n                  style={{ width: `${Math.min((value / target) * 100, 100)}%` }}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Campaign Performance Summary\ninterface CampaignSummaryProps {\n  campaigns: {\n    id: string;\n    name: string;\n    goal: number;\n    raised: number;\n    donors: number;\n    daysLeft: number;\n    status: \"active\" | \"completed\" | \"paused\";\n  }[];\n  className?: string;\n}\n\nexport const CampaignPerformanceSummary: React.FC<CampaignSummaryProps> = ({\n  campaigns,\n  className = \"\",\n}) => {\n  const [sortBy, setSortBy] = useState<\"progress\" | \"raised\" | \"donors\">(\n    \"progress\",\n  );\n\n  const sortedCampaigns = [...campaigns].sort((a, b) => {\n    switch (sortBy) {\n      case \"progress\":\n        return b.raised / b.goal - a.raised / a.goal;\n      case \"raised\":\n        return b.raised - a.raised;\n      case \"donors\":\n        return b.donors - a.donors;\n      default:\n        return 0;\n    }\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return \"bg-green-500/20 text-green-400\";\n      case \"completed\":\n        return \"bg-blue-500/20 text-blue-400\";\n      case \"paused\":\n        return \"bg-yellow-500/20 text-yellow-400\";\n      default:\n        return \"bg-slate-500/20 text-slate-400\";\n    }\n  };\n\n  return (\n    <div className={clsx(\"card-base\", className)}>\n      <div className=\"p-6 border-b border-slate-700/50\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-white\">\n              Campaign Performance\n            </h3>\n            <p className=\"text-sm text-slate-400\">\n              {campaigns.length} active campaigns\n            </p>\n          </div>\n\n          <div className=\"flex items-center space-x-3\">\n            <select\n              value={sortBy}\n              onChange={(e) => setSortBy(e.target.value as any)}\n              className=\"input-base text-sm py-2 px-3\"\n            >\n              <option value=\"progress\">Sort by Progress</option>\n              <option value=\"raised\">Sort by Amount Raised</option>\n              <option value=\"donors\">Sort by Donor Count</option>\n            </select>\n\n            <button className=\"p-2 text-slate-400 hover:text-white hover:bg-slate-700/50 rounded-lg transition-colors\">\n              <RefreshCw className=\"w-4 h-4\" />\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-6 space-y-4\">\n        {sortedCampaigns.map((campaign) => {\n          const progress = (campaign.raised / campaign.goal) * 100;\n\n          return (\n            <div\n              key={campaign.id}\n              className=\"p-4 bg-slate-800/30 rounded-xl hover:bg-slate-700/30 transition-colors cursor-pointer\"\n            >\n              <div className=\"flex items-start justify-between mb-3\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-3\">\n                    <h4 className=\"font-medium text-white\">{campaign.name}</h4>\n                    <span\n                      className={clsx(\n                        \"px-2 py-0.5 rounded-full text-xs font-medium\",\n                        getStatusColor(campaign.status),\n                      )}\n                    >\n                      {campaign.status}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center space-x-4 mt-2 text-sm text-slate-400\">\n                    <span>${campaign.raised.toLocaleString()} raised</span>\n                    <span>{campaign.donors} donors</span>\n                    <span>{campaign.daysLeft}d left</span>\n                  </div>\n                </div>\n\n                <div className=\"text-right\">\n                  <div className=\"text-lg font-semibold text-white\">\n                    {progress.toFixed(1)}%\n                  </div>\n                  <div className=\"text-sm text-slate-400\">\n                    of ${campaign.goal.toLocaleString()}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"w-full bg-slate-700/50 rounded-full h-2\">\n                <div\n                  className=\"h-2 rounded-full bg-gradient-to-r from-blue-500 to-purple-500\"\n                  style={{ width: `${Math.min(progress, 100)}%` }}\n                />\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\n// Donation Trends Chart\ninterface DonationTrendsProps {\n  data: {\n    period: string;\n    donations: number;\n    amount: number;\n  }[];\n  timeframe: \"daily\" | \"weekly\" | \"monthly\";\n  onTimeframeChange: (timeframe: \"daily\" | \"weekly\" | \"monthly\") => void;\n  className?: string;\n}\n\nexport const DonationTrends: React.FC<DonationTrendsProps> = ({\n  data,\n  timeframe,\n  onTimeframeChange,\n  className = \"\",\n}) => {\n  const [metric, setMetric] = useState<\"amount\" | \"count\">(\"amount\");\n\n  const maxValue = Math.max(\n    ...data.map((d) => (metric === \"amount\" ? d.amount : d.donations)),\n  );\n\n  return (\n    <div className={clsx(\"card-base p-6\", className)}>\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h3 className=\"text-lg font-semibold text-white\">Donation Trends</h3>\n          <p className=\"text-sm text-slate-400\">\n            {metric === \"amount\"\n              ? \"Total donation amounts\"\n              : \"Number of donations\"}{\" \"}\n            over time\n          </p>\n        </div>\n\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"flex bg-slate-800/50 rounded-xl p-1\">\n            <button\n              onClick={() => setMetric(\"amount\")}\n              className={clsx(\n                \"px-3 py-1.5 rounded-lg text-sm font-medium transition-all\",\n                metric === \"amount\"\n                  ? \"bg-blue-500/20 text-blue-300\"\n                  : \"text-slate-400 hover:text-white\",\n              )}\n            >\n              Amount\n            </button>\n            <button\n              onClick={() => setMetric(\"count\")}\n              className={clsx(\n                \"px-3 py-1.5 rounded-lg text-sm font-medium transition-all\",\n                metric === \"count\"\n                  ? \"bg-blue-500/20 text-blue-300\"\n                  : \"text-slate-400 hover:text-white\",\n              )}\n            >\n              Count\n            </button>\n          </div>\n\n          <div className=\"flex bg-slate-800/50 rounded-xl p-1\">\n            {([\"daily\", \"weekly\", \"monthly\"] as const).map((tf) => (\n              <button\n                key={tf}\n                onClick={() => onTimeframeChange(tf)}\n                className={clsx(\n                  \"px-3 py-1.5 rounded-lg text-sm font-medium transition-all capitalize\",\n                  timeframe === tf\n                    ? \"bg-purple-500/20 text-purple-300\"\n                    : \"text-slate-400 hover:text-white\",\n                )}\n              >\n                {tf}\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"h-64 flex items-end justify-between space-x-2\">\n        {data.map((item, index) => {\n          const value = metric === \"amount\" ? item.amount : item.donations;\n          const height = (value / maxValue) * 100;\n\n          return (\n            <div\n              key={index}\n              className=\"flex-1 flex flex-col items-center space-y-2 group\"\n            >\n              <div className=\"relative w-full\">\n                <div\n                  className=\"w-full bg-gradient-to-t from-blue-600 to-purple-500 rounded-t-sm transition-all duration-300 group-hover:from-blue-500 group-hover:to-purple-400 cursor-pointer\"\n                  style={{ height: `${Math.max(height, 4)}px` }}\n                >\n                  {/* Tooltip */}\n                  <div className=\"absolute -top-12 left-1/2 -translate-x-1/2 bg-slate-800/95 text-white text-xs px-3 py-2 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap z-10\">\n                    {metric === \"amount\"\n                      ? `$${item.amount.toLocaleString()}`\n                      : `${item.donations} donations`}\n                  </div>\n                </div>\n              </div>\n              <span className=\"text-xs text-slate-400 text-center\">\n                {item.period}\n              </span>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\n// Export Widget\ninterface ExportWidgetProps {\n  onExport: (\n    format: string,\n    dateRange?: { start: string; end: string },\n  ) => void;\n  className?: string;\n}\n\nexport const ExportWidget: React.FC<ExportWidgetProps> = ({\n  onExport,\n  className = \"\",\n}) => {\n  const [showOptions, setShowOptions] = useState(false);\n  const [format, setFormat] = useState(\"csv\");\n  const [dateRange, setDateRange] = useState({ start: \"\", end: \"\" });\n\n  const formats = [\n    { value: \"csv\", label: \"CSV\", description: \"Excel compatible\" },\n    { value: \"pdf\", label: \"PDF\", description: \"Report format\" },\n    { value: \"json\", label: \"JSON\", description: \"API format\" },\n  ];\n\n  const handleExport = () => {\n    onExport(format, dateRange.start && dateRange.end ? dateRange : undefined);\n    setShowOptions(false);\n  };\n\n  return (\n    <div className={clsx(\"card-base p-4\", className)}>\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"font-medium text-white\">Export Data</h3>\n          <p className=\"text-sm text-slate-400\">\n            Download campaign and donor data\n          </p>\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          <button\n            onClick={() => setShowOptions(!showOptions)}\n            className=\"p-2 text-slate-400 hover:text-white hover:bg-slate-700/50 rounded-lg transition-colors\"\n          >\n            <MoreHorizontal className=\"w-4 h-4\" />\n          </button>\n\n          <button\n            onClick={handleExport}\n            className=\"button-primary flex items-center space-x-2\"\n          >\n            <Download className=\"w-4 h-4\" />\n            <span>Export</span>\n          </button>\n        </div>\n      </div>\n\n      {showOptions && (\n        <div className=\"mt-4 pt-4 border-t border-slate-700/50 space-y-4 animate-slide-up\">\n          <div>\n            <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n              Format\n            </label>\n            <div className=\"grid grid-cols-3 gap-2\">\n              {formats.map((fmt) => (\n                <button\n                  key={fmt.value}\n                  onClick={() => setFormat(fmt.value)}\n                  className={clsx(\n                    \"p-3 text-left rounded-lg border transition-all\",\n                    format === fmt.value\n                      ? \"border-blue-500/50 bg-blue-500/10 text-blue-300\"\n                      : \"border-slate-700/50 bg-slate-800/30 text-slate-300 hover:bg-slate-700/30\",\n                  )}\n                >\n                  <div className=\"font-medium\">{fmt.label}</div>\n                  <div className=\"text-xs opacity-75\">{fmt.description}</div>\n                </button>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                Start Date\n              </label>\n              <input\n                type=\"date\"\n                value={dateRange.start}\n                onChange={(e) =>\n                  setDateRange((prev) => ({ ...prev, start: e.target.value }))\n                }\n                className=\"input-base text-sm\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                End Date\n              </label>\n              <input\n                type=\"date\"\n                value={dateRange.end}\n                onChange={(e) =>\n                  setDateRange((prev) => ({ ...prev, end: e.target.value }))\n                }\n                className=\"input-base text-sm\"\n                min={dateRange.start}\n              />\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Real-time Activity Feed\ninterface Activity {\n  id: string;\n  type: \"donation\" | \"new_donor\" | \"campaign_update\" | \"goal_reached\";\n  message: string;\n  timestamp: Date;\n  amount?: number;\n  campaign?: string;\n  donor?: string;\n}\n\ninterface ActivityFeedProps {\n  activities: Activity[];\n  maxItems?: number;\n  className?: string;\n}\n\nexport const ActivityFeed: React.FC<ActivityFeedProps> = ({\n  activities,\n  maxItems = 10,\n  className = \"\",\n}) => {\n  const getActivityIcon = (type: string) => {\n    switch (type) {\n      case \"donation\":\n        return <DollarSign className=\"w-4 h-4 text-green-400\" />;\n      case \"new_donor\":\n        return <Users className=\"w-4 h-4 text-blue-400\" />;\n      case \"campaign_update\":\n        return <Target className=\"w-4 h-4 text-purple-400\" />;\n      case \"goal_reached\":\n        return <TrendingUp className=\"w-4 h-4 text-yellow-400\" />;\n      default:\n        return <div className=\"w-4 h-4 bg-slate-400 rounded-full\" />;\n    }\n  };\n\n  const getActivityColor = (type: string) => {\n    switch (type) {\n      case \"donation\":\n        return \"border-green-500/30 bg-green-500/5\";\n      case \"new_donor\":\n        return \"border-blue-500/30 bg-blue-500/5\";\n      case \"campaign_update\":\n        return \"border-purple-500/30 bg-purple-500/5\";\n      case \"goal_reached\":\n        return \"border-yellow-500/30 bg-yellow-500/5\";\n      default:\n        return \"border-slate-500/30 bg-slate-500/5\";\n    }\n  };\n\n  const formatTimeAgo = (timestamp: Date) => {\n    const now = new Date();\n    const diff = now.getTime() - timestamp.getTime();\n    const minutes = Math.floor(diff / (1000 * 60));\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n\n    if (minutes < 1) return \"Just now\";\n    if (minutes < 60) return `${minutes}m ago`;\n    if (hours < 24) return `${hours}h ago`;\n    return timestamp.toLocaleDateString();\n  };\n\n  const displayedActivities = activities.slice(0, maxItems);\n\n  return (\n    <div className={clsx(\"card-base\", className)}>\n      <div className=\"p-6 border-b border-slate-700/50\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-white\">\n              Recent Activity\n            </h3>\n            <p className=\"text-sm text-slate-400\">\n              Live updates from your campaigns\n            </p>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\" />\n            <span className=\"text-xs text-green-400\">Live</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-h-96 overflow-y-auto custom-scrollbar\">\n        {displayedActivities.length > 0 ? (\n          <div className=\"p-4 space-y-3\">\n            {displayedActivities.map((activity, index) => (\n              <div\n                key={activity.id}\n                className={clsx(\n                  \"p-4 rounded-xl border transition-all duration-200 hover:shadow-md\",\n                  getActivityColor(activity.type),\n                  index === 0 && \"animate-fade-in\",\n                )}\n              >\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"flex-shrink-0 p-2 bg-slate-800/50 rounded-lg\">\n                    {getActivityIcon(activity.type)}\n                  </div>\n\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm text-white leading-relaxed\">\n                      {activity.message}\n                      {activity.amount && (\n                        <span className=\"font-semibold text-green-400 ml-1\">\n                          ${activity.amount.toLocaleString()}\n                        </span>\n                      )}\n                    </p>\n\n                    <div className=\"flex items-center justify-between mt-2\">\n                      <div className=\"flex items-center space-x-2 text-xs text-slate-400\">\n                        {activity.campaign && (\n                          <span className=\"px-2 py-0.5 bg-slate-700/50 rounded-full\">\n                            {activity.campaign}\n                          </span>\n                        )}\n                        {activity.donor && (\n                          <span className=\"px-2 py-0.5 bg-slate-700/50 rounded-full\">\n                            {activity.donor}\n                          </span>\n                        )}\n                      </div>\n\n                      <span className=\"text-xs text-slate-500\">\n                        {formatTimeAgo(activity.timestamp)}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"p-12 text-center\">\n            <div className=\"w-16 h-16 mx-auto mb-4 bg-slate-800/50 rounded-full flex items-center justify-center\">\n              <Calendar className=\"w-8 h-8 text-slate-400\" />\n            </div>\n            <h3 className=\"text-lg font-medium text-slate-300 mb-2\">\n              No recent activity\n            </h3>\n            <p className=\"text-slate-400\">\n              Activity from your campaigns will appear here\n            </p>\n          </div>\n        )}\n      </div>\n\n      {activities.length > maxItems && (\n        <div className=\"p-4 border-t border-slate-700/50 text-center\">\n          <button className=\"text-blue-400 hover:text-blue-300 text-sm font-medium transition-colors\">\n            View all activity ({activities.length - maxItems} more)\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Goal Progress Tracker\ninterface GoalTrackerProps {\n  goals: {\n    id: string;\n    name: string;\n    target: number;\n    current: number;\n    deadline: Date;\n    category: string;\n    priority: \"high\" | \"medium\" | \"low\";\n  }[];\n  className?: string;\n}\n\nexport const GoalProgressTracker: React.FC<GoalTrackerProps> = ({\n  goals,\n  className = \"\",\n}) => {\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"high\":\n        return \"border-red-500/30 bg-red-500/5\";\n      case \"medium\":\n        return \"border-yellow-500/30 bg-yellow-500/5\";\n      case \"low\":\n        return \"border-green-500/30 bg-green-500/5\";\n      default:\n        return \"border-slate-500/30 bg-slate-500/5\";\n    }\n  };\n\n  const getDaysLeft = (deadline: Date) => {\n    const now = new Date();\n    const diff = deadline.getTime() - now.getTime();\n    const days = Math.ceil(diff / (1000 * 60 * 60 * 24));\n    return days;\n  };\n\n  const sortedGoals = [...goals].sort((a, b) => {\n    const priorityOrder = { high: 3, medium: 2, low: 1 };\n    return priorityOrder[b.priority] - priorityOrder[a.priority];\n  });\n\n  return (\n    <div className={clsx(\"card-base\", className)}>\n      <div className=\"p-6 border-b border-slate-700/50\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-white\">Goal Progress</h3>\n            <p className=\"text-sm text-slate-400\">\n              {goals.length} active goals\n            </p>\n          </div>\n          <button className=\"button-ghost text-sm\">Manage Goals</button>\n        </div>\n      </div>\n\n      <div className=\"p-6 space-y-4\">\n        {sortedGoals.map((goal) => {\n          const progress = (goal.current / goal.target) * 100;\n          const daysLeft = getDaysLeft(goal.deadline);\n          const isOverdue = daysLeft < 0;\n          const isUrgent = daysLeft <= 7 && daysLeft >= 0;\n\n          return (\n            <div\n              key={goal.id}\n              className={clsx(\n                \"p-4 rounded-xl border\",\n                getPriorityColor(goal.priority),\n              )}\n            >\n              <div className=\"flex items-start justify-between mb-3\">\n                <div>\n                  <h4 className=\"font-medium text-white\">{goal.name}</h4>\n                  <p className=\"text-sm text-slate-400\">{goal.category}</p>\n                </div>\n\n                <div className=\"text-right\">\n                  <div className=\"text-lg font-semibold text-white\">\n                    ${goal.current.toLocaleString()}\n                  </div>\n                  <div className=\"text-sm text-slate-400\">\n                    of ${goal.target.toLocaleString()}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"mb-3\">\n                <div className=\"flex justify-between text-sm mb-1\">\n                  <span className=\"text-slate-400\">Progress</span>\n                  <span className=\"text-white font-medium\">\n                    {progress.toFixed(1)}%\n                  </span>\n                </div>\n                <div className=\"w-full bg-slate-700/50 rounded-full h-2\">\n                  <div\n                    className={clsx(\n                      \"h-2 rounded-full transition-all duration-500\",\n                      progress >= 100\n                        ? \"bg-gradient-to-r from-green-500 to-green-400\"\n                        : progress >= 75\n                          ? \"bg-gradient-to-r from-blue-500 to-purple-500\"\n                          : progress >= 50\n                            ? \"bg-gradient-to-r from-yellow-500 to-orange-500\"\n                            : \"bg-gradient-to-r from-red-500 to-red-400\",\n                    )}\n                    style={{ width: `${Math.min(progress, 100)}%` }}\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between text-sm\">\n                <div className=\"flex items-center space-x-2\">\n                  <span\n                    className={clsx(\n                      \"px-2 py-0.5 rounded-full text-xs font-medium\",\n                      goal.priority === \"high\"\n                        ? \"bg-red-500/20 text-red-300\"\n                        : goal.priority === \"medium\"\n                          ? \"bg-yellow-500/20 text-yellow-300\"\n                          : \"bg-green-500/20 text-green-300\",\n                    )}\n                  >\n                    {goal.priority} priority\n                  </span>\n                </div>\n\n                <span\n                  className={clsx(\n                    \"text-sm font-medium\",\n                    isOverdue\n                      ? \"text-red-400\"\n                      : isUrgent\n                        ? \"text-yellow-400\"\n                        : \"text-slate-400\",\n                  )}\n                >\n                  {isOverdue\n                    ? \"Overdue\"\n                    : daysLeft === 0\n                      ? \"Due today\"\n                      : daysLeft === 1\n                        ? \"1 day left\"\n                        : `${daysLeft} days left`}\n                </span>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/components/AppContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/components/CampaignDetail.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'campaign' is defined but never used.","line":7,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"campaign"},"fix":{"range":[141,159],"text":""},"desc":"Remove unused variable 'campaign'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'onBack' is defined but never used.","line":14,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"onBack"},"fix":{"range":[279,289],"text":""},"desc":"Remove unused variable 'onBack'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onBack' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":9}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\n\nimport { Campaign } from \"../models/campaign\";\n\ninterface CampaignDetailProps {\n  campaign: Campaign;\n  onEdit: (campaign: Campaign) => void;\n  onBack: () => void;\n}\n\nexport const CampaignDetail: React.FC<CampaignDetailProps> = ({\n  campaign,\n  onEdit,\n  onBack,\n}) => {\n  const progressPercentage = Math.min(\n    (campaign.raised / campaign.goal) * 100,\n    100,\n  );\n  const daysRemaining = Math.ceil(\n    (new Date(campaign.endDate).getTime() - new Date().getTime()) /\n      (1000 * 60 * 60 * 24),\n  );\n\n  const getStatusColor = (status: Campaign[\"status\"]) => {\n    switch (status) {\n      case \"Active\":\n        return \"bg-green-100 text-green-800 border-green-200\";\n      case \"Planned\":\n        return \"bg-yellow-100 text-yellow-800 border-yellow-200\";\n      case \"Completed\":\n        return \"bg-blue-100 text-blue-800 border-blue-200\";\n      case \"Cancelled\":\n        return \"bg-red-100 text-red-800 border-red-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  const getCategoryIcon = (category: Campaign[\"category\"]) => {\n    switch (category) {\n      case \"Education\":\n        return \"🎓\";\n      case \"Healthcare\":\n        return \"🏥\";\n      case \"Environment\":\n        return \"🌱\";\n      case \"Emergency\":\n        return \"🚨\";\n      case \"Community\":\n        return \"🏘️\";\n      default:\n        return \"📋\";\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n        <div className=\"flex flex-col lg:flex-row lg:items-start lg:justify-between gap-4\">\n          <div className=\"flex-1\">\n            <div className=\"flex items-center gap-3 mb-2\">\n              <span className=\"text-3xl\">\n                {getCategoryIcon(campaign.category)}\n              </span>\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">\n                  {campaign.name}\n                </h1>\n                <div className=\"flex items-center gap-2 mt-1\">\n                  <span className=\"text-sm text-gray-600\">\n                    {campaign.category}\n                  </span>\n                  <span className=\"text-gray-400\">•</span>\n                  <span\n                    className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border ${getStatusColor(campaign.status)}`}\n                  >\n                    {campaign.status}\n                  </span>\n                </div>\n              </div>\n            </div>\n            {campaign.description && (\n              <p className=\"text-gray-700 leading-relaxed\">\n                {campaign.description}\n              </p>\n            )}\n          </div>\n\n          <div className=\"flex gap-3\">\n            <button\n              onClick={() => onEdit(campaign)}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium text-sm transition-colors flex items-center gap-2\"\n            >\n              <svg\n                className=\"w-4 h-4\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\"\n                />\n              </svg>\n              Edit Campaign\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Progress and Key Metrics */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Progress Chart */}\n        <div className=\"lg:col-span-2 bg-white rounded-lg border border-gray-200 p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n            Fundraising Progress\n          </h3>\n\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-3xl font-bold text-gray-900\">\n                ${campaign.raised.toLocaleString()}\n              </span>\n              <span className=\"text-lg text-gray-600\">\n                {progressPercentage.toFixed(1)}%\n              </span>\n            </div>\n\n            <div className=\"w-full bg-gray-200 rounded-full h-4\">\n              <div\n                className=\"bg-gradient-to-r from-blue-500 to-blue-600 h-4 rounded-full transition-all duration-500\"\n                style={{ width: `${progressPercentage}%` }}\n              />\n            </div>\n\n            <div className=\"flex justify-between text-sm text-gray-600\">\n              <span>Raised: ${campaign.raised.toLocaleString()}</span>\n              <span>Goal: ${campaign.goal.toLocaleString()}</span>\n            </div>\n\n            {progressPercentage >= 100 ? (\n              <div className=\"bg-green-50 border border-green-200 rounded-lg p-3\">\n                <p className=\"text-green-800 font-medium\">\n                  🎉 Congratulations! Goal reached!\n                </p>\n              </div>\n            ) : (\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3\">\n                <p className=\"text-blue-800\">\n                  <span className=\"font-medium\">\n                    ${(campaign.goal - campaign.raised).toLocaleString()}\n                  </span>{\" \"}\n                  remaining to reach goal\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Key Stats */}\n        <div className=\"space-y-4\">\n          <div className=\"bg-white rounded-lg border border-gray-200 p-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 bg-green-100 rounded-lg\">\n                <svg\n                  className=\"w-5 h-5 text-green-600\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z\"\n                  />\n                </svg>\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {campaign.donorCount}\n                </p>\n                <p className=\"text-sm text-gray-600\">Total Donors</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-lg border border-gray-200 p-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 bg-blue-100 rounded-lg\">\n                <svg\n                  className=\"w-5 h-5 text-blue-600\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1\"\n                  />\n                </svg>\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  ${campaign.averageGift}\n                </p>\n                <p className=\"text-sm text-gray-600\">Average Gift</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-lg border border-gray-200 p-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 bg-purple-100 rounded-lg\">\n                <svg\n                  className=\"w-5 h-5 text-purple-600\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\"\n                  />\n                </svg>\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {daysRemaining > 0 ? daysRemaining : 0}\n                </p>\n                <p className=\"text-sm text-gray-600\">\n                  {daysRemaining > 0 ? \"Days Remaining\" : \"Campaign Ended\"}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Campaign Details */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Campaign Information */}\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n            Campaign Details\n          </h3>\n\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-700\">Start Date</p>\n                <p className=\"text-gray-900\">\n                  {new Date(campaign.startDate).toLocaleDateString()}\n                </p>\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-gray-700\">End Date</p>\n                <p className=\"text-gray-900\">\n                  {new Date(campaign.endDate).toLocaleDateString()}\n                </p>\n              </div>\n            </div>\n\n            {campaign.targetAudience && (\n              <div>\n                <p className=\"text-sm font-medium text-gray-700\">\n                  Target Audience\n                </p>\n                <p className=\"text-gray-900\">{campaign.targetAudience}</p>\n              </div>\n            )}\n\n            {campaign.createdBy && (\n              <div>\n                <p className=\"text-sm font-medium text-gray-700\">Created By</p>\n                <p className=\"text-gray-900\">{campaign.createdBy}</p>\n              </div>\n            )}\n\n            <div>\n              <p className=\"text-sm font-medium text-gray-700\">Created</p>\n              <p className=\"text-gray-900\">\n                {new Date(campaign.createdAt).toLocaleDateString()}\n              </p>\n            </div>\n\n            <div>\n              <p className=\"text-sm font-medium text-gray-700\">Last Updated</p>\n              <p className=\"text-gray-900\">\n                {new Date(campaign.lastUpdated).toLocaleDateString()}\n              </p>\n            </div>\n\n            {campaign.tags && campaign.tags.length > 0 && (\n              <div>\n                <p className=\"text-sm font-medium text-gray-700 mb-2\">Tags</p>\n                <div className=\"flex flex-wrap gap-2\">\n                  {campaign.tags.map((tag: string, index: number) => (\n                    <span\n                      key={index}\n                      className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800\"\n                    >\n                      #{tag}\n                    </span>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Performance Metrics */}\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n            Performance Metrics\n          </h3>\n\n          <div className=\"space-y-4\">\n            {campaign.emailsSent !== undefined && (\n              <div className=\"flex justify-between items-center py-2 border-b border-gray-100\">\n                <span className=\"text-sm font-medium text-gray-700\">\n                  Emails Sent\n                </span>\n                <span className=\"text-gray-900 font-medium\">\n                  {campaign.emailsSent.toLocaleString()}\n                </span>\n              </div>\n            )}\n\n            {campaign.clickThroughRate !== undefined && (\n              <div className=\"flex justify-between items-center py-2 border-b border-gray-100\">\n                <span className=\"text-sm font-medium text-gray-700\">\n                  Click-Through Rate\n                </span>\n                <span className=\"text-gray-900 font-medium\">\n                  {campaign.clickThroughRate}%\n                </span>\n              </div>\n            )}\n\n            {campaign.conversionRate !== undefined && (\n              <div className=\"flex justify-between items-center py-2 border-b border-gray-100\">\n                <span className=\"text-sm font-medium text-gray-700\">\n                  Conversion Rate\n                </span>\n                <span className=\"text-gray-900 font-medium\">\n                  {campaign.conversionRate}%\n                </span>\n              </div>\n            )}\n\n            <div className=\"flex justify-between items-center py-2 border-b border-gray-100\">\n              <span className=\"text-sm font-medium text-gray-700\">\n                Completion Rate\n              </span>\n              <span className=\"text-gray-900 font-medium\">\n                {progressPercentage.toFixed(1)}%\n              </span>\n            </div>\n\n            {campaign.donorCount > 0 && (\n              <div className=\"flex justify-between items-center py-2\">\n                <span className=\"text-sm font-medium text-gray-700\">\n                  Average Gift Size\n                </span>\n                <span className=\"text-gray-900 font-medium\">\n                  ${campaign.averageGift}\n                </span>\n              </div>\n            )}\n          </div>\n\n          {/* Performance Indicators */}\n          <div className=\"mt-6 pt-4 border-t border-gray-200\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"text-center\">\n                <div\n                  className={`text-2xl font-bold ${\n                    progressPercentage >= 75\n                      ? \"text-green-600\"\n                      : progressPercentage >= 50\n                        ? \"text-yellow-600\"\n                        : \"text-red-600\"\n                  }`}\n                >\n                  {progressPercentage >= 75\n                    ? \"📈\"\n                    : progressPercentage >= 50\n                      ? \"📊\"\n                      : \"📉\"}\n                </div>\n                <p className=\"text-xs text-gray-600 mt-1\">\n                  {progressPercentage >= 75\n                    ? \"Excellent\"\n                    : progressPercentage >= 50\n                      ? \"Good\"\n                      : \"Needs Attention\"}\n                </p>\n              </div>\n              <div className=\"text-center\">\n                <div\n                  className={`text-2xl font-bold ${\n                    daysRemaining > 7\n                      ? \"text-green-600\"\n                      : daysRemaining > 0\n                        ? \"text-yellow-600\"\n                        : \"text-gray-600\"\n                  }`}\n                >\n                  {daysRemaining > 7 ? \"⏰\" : daysRemaining > 0 ? \"⚡\" : \"🏁\"}\n                </div>\n                <p className=\"text-xs text-gray-600 mt-1\">\n                  {daysRemaining > 7\n                    ? \"On Track\"\n                    : daysRemaining > 0\n                      ? \"Final Sprint\"\n                      : \"Completed\"}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Internal Notes */}\n      {campaign.notes && (\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n            Internal Notes\n          </h3>\n          <div className=\"bg-gray-50 rounded-lg p-4\">\n            <p className=\"text-gray-700 whitespace-pre-wrap\">\n              {campaign.notes}\n            </p>\n          </div>\n        </div>\n      )}\n\n      {/* Action Items / Recommendations */}\n      <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n          Recommendations\n        </h3>\n        <div className=\"space-y-3\">\n          {progressPercentage < 50 && daysRemaining > 0 && (\n            <div className=\"flex items-start gap-3 p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\n              <div className=\"text-yellow-600 mt-0.5\">⚠️</div>\n              <div>\n                <p className=\"text-sm font-medium text-yellow-800\">\n                  Campaign is behind target\n                </p>\n                <p className=\"text-xs text-yellow-700\">\n                  Consider increasing outreach efforts or adjusting messaging\n                  strategy.\n                </p>\n              </div>\n            </div>\n          )}\n\n          {daysRemaining <= 7 &&\n            daysRemaining > 0 &&\n            progressPercentage < 90 && (\n              <div className=\"flex items-start gap-3 p-3 bg-orange-50 border border-orange-200 rounded-lg\">\n                <div className=\"text-orange-600 mt-0.5\">🏃‍♂️</div>\n                <div>\n                  <p className=\"text-sm font-medium text-orange-800\">\n                    Final week push needed\n                  </p>\n                  <p className=\"text-xs text-orange-700\">\n                    Send urgent appeals and follow up with major donor\n                    prospects.\n                  </p>\n                </div>\n              </div>\n            )}\n\n          {progressPercentage >= 100 && (\n            <div className=\"flex items-start gap-3 p-3 bg-green-50 border border-green-200 rounded-lg\">\n              <div className=\"text-green-600 mt-0.5\">🎉</div>\n              <div>\n                <p className=\"text-sm font-medium text-green-800\">\n                  Goal achieved!\n                </p>\n                <p className=\"text-xs text-green-700\">\n                  Send thank you messages to all donors and consider stretch\n                  goals.\n                </p>\n              </div>\n            </div>\n          )}\n\n          {campaign.donorCount > 0 && campaign.averageGift < 100 && (\n            <div className=\"flex items-start gap-3 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n              <div className=\"text-blue-600 mt-0.5\">💡</div>\n              <div>\n                <p className=\"text-sm font-medium text-blue-800\">\n                  Focus on major gifts\n                </p>\n                <p className=\"text-xs text-blue-700\">\n                  Consider targeted outreach to increase average gift size.\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/components/CampaignDisplayComponents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/components/CampaignFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/components/CampaignList.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'campaign' is defined but never used.","line":10,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":38,"suggestions":[{"messageId":"removeVar","data":{"varName":"campaign"},"fix":{"range":[400,418],"text":""},"desc":"Remove unused variable 'campaign'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'campaign' is defined but never used.","line":11,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":38,"suggestions":[{"messageId":"removeVar","data":{"varName":"campaign"},"fix":{"range":[448,466],"text":""},"desc":"Remove unused variable 'campaign'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'onEditCampaign' is defined but never used.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"onEditCampaign"},"fix":{"range":[567,582],"text":""},"desc":"Remove unused variable 'onEditCampaign'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onEditCampaign' is defined but never used. Allowed unused args must match /^_/u.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":17},{"ruleId":"no-unused-vars","severity":2,"message":"'setFilters' is assigned a value but never used.","line":22,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"setFilters"},"fix":{"range":[755,767],"text":""},"desc":"Remove unused variable 'setFilters'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setFilters' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":22,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":29},{"ruleId":"@typescript-eslint/no-floating-promises","severity":1,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":26,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":26,"endColumn":21,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[896,896],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[896,896],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadCampaigns'. Either include it or remove the dependency array.","line":27,"column":6,"nodeType":"ArrayExpression","endLine":27,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [filters, loadCampaigns]","fix":{"range":[918,927],"text":"[filters, loadCampaigns]"}}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/components/CampaignList.tsx - Complete campaign list component\nimport React, { useState, useEffect } from \"react\";\n\nimport CampaignQuickCard from \"./CampaignQuickCard\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport { Campaign, CampaignFilters } from \"../models/campaign\";\nimport { campaignService } from \"../services/campaignService\";\n\ninterface CampaignListProps {\n  onEditCampaign: (campaign: Campaign) => void;\n  onViewCampaign: (campaign: Campaign) => void;\n  onCreateCampaign: () => void;\n}\n\nconst CampaignList: React.FC<CampaignListProps> = ({\n  onEditCampaign,\n  onViewCampaign,\n  onCreateCampaign,\n}) => {\n  const [campaigns, setCampaigns] = useState<Campaign[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [filters, setFilters] = useState<CampaignFilters>({});\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n\n  useEffect(() => {\n    loadCampaigns();\n  }, [filters]);\n\n  const loadCampaigns = async () => {\n    try {\n      setLoading(true);\n      const data = await campaignService.getAllCampaigns(filters);\n      setCampaigns(data);\n    } catch (error) {\n      console.error(\"Failed to load campaigns:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center h-64\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with create button and view toggle */}\n      <div className=\"flex justify-between items-center\">\n        <div className=\"flex items-center space-x-4\">\n          <h3 className=\"text-lg font-semibold\">\n            Campaigns ({campaigns.length})\n          </h3>\n          <div className=\"flex items-center space-x-2\">\n            <button\n              onClick={() => setViewMode(\"grid\")}\n              className={`px-3 py-1 rounded ${\n                viewMode === \"grid\"\n                  ? \"bg-blue-100 text-blue-700\"\n                  : \"text-gray-600\"\n              }`}\n            >\n              Grid\n            </button>\n            <button\n              onClick={() => setViewMode(\"list\")}\n              className={`px-3 py-1 rounded ${\n                viewMode === \"list\"\n                  ? \"bg-blue-100 text-blue-700\"\n                  : \"text-gray-600\"\n              }`}\n            >\n              List\n            </button>\n          </div>\n        </div>\n\n        <button\n          onClick={onCreateCampaign}\n          className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors\"\n        >\n          Create Campaign\n        </button>\n      </div>\n\n      {/* Campaigns grid/list */}\n      {campaigns.length === 0 ? (\n        <div className=\"text-center py-12 text-gray-500\">\n          <p className=\"text-lg mb-4\">No campaigns found</p>\n          <button\n            onClick={onCreateCampaign}\n            className=\"bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors\"\n          >\n            Create Your First Campaign\n          </button>\n        </div>\n      ) : (\n        <div\n          className={\n            viewMode === \"grid\"\n              ? \"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\"\n              : \"space-y-4\"\n          }\n        >\n          {campaigns.map((campaign) => (\n            <CampaignQuickCard\n              key={campaign.id}\n              campaign={campaign}\n              onClick={() => onViewCampaign(campaign)}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CampaignList;\n","usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/components/CampaignModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'campaign' is defined but never used.","line":24,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":60,"suggestions":[{"messageId":"removeVar","data":{"varName":"campaign"},"fix":{"range":[446,502],"text":""},"desc":"Remove unused variable 'campaign'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/components/CampaignModal.tsx - Modernized with unified dark theme\nimport clsx from \"clsx\";\nimport {\n  X,\n  Plus,\n  AlertCircle,\n  Calendar,\n  DollarSign,\n  Target,\n  Users,\n} from \"lucide-react\";\nimport React, { useState, useEffect } from \"react\";\n\nimport {\n  Campaign,\n  CampaignCreateRequest,\n  CampaignUpdateRequest,\n} from \"../models/campaign\";\n\ninterface CampaignModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSave: (\n    campaign: CampaignCreateRequest | CampaignUpdateRequest,\n  ) => Promise<void>;\n  initialData?: Campaign | null;\n  mode: \"create\" | \"edit\";\n}\n\ntype CampaignFormData = {\n  id?: string;\n  name: string;\n  description?: string;\n  goal: number;\n  startDate: string;\n  endDate: string;\n  status: Campaign[\"status\"];\n  category: Campaign[\"category\"];\n  targetAudience?: string;\n  tags?: string[];\n  notes?: string;\n};\n\nexport const CampaignModal: React.FC<CampaignModalProps> = ({\n  isOpen,\n  onClose,\n  onSave,\n  initialData,\n  mode,\n}) => {\n  const [form, setForm] = useState<CampaignFormData>({\n    name: \"\",\n    description: \"\",\n    goal: 0,\n    startDate: \"\",\n    endDate: \"\",\n    status: \"Planned\",\n    category: \"General\",\n    targetAudience: \"\",\n    tags: [],\n    notes: \"\",\n  });\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const [loading, setLoading] = useState(false);\n  const [newTag, setNewTag] = useState(\"\");\n  const [currentStep, setCurrentStep] = useState(1);\n\n  useEffect(() => {\n    if (isOpen) {\n      if (initialData && mode === \"edit\") {\n        setForm({\n          id: initialData.id,\n          name: initialData.name,\n          description: initialData.description || \"\",\n          goal: initialData.goal,\n          startDate: initialData.startDate,\n          endDate: initialData.endDate,\n          status: initialData.status,\n          category: initialData.category,\n          targetAudience: initialData.targetAudience || \"\",\n          tags: initialData.tags || [],\n          notes: initialData.notes || \"\",\n        });\n      } else {\n        setForm({\n          name: \"\",\n          description: \"\",\n          goal: 0,\n          startDate: \"\",\n          endDate: \"\",\n          status: \"Planned\",\n          category: \"General\",\n          targetAudience: \"\",\n          tags: [],\n          notes: \"\",\n        });\n      }\n      setErrors({});\n      setNewTag(\"\");\n      setCurrentStep(1);\n    }\n  }, [isOpen, initialData, mode]);\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    if (!form.name.trim()) {\n      newErrors.name = \"Campaign name is required\";\n    }\n\n    if (form.goal <= 0) {\n      newErrors.goal = \"Goal must be greater than 0\";\n    }\n\n    if (!form.startDate) {\n      newErrors.startDate = \"Start date is required\";\n    }\n\n    if (!form.endDate) {\n      newErrors.endDate = \"End date is required\";\n    }\n\n    if (\n      form.startDate &&\n      form.endDate &&\n      new Date(form.startDate) >= new Date(form.endDate)\n    ) {\n      newErrors.endDate = \"End date must be after start date\";\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleChange = (\n    e: React.ChangeEvent<\n      HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\n    >,\n  ) => {\n    const { name, value } = e.target;\n    setForm((prev) => ({\n      ...prev,\n      [name]: name === \"goal\" ? Number(value) : value,\n    }));\n\n    if (errors[name]) {\n      setErrors((prev) => ({ ...prev, [name]: \"\" }));\n    }\n  };\n\n  const handleAddTag = () => {\n    if (newTag.trim() && !form.tags?.includes(newTag.trim())) {\n      setForm((prev) => ({\n        ...prev,\n        tags: [...(prev.tags || []), newTag.trim()],\n      }));\n      setNewTag(\"\");\n    }\n  };\n\n  const handleRemoveTag = (tagToRemove: string) => {\n    setForm((prev) => ({\n      ...prev,\n      tags: prev.tags?.filter((tag) => tag !== tagToRemove) || [],\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!validateForm()) return;\n\n    setLoading(true);\n    try {\n      if (mode === \"edit\" && form.id) {\n        const submitData: CampaignUpdateRequest = {\n          id: form.id,\n          name: form.name,\n          description: form.description,\n          goal: form.goal,\n          startDate: form.startDate,\n          endDate: form.endDate || \"\",\n          status: form.status || \"Planned\",\n          category: form.category || \"General\",\n          targetAudience: form.targetAudience || \"\",\n          tags: form.tags,\n          notes: form.notes,\n        };\n        await onSave(submitData);\n      } else {\n        const submitData: CampaignCreateRequest = {\n          name: form.name,\n          description: form.description,\n          goal: form.goal,\n          startDate: form.startDate,\n          endDate: form.endDate || \"\",\n          status: form.status as \"Planned\" | \"Active\",\n          category: form.category || \"General\",\n          targetAudience: form.targetAudience || \"\",\n          tags: form.tags,\n          notes: form.notes,\n        };\n        await onSave(submitData);\n      }\n      onClose();\n    } catch (error) {\n      console.error(\"Failed to save campaign:\", error);\n      setErrors({ submit: \"Failed to save campaign. Please try again.\" });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  const categoryOptions = [\n    {\n      value: \"General\",\n      label: \"General\",\n      icon: \"📋\",\n      color: \"from-blue-500 to-blue-600\",\n    },\n    {\n      value: \"Emergency\",\n      label: \"Emergency\",\n      icon: \"🚨\",\n      color: \"from-red-500 to-red-600\",\n    },\n    {\n      value: \"Education\",\n      label: \"Education\",\n      icon: \"🎓\",\n      color: \"from-green-500 to-green-600\",\n    },\n    {\n      value: \"Healthcare\",\n      label: \"Healthcare\",\n      icon: \"🏥\",\n      color: \"from-purple-500 to-purple-600\",\n    },\n    {\n      value: \"Environment\",\n      label: \"Environment\",\n      icon: \"🌱\",\n      color: \"from-emerald-500 to-emerald-600\",\n    },\n    {\n      value: \"Community\",\n      label: \"Community\",\n      icon: \"🏘️\",\n      color: \"from-orange-500 to-orange-600\",\n    },\n    {\n      value: \"Other\",\n      label: \"Other\",\n      icon: \"📌\",\n      color: \"from-gray-500 to-gray-600\",\n    },\n  ];\n\n  const statusOptions =\n    mode === \"edit\" && initialData\n      ? [\n          {\n            value: \"Planned\",\n            label: \"Planned\",\n            color: \"bg-yellow-500/20 text-yellow-400\",\n          },\n          {\n            value: \"Active\",\n            label: \"Active\",\n            color: \"bg-green-500/20 text-green-400\",\n          },\n          {\n            value: \"Completed\",\n            label: \"Completed\",\n            color: \"bg-blue-500/20 text-blue-400\",\n          },\n          {\n            value: \"Cancelled\",\n            label: \"Cancelled\",\n            color: \"bg-red-500/20 text-red-400\",\n          },\n        ]\n      : [\n          {\n            value: \"Planned\",\n            label: \"Planned\",\n            color: \"bg-yellow-500/20 text-yellow-400\",\n          },\n          {\n            value: \"Active\",\n            label: \"Active\",\n            color: \"bg-green-500/20 text-green-400\",\n          },\n        ];\n\n  const steps = [\n    { id: 1, name: \"Basic Info\", icon: Target },\n    { id: 2, name: \"Details\", icon: Calendar },\n    { id: 3, name: \"Settings\", icon: Users },\n  ];\n\n  return (\n    <div className=\"fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-50 p-4 animate-fade-in\">\n      <div className=\"card-base w-full max-w-4xl max-h-[90vh] overflow-hidden animate-scale-in\">\n        {/* Header */}\n        <div className=\"border-b border-surface/50 px-8 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-white mb-1\">\n                {mode === \"edit\" ? \"Edit Campaign\" : \"Create New Campaign\"}\n              </h2>\n              <p className=\"text-slate-400\">\n                {mode === \"edit\"\n                  ? \"Update your campaign details\"\n                  : \"Launch your next fundraising initiative\"}\n              </p>\n            </div>\n            <button\n              onClick={onClose}\n              className=\"p-2 rounded-xl text-slate-400 hover:text-white hover:bg-slate-700/50 transition-all duration-200\"\n            >\n              <X className=\"w-6 h-6\" />\n            </button>\n          </div>\n\n          {/* Progress Steps */}\n          <div className=\"flex items-center space-x-4 mt-6\">\n            {steps.map((step, index) => {\n              const Icon = step.icon;\n              const isActive = currentStep === step.id;\n              const isCompleted = currentStep > step.id;\n\n              return (\n                <div key={step.id} className=\"flex items-center\">\n                  <div\n                    className={clsx(\n                      \"flex items-center space-x-3 px-4 py-2 rounded-xl transition-all duration-200\",\n                      isActive && \"bg-blue-500/20 border border-blue-500/30\",\n                      isCompleted &&\n                        \"bg-green-500/20 border border-green-500/30\",\n                      !isActive &&\n                        !isCompleted &&\n                        \"bg-slate-800/50 border border-slate-700/50\",\n                    )}\n                  >\n                    <Icon\n                      className={clsx(\n                        \"w-4 h-4\",\n                        isActive && \"text-blue-400\",\n                        isCompleted && \"text-green-400\",\n                        !isActive && !isCompleted && \"text-slate-400\",\n                      )}\n                    />\n                    <span\n                      className={clsx(\n                        \"text-sm font-medium\",\n                        isActive && \"text-blue-300\",\n                        isCompleted && \"text-green-300\",\n                        !isActive && !isCompleted && \"text-slate-400\",\n                      )}\n                    >\n                      {step.name}\n                    </span>\n                  </div>\n                  {index < steps.length - 1 && (\n                    <div className=\"w-8 h-0.5 bg-slate-700/50 mx-2\" />\n                  )}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Form Content */}\n        <div\n          className=\"overflow-y-auto custom-scrollbar\"\n          style={{ maxHeight: \"calc(90vh - 200px)\" }}\n        >\n          <form onSubmit={handleSubmit} className=\"p-8 space-y-8\">\n            {/* Error Display */}\n            {errors.submit && (\n              <div className=\"card-base p-4 border-red-500/30 bg-red-500/5\">\n                <div className=\"flex items-start space-x-3\">\n                  <AlertCircle className=\"w-5 h-5 text-red-400 mt-0.5 flex-shrink-0\" />\n                  <div>\n                    <p className=\"text-red-300 font-medium text-sm\">\n                      Failed to save campaign\n                    </p>\n                    <p className=\"text-red-400/80 text-sm mt-1\">\n                      {errors.submit}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Step 1: Basic Info */}\n            {currentStep === 1 && (\n              <div className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  {/* Campaign Name */}\n                  <div className=\"lg:col-span-2\">\n                    <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                      Campaign Name *\n                    </label>\n                    <input\n                      type=\"text\"\n                      name=\"name\"\n                      value={form.name}\n                      onChange={handleChange}\n                      className={clsx(\n                        \"input-base text-lg h-12\",\n                        errors.name && \"border-red-500/50 bg-red-500/5\",\n                      )}\n                      placeholder=\"Enter an inspiring campaign name\"\n                      required\n                    />\n                    {errors.name && (\n                      <p className=\"mt-2 text-sm text-red-400 flex items-center gap-2\">\n                        <AlertCircle className=\"w-4 h-4\" />\n                        {errors.name}\n                      </p>\n                    )}\n                  </div>\n\n                  {/* Description */}\n                  <div className=\"lg:col-span-2\">\n                    <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                      Description\n                    </label>\n                    <textarea\n                      name=\"description\"\n                      value={form.description}\n                      onChange={handleChange}\n                      rows={4}\n                      className=\"input-base resize-none\"\n                      placeholder=\"Describe your campaign goals, impact, and why people should contribute...\"\n                    />\n                  </div>\n\n                  {/* Goal */}\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                      Fundraising Goal *\n                    </label>\n                    <div className=\"relative\">\n                      <DollarSign className=\"absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-slate-400\" />\n                      <input\n                        type=\"number\"\n                        name=\"goal\"\n                        value={form.goal || \"\"}\n                        onChange={handleChange}\n                        className={clsx(\n                          \"input-base pl-12 text-lg font-semibold\",\n                          errors.goal && \"border-red-500/50 bg-red-500/5\",\n                        )}\n                        placeholder=\"25,000\"\n                        min={1}\n                        required\n                      />\n                    </div>\n                    {errors.goal && (\n                      <p className=\"mt-2 text-sm text-red-400 flex items-center gap-2\">\n                        <AlertCircle className=\"w-4 h-4\" />\n                        {errors.goal}\n                      </p>\n                    )}\n                  </div>\n\n                  {/* Category */}\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                      Category *\n                    </label>\n                    <div className=\"grid grid-cols-2 gap-2\">\n                      {categoryOptions.map((option) => (\n                        <button\n                          key={option.value}\n                          type=\"button\"\n                          onClick={() =>\n                            setForm((prev) => ({\n                              ...prev,\n                              category: option.value as any,\n                            }))\n                          }\n                          className={clsx(\n                            \"flex items-center space-x-3 p-3 rounded-xl transition-all duration-200 border text-left\",\n                            form.category === option.value\n                              ? \"border-blue-500/50 bg-blue-500/10 text-white\"\n                              : \"border-slate-700/50 bg-slate-800/30 text-slate-300 hover:bg-slate-700/30\",\n                          )}\n                        >\n                          <span className=\"text-lg\">{option.icon}</span>\n                          <span className=\"font-medium text-sm\">\n                            {option.label}\n                          </span>\n                        </button>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Step 2: Details */}\n            {currentStep === 2 && (\n              <div className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  {/* Start Date */}\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                      Start Date *\n                    </label>\n                    <input\n                      type=\"date\"\n                      name=\"startDate\"\n                      value={form.startDate}\n                      onChange={handleChange}\n                      className={clsx(\n                        \"input-base\",\n                        errors.startDate && \"border-red-500/50 bg-red-500/5\",\n                      )}\n                      required\n                    />\n                    {errors.startDate && (\n                      <p className=\"mt-2 text-sm text-red-400 flex items-center gap-2\">\n                        <AlertCircle className=\"w-4 h-4\" />\n                        {errors.startDate}\n                      </p>\n                    )}\n                  </div>\n\n                  {/* End Date */}\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                      End Date *\n                    </label>\n                    <input\n                      type=\"date\"\n                      name=\"endDate\"\n                      value={form.endDate}\n                      onChange={handleChange}\n                      className={clsx(\n                        \"input-base\",\n                        errors.endDate && \"border-red-500/50 bg-red-500/5\",\n                      )}\n                      required\n                    />\n                    {errors.endDate && (\n                      <p className=\"mt-2 text-sm text-red-400 flex items-center gap-2\">\n                        <AlertCircle className=\"w-4 h-4\" />\n                        {errors.endDate}\n                      </p>\n                    )}\n                  </div>\n\n                  {/* Status */}\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                      Status\n                    </label>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {statusOptions.map((option) => (\n                        <button\n                          key={option.value}\n                          type=\"button\"\n                          onClick={() =>\n                            setForm((prev) => ({\n                              ...prev,\n                              status: option.value as any,\n                            }))\n                          }\n                          className={clsx(\n                            \"px-4 py-2 rounded-xl text-sm font-medium border transition-all duration-200\",\n                            form.status === option.value\n                              ? `${option.color} border-current`\n                              : \"text-slate-400 border-slate-700/50 hover:text-slate-300 hover:border-slate-600/50\",\n                          )}\n                        >\n                          {option.label}\n                        </button>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Target Audience */}\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                      Target Audience\n                    </label>\n                    <input\n                      type=\"text\"\n                      name=\"targetAudience\"\n                      value={form.targetAudience}\n                      onChange={handleChange}\n                      className=\"input-base\"\n                      placeholder=\"e.g., Parents, local businesses, alumni\"\n                    />\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Step 3: Settings */}\n            {currentStep === 3 && (\n              <div className=\"space-y-6\">\n                {/* Tags */}\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                    Tags\n                  </label>\n                  <div className=\"flex flex-wrap gap-2 mb-3\">\n                    {form.tags?.map((tag, index) => (\n                      <span\n                        key={index}\n                        className=\"inline-flex items-center px-3 py-1.5 rounded-full text-sm font-medium bg-blue-500/20 text-blue-300 border border-blue-500/30\"\n                      >\n                        #{tag}\n                        <button\n                          type=\"button\"\n                          onClick={() => handleRemoveTag(tag)}\n                          className=\"ml-2 text-blue-400 hover:text-blue-200 transition-colors\"\n                        >\n                          <X className=\"w-3 h-3\" />\n                        </button>\n                      </span>\n                    ))}\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <input\n                      type=\"text\"\n                      value={newTag}\n                      onChange={(e) => setNewTag(e.target.value)}\n                      onKeyPress={(e) =>\n                        e.key === \"Enter\" &&\n                        (e.preventDefault(), handleAddTag())\n                      }\n                      className=\"flex-1 input-base\"\n                      placeholder=\"Add a tag (press Enter)\"\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={handleAddTag}\n                      disabled={!newTag.trim()}\n                      className=\"button-secondary flex items-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed\"\n                    >\n                      <Plus className=\"w-4 h-4\" />\n                      Add\n                    </button>\n                  </div>\n                </div>\n\n                {/* Internal Notes */}\n                <div>\n                  <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n                    Internal Notes\n                  </label>\n                  <textarea\n                    name=\"notes\"\n                    value={form.notes}\n                    onChange={handleChange}\n                    rows={4}\n                    className=\"input-base resize-none\"\n                    placeholder=\"Internal notes for your team (not visible to donors)...\"\n                  />\n                </div>\n              </div>\n            )}\n          </form>\n        </div>\n\n        {/* Footer Actions */}\n        <div className=\"border-t border-surface/50 px-8 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              {currentStep > 1 && (\n                <button\n                  type=\"button\"\n                  onClick={() => setCurrentStep((prev) => prev - 1)}\n                  className=\"button-ghost\"\n                >\n                  ← Previous\n                </button>\n              )}\n            </div>\n\n            <div className=\"flex items-center gap-3\">\n              <button\n                type=\"button\"\n                onClick={onClose}\n                disabled={loading}\n                className=\"button-ghost disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                Cancel\n              </button>\n\n              {currentStep < steps.length ? (\n                <button\n                  type=\"button\"\n                  onClick={() => setCurrentStep((prev) => prev + 1)}\n                  className=\"button-primary\"\n                >\n                  Next →\n                </button>\n              ) : (\n                <button\n                  onClick={handleSubmit}\n                  disabled={loading}\n                  className=\"button-primary disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2\"\n                >\n                  {loading && (\n                    <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin\" />\n                  )}\n                  {loading\n                    ? \"Saving...\"\n                    : mode === \"edit\"\n                      ? \"Update Campaign\"\n                      : \"Create Campaign\"}\n                </button>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/components/CampaignPerformanceTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/components/CampaignQuickCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/components/CommunicationTools.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'template' is defined but never used.","line":31,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":43,"suggestions":[{"messageId":"removeVar","data":{"varName":"template"},"fix":{"range":[672,695],"text":""},"desc":"Remove unused variable 'template'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":32,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[727,737],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'template' is defined but never used.","line":33,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":48,"suggestions":[{"messageId":"removeVar","data":{"varName":"template"},"fix":{"range":[772,795],"text":""},"desc":"Remove unused variable 'template'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'campaign' is defined but never used.","line":261,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":261,"endColumn":46,"suggestions":[{"messageId":"removeVar","data":{"varName":"campaign"},"fix":{"range":[9434,9460],"text":""},"desc":"Remove unused variable 'campaign'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":262,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":262,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[9492,9502],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":582,"column":48,"nodeType":"Identifier","messageId":"unusedVar","endLine":582,"endColumn":53,"suggestions":[{"messageId":"removeVar","data":{"varName":"index"},"fix":{"range":[20617,20624],"text":""},"desc":"Remove unused variable 'index'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":582,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":582,"endColumn":53},{"ruleId":"no-unused-vars","severity":2,"message":"'message' is defined but never used.","line":665,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":670,"endColumn":4,"suggestions":[{"messageId":"removeVar","data":{"varName":"message"},"fix":{"range":[23859,23964],"text":""},"desc":"Remove unused variable 'message'."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/components/CommunicationTools.tsx - Email templates, messaging, and outreach components\nimport clsx from \"clsx\";\nimport {\n  Mail,\n  Send,\n  Edit,\n  Copy,\n  Trash2,\n  Calendar,\n  Clock,\n  CheckCircle,\n  AlertCircle,\n} from \"lucide-react\";\nimport React, { useState } from \"react\";\n\n// Email Template Builder\ninterface EmailTemplate {\n  id: string;\n  name: string;\n  subject: string;\n  content: string;\n  category: \"welcome\" | \"thank_you\" | \"appeal\" | \"newsletter\" | \"reminder\";\n  lastModified: Date;\n  usage: number;\n  previewImageUrl?: string;\n}\n\ninterface EmailTemplateBuilderProps {\n  templates: EmailTemplate[];\n  onCreateTemplate: () => void;\n  onEditTemplate: (template: EmailTemplate) => void;\n  onDeleteTemplate: (id: string) => void;\n  onDuplicateTemplate: (template: EmailTemplate) => void;\n  className?: string;\n}\n\nexport const EmailTemplateBuilder: React.FC<EmailTemplateBuilderProps> = ({\n  templates,\n  onCreateTemplate,\n  onEditTemplate,\n  onDeleteTemplate,\n  onDuplicateTemplate,\n  className = \"\",\n}) => {\n  const [filter, setFilter] = useState<string>(\"all\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const categoryIcons = {\n    welcome: \"👋\",\n    thank_you: \"🙏\",\n    appeal: \"💝\",\n    newsletter: \"📰\",\n    reminder: \"⏰\",\n  };\n\n  const categoryColors = {\n    welcome: \"bg-blue-500/20 text-blue-300\",\n    thank_you: \"bg-green-500/20 text-green-300\",\n    appeal: \"bg-purple-500/20 text-purple-300\",\n    newsletter: \"bg-yellow-500/20 text-yellow-300\",\n    reminder: \"bg-red-500/20 text-red-300\",\n  };\n\n  const filteredTemplates = templates.filter((template) => {\n    const matchesFilter = filter === \"all\" || template.category === filter;\n    const matchesSearch =\n      template.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      template.subject.toLowerCase().includes(searchQuery.toLowerCase());\n    return matchesFilter && matchesSearch;\n  });\n\n  const categories = Object.keys(\n    categoryIcons,\n  ) as (keyof typeof categoryIcons)[];\n\n  return (\n    <div className={clsx(\"card-base\", className)}>\n      <div className=\"p-6 border-b border-slate-700/50\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-white\">\n              Email Templates\n            </h3>\n            <p className=\"text-sm text-slate-400\">\n              {templates.length} templates available\n            </p>\n          </div>\n          <button\n            onClick={onCreateTemplate}\n            className=\"button-primary flex items-center space-x-2\"\n          >\n            <Edit className=\"w-4 h-4\" />\n            <span>Create Template</span>\n          </button>\n        </div>\n\n        {/* Search and Filter */}\n        <div className=\"flex flex-col sm:flex-row gap-4\">\n          <div className=\"flex-1 relative\">\n            <Mail className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-slate-400\" />\n            <input\n              type=\"text\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              placeholder=\"Search templates...\"\n              className=\"w-full pl-10 pr-4 py-2 input-base\"\n            />\n          </div>\n\n          <div className=\"flex space-x-2\">\n            <button\n              onClick={() => setFilter(\"all\")}\n              className={clsx(\n                \"px-4 py-2 rounded-lg text-sm font-medium transition-all\",\n                filter === \"all\"\n                  ? \"bg-blue-500/20 text-blue-300 border border-blue-500/30\"\n                  : \"text-slate-400 hover:text-white hover:bg-slate-700/50\",\n              )}\n            >\n              All ({templates.length})\n            </button>\n            {categories.map((category) => (\n              <button\n                key={category}\n                onClick={() => setFilter(category)}\n                className={clsx(\n                  \"px-4 py-2 rounded-lg text-sm font-medium transition-all flex items-center space-x-1\",\n                  filter === category\n                    ? \"bg-purple-500/20 text-purple-300 border border-purple-500/30\"\n                    : \"text-slate-400 hover:text-white hover:bg-slate-700/50\",\n                )}\n              >\n                <span>{categoryIcons[category]}</span>\n                <span className=\"capitalize\">{category.replace(\"_\", \" \")}</span>\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-6\">\n        {filteredTemplates.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredTemplates.map((template) => (\n              <div\n                key={template.id}\n                className=\"bg-slate-800/30 rounded-xl border border-slate-700/50 overflow-hidden hover:border-slate-600/50 transition-colors group\"\n              >\n                {/* Preview */}\n                <div className=\"h-32 bg-slate-900/50 flex items-center justify-center relative overflow-hidden\">\n                  {template.previewImageUrl ? (\n                    <img\n                      src={template.previewImageUrl}\n                      alt={template.name}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  ) : (\n                    <div className=\"text-center\">\n                      <Mail className=\"w-8 h-8 text-slate-400 mx-auto mb-2\" />\n                      <p className=\"text-xs text-slate-500\">No preview</p>\n                    </div>\n                  )}\n\n                  {/* Actions overlay */}\n                  <div className=\"absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center space-x-2\">\n                    <button\n                      onClick={() => onEditTemplate(template)}\n                      className=\"p-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n                      title=\"Edit template\"\n                    >\n                      <Edit className=\"w-4 h-4\" />\n                    </button>\n                    <button\n                      onClick={() => onDuplicateTemplate(template)}\n                      className=\"p-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors\"\n                      title=\"Duplicate template\"\n                    >\n                      <Copy className=\"w-4 h-4\" />\n                    </button>\n                    <button\n                      onClick={() => onDeleteTemplate(template.id)}\n                      className=\"p-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors\"\n                      title=\"Delete template\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </button>\n                  </div>\n                </div>\n\n                {/* Content */}\n                <div className=\"p-4\">\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium text-white mb-1\">\n                        {template.name}\n                      </h4>\n                      <p className=\"text-sm text-slate-400 line-clamp-1\">\n                        {template.subject}\n                      </p>\n                    </div>\n                    <span\n                      className={clsx(\n                        \"px-2 py-1 rounded-full text-xs font-medium ml-2 flex-shrink-0\",\n                        categoryColors[template.category],\n                      )}\n                    >\n                      {categoryIcons[template.category]}{\" \"}\n                      {template.category.replace(\"_\", \" \")}\n                    </span>\n                  </div>\n\n                  <div className=\"flex items-center justify-between text-xs text-slate-500\">\n                    <span>Used {template.usage} times</span>\n                    <span>\n                      Modified {template.lastModified.toLocaleDateString()}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-12\">\n            <div className=\"w-16 h-16 mx-auto mb-4 bg-slate-800/50 rounded-full flex items-center justify-center\">\n              <Mail className=\"w-8 h-8 text-slate-400\" />\n            </div>\n            <h3 className=\"text-lg font-medium text-slate-300 mb-2\">\n              {searchQuery ? \"No templates found\" : \"No templates yet\"}\n            </h3>\n            <p className=\"text-slate-400 mb-6\">\n              {searchQuery\n                ? \"Try adjusting your search or filter criteria\"\n                : \"Create your first email template to get started with donor outreach\"}\n            </p>\n            <button onClick={onCreateTemplate} className=\"button-primary\">\n              Create Your First Template\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\n// Campaign Outreach Scheduler\ninterface OutreachCampaign {\n  id: string;\n  name: string;\n  template: string;\n  recipientCount: number;\n  scheduledDate: Date;\n  status: \"draft\" | \"scheduled\" | \"sending\" | \"completed\";\n  sentCount?: number;\n  openRate?: number;\n  clickRate?: number;\n}\n\ninterface OutreachSchedulerProps {\n  campaigns: OutreachCampaign[];\n  onScheduleCampaign: () => void;\n  onEditCampaign: (campaign: OutreachCampaign) => void;\n  onCancelCampaign: (id: string) => void;\n  className?: string;\n}\n\nexport const OutreachScheduler: React.FC<OutreachSchedulerProps> = ({\n  campaigns,\n  onScheduleCampaign,\n  onEditCampaign,\n  onCancelCampaign,\n  className = \"\",\n}) => {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"draft\":\n        return \"bg-slate-500/20 text-slate-300\";\n      case \"scheduled\":\n        return \"bg-blue-500/20 text-blue-300\";\n      case \"sending\":\n        return \"bg-yellow-500/20 text-yellow-300\";\n      case \"completed\":\n        return \"bg-green-500/20 text-green-300\";\n      default:\n        return \"bg-slate-500/20 text-slate-300\";\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"draft\":\n        return <Edit className=\"w-4 h-4\" />;\n      case \"scheduled\":\n        return <Clock className=\"w-4 h-4\" />;\n      case \"sending\":\n        return <Send className=\"w-4 h-4\" />;\n      case \"completed\":\n        return <CheckCircle className=\"w-4 h-4\" />;\n      default:\n        return <AlertCircle className=\"w-4 h-4\" />;\n    }\n  };\n\n  return (\n    <div className={clsx(\"card-base\", className)}>\n      <div className=\"p-6 border-b border-slate-700/50\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-white\">\n              Email Campaigns\n            </h3>\n            <p className=\"text-sm text-slate-400\">\n              {campaigns.length} campaigns\n            </p>\n          </div>\n          <button\n            onClick={onScheduleCampaign}\n            className=\"button-primary flex items-center space-x-2\"\n          >\n            <Calendar className=\"w-4 h-4\" />\n            <span>Schedule Campaign</span>\n          </button>\n        </div>\n      </div>\n\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full\">\n          <thead>\n            <tr className=\"border-b border-slate-700/50\">\n              <th className=\"px-6 py-4 text-left text-sm font-medium text-slate-300\">\n                Campaign\n              </th>\n              <th className=\"px-6 py-4 text-left text-sm font-medium text-slate-300\">\n                Recipients\n              </th>\n              <th className=\"px-6 py-4 text-left text-sm font-medium text-slate-300\">\n                Scheduled\n              </th>\n              <th className=\"px-6 py-4 text-left text-sm font-medium text-slate-300\">\n                Status\n              </th>\n              <th className=\"px-6 py-4 text-left text-sm font-medium text-slate-300\">\n                Performance\n              </th>\n              <th className=\"px-6 py-4 text-left text-sm font-medium text-slate-300\">\n                Actions\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"divide-y divide-slate-700/30\">\n            {campaigns.map((campaign) => (\n              <tr\n                key={campaign.id}\n                className=\"hover:bg-slate-800/30 transition-colors\"\n              >\n                <td className=\"px-6 py-4\">\n                  <div>\n                    <div className=\"font-medium text-white\">\n                      {campaign.name}\n                    </div>\n                    <div className=\"text-sm text-slate-400\">\n                      Template: {campaign.template}\n                    </div>\n                  </div>\n                </td>\n                <td className=\"px-6 py-4 text-slate-300\">\n                  {campaign.recipientCount.toLocaleString()}\n                </td>\n                <td className=\"px-6 py-4 text-slate-300\">\n                  <div className=\"text-sm\">\n                    <div>{campaign.scheduledDate.toLocaleDateString()}</div>\n                    <div className=\"text-slate-400\">\n                      {campaign.scheduledDate.toLocaleTimeString()}\n                    </div>\n                  </div>\n                </td>\n                <td className=\"px-6 py-4\">\n                  <span\n                    className={clsx(\n                      \"inline-flex items-center space-x-2 px-3 py-1 rounded-full text-xs font-medium\",\n                      getStatusColor(campaign.status),\n                    )}\n                  >\n                    {getStatusIcon(campaign.status)}\n                    <span className=\"capitalize\">{campaign.status}</span>\n                  </span>\n                </td>\n                <td className=\"px-6 py-4\">\n                  {campaign.status === \"completed\" && (\n                    <div className=\"text-sm space-y-1\">\n                      <div className=\"text-slate-300\">\n                        Sent: {campaign.sentCount?.toLocaleString()}\n                      </div>\n                      <div className=\"text-slate-400\">\n                        Opens: {campaign.openRate?.toFixed(1)}% • Clicks:{\" \"}\n                        {campaign.clickRate?.toFixed(1)}%\n                      </div>\n                    </div>\n                  )}\n                  {campaign.status === \"sending\" && (\n                    <div className=\"text-sm text-yellow-400\">\n                      Sending in progress...\n                    </div>\n                  )}\n                  {(campaign.status === \"draft\" ||\n                    campaign.status === \"scheduled\") && (\n                    <div className=\"text-sm text-slate-400\">Not sent yet</div>\n                  )}\n                </td>\n                <td className=\"px-6 py-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <button\n                      onClick={() => onEditCampaign(campaign)}\n                      className=\"p-2 text-slate-400 hover:text-blue-400 hover:bg-slate-700/50 rounded-lg transition-colors\"\n                      title=\"Edit campaign\"\n                    >\n                      <Edit className=\"w-4 h-4\" />\n                    </button>\n                    {campaign.status !== \"completed\" && (\n                      <button\n                        onClick={() => onCancelCampaign(campaign.id)}\n                        className=\"p-2 text-slate-400 hover:text-red-400 hover:bg-slate-700/50 rounded-lg transition-colors\"\n                        title=\"Cancel campaign\"\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </button>\n                    )}\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n\n        {campaigns.length === 0 && (\n          <div className=\"p-12 text-center\">\n            <div className=\"w-16 h-16 mx-auto mb-4 bg-slate-800/50 rounded-full flex items-center justify-center\">\n              <Calendar className=\"w-8 h-8 text-slate-400\" />\n            </div>\n            <h3 className=\"text-lg font-medium text-slate-300 mb-2\">\n              No campaigns scheduled\n            </h3>\n            <p className=\"text-slate-400 mb-6\">\n              Schedule your first email campaign to start reaching your donors\n            </p>\n            <button onClick={onScheduleCampaign} className=\"button-primary\">\n              Schedule Your First Campaign\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\n// Donor Communication History\ninterface CommunicationRecord {\n  id: string;\n  type: \"email\" | \"phone\" | \"meeting\" | \"letter\";\n  subject?: string;\n  content: string;\n  timestamp: Date;\n  status: \"sent\" | \"delivered\" | \"opened\" | \"replied\";\n  sender: string;\n}\n\ninterface DonorCommunicationHistoryProps {\n  donorName: string;\n  communications: CommunicationRecord[];\n  onAddCommunication: () => void;\n  className?: string;\n}\n\nexport const DonorCommunicationHistory: React.FC<\n  DonorCommunicationHistoryProps\n> = ({ donorName, communications, onAddCommunication, className = \"\" }) => {\n  const [filter, setFilter] = useState<string>(\"all\");\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case \"email\":\n        return <Mail className=\"w-4 h-4 text-blue-400\" />;\n      case \"phone\":\n        return <span className=\"text-green-400\">📞</span>;\n      case \"meeting\":\n        return <span className=\"text-purple-400\">🤝</span>;\n      case \"letter\":\n        return <span className=\"text-yellow-400\">✉️</span>;\n      default:\n        return <Mail className=\"w-4 h-4 text-slate-400\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"sent\":\n        return \"text-slate-400\";\n      case \"delivered\":\n        return \"text-blue-400\";\n      case \"opened\":\n        return \"text-green-400\";\n      case \"replied\":\n        return \"text-purple-400\";\n      default:\n        return \"text-slate-400\";\n    }\n  };\n\n  const filteredCommunications = communications.filter(\n    (comm) => filter === \"all\" || comm.type === filter,\n  );\n\n  const communicationTypes = [\n    { value: \"all\", label: \"All\", count: communications.length },\n    {\n      value: \"email\",\n      label: \"Email\",\n      count: communications.filter((c) => c.type === \"email\").length,\n    },\n    {\n      value: \"phone\",\n      label: \"Phone\",\n      count: communications.filter((c) => c.type === \"phone\").length,\n    },\n    {\n      value: \"meeting\",\n      label: \"Meeting\",\n      count: communications.filter((c) => c.type === \"meeting\").length,\n    },\n    {\n      value: \"letter\",\n      label: \"Letter\",\n      count: communications.filter((c) => c.type === \"letter\").length,\n    },\n  ];\n\n  return (\n    <div className={clsx(\"card-base\", className)}>\n      <div className=\"p-6 border-b border-slate-700/50\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-white\">\n              Communication History\n            </h3>\n            <p className=\"text-sm text-slate-400\">\n              All interactions with {donorName}\n            </p>\n          </div>\n          <button\n            onClick={onAddCommunication}\n            className=\"button-primary flex items-center space-x-2\"\n          >\n            <Send className=\"w-4 h-4\" />\n            <span>New Communication</span>\n          </button>\n        </div>\n\n        {/* Filter tabs */}\n        <div className=\"flex space-x-1 bg-slate-800/50 rounded-xl p-1\">\n          {communicationTypes.map((type) => (\n            <button\n              key={type.value}\n              onClick={() => setFilter(type.value)}\n              className={clsx(\n                \"px-4 py-2 rounded-lg text-sm font-medium transition-all flex items-center space-x-2\",\n                filter === type.value\n                  ? \"bg-blue-500/20 text-blue-300\"\n                  : \"text-slate-400 hover:text-white hover:bg-slate-700/50\",\n              )}\n            >\n              <span>{type.label}</span>\n              <span className=\"bg-slate-600/50 text-slate-300 px-2 py-0.5 rounded-full text-xs\">\n                {type.count}\n              </span>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"max-h-96 overflow-y-auto custom-scrollbar\">\n        {filteredCommunications.length > 0 ? (\n          <div className=\"p-4 space-y-4\">\n            {filteredCommunications.map((comm, index) => (\n              <div\n                key={comm.id}\n                className=\"p-4 bg-slate-800/30 rounded-xl border border-slate-700/50 hover:bg-slate-700/30 transition-colors\"\n              >\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"flex-shrink-0 p-2 bg-slate-900/50 rounded-lg\">\n                    {getTypeIcon(comm.type)}\n                  </div>\n\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex items-center space-x-3\">\n                        <h4 className=\"font-medium text-white\">\n                          {comm.subject ||\n                            `${comm.type.charAt(0).toUpperCase() + comm.type.slice(1)} communication`}\n                        </h4>\n                        <span\n                          className={clsx(\n                            \"text-sm font-medium\",\n                            getStatusColor(comm.status),\n                          )}\n                        >\n                          {comm.status}\n                        </span>\n                      </div>\n                      <span className=\"text-xs text-slate-500\">\n                        {comm.timestamp.toLocaleDateString()} •{\" \"}\n                        {comm.timestamp.toLocaleTimeString()}\n                      </span>\n                    </div>\n\n                    <p className=\"text-sm text-slate-300 leading-relaxed mb-2 line-clamp-2\">\n                      {comm.content}\n                    </p>\n\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-xs text-slate-400\">\n                        by {comm.sender}\n                      </span>\n                      <button className=\"text-xs text-blue-400 hover:text-blue-300 transition-colors\">\n                        View details →\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"p-12 text-center\">\n            <div className=\"w-16 h-16 mx-auto mb-4 bg-slate-800/50 rounded-full flex items-center justify-center\">\n              <Mail className=\"w-8 h-8 text-slate-400\" />\n            </div>\n            <h3 className=\"text-lg font-medium text-slate-300 mb-2\">\n              {filter === \"all\"\n                ? \"No communications yet\"\n                : `No ${filter} communications`}\n            </h3>\n            <p className=\"text-slate-400 mb-6\">\n              {filter === \"all\"\n                ? \"Start building a relationship with this donor by reaching out\"\n                : `No ${filter} communications found for this donor`}\n            </p>\n            <button onClick={onAddCommunication} className=\"button-primary\">\n              Send First Message\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\n// Quick Message Composer\ninterface QuickMessageComposerProps {\n  recipients: Array<{\n    id: string;\n    name: string;\n    email: string;\n    type: \"donor\" | \"volunteer\" | \"staff\";\n  }>;\n  templates: EmailTemplate[];\n  onSend: (message: {\n    recipients: string[];\n    subject: string;\n    content: string;\n    template?: string;\n  }) => void;\n  className?: string;\n}\n\nexport const QuickMessageComposer: React.FC<QuickMessageComposerProps> = ({\n  recipients,\n  templates,\n  onSend,\n  className = \"\",\n}) => {\n  const [selectedRecipients, setSelectedRecipients] = useState<string[]>([]);\n  const [subject, setSubject] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [selectedTemplate, setSelectedTemplate] = useState<string>(\"\");\n  const [showTemplates, setShowTemplates] = useState(false);\n\n  const handleTemplateSelect = (template: EmailTemplate) => {\n    setSubject(template.subject);\n    setContent(template.content);\n    setSelectedTemplate(template.id);\n    setShowTemplates(false);\n  };\n\n  const handleSend = () => {\n    if (selectedRecipients.length === 0 || !subject || !content) return;\n\n    onSend({\n      recipients: selectedRecipients,\n      subject,\n      content,\n      template: selectedTemplate || undefined,\n    });\n\n    // Reset form\n    setSelectedRecipients([]);\n    setSubject(\"\");\n    setContent(\"\");\n    setSelectedTemplate(\"\");\n  };\n\n  const isValid =\n    selectedRecipients.length > 0 && subject.trim() && content.trim();\n\n  return (\n    <div className={clsx(\"card-base p-6\", className)}>\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h3 className=\"text-lg font-semibold text-white\">Quick Message</h3>\n          <p className=\"text-sm text-slate-400\">\n            Send a message to your contacts\n          </p>\n        </div>\n\n        <button\n          onClick={() => setShowTemplates(!showTemplates)}\n          className=\"button-ghost flex items-center space-x-2\"\n        >\n          <Edit className=\"w-4 h-4\" />\n          <span>Use Template</span>\n        </button>\n      </div>\n\n      {showTemplates && (\n        <div className=\"mb-6 p-4 bg-slate-800/30 rounded-xl border border-slate-700/50 animate-slide-up\">\n          <h4 className=\"text-sm font-medium text-slate-300 mb-3\">\n            Select Template\n          </h4>\n          <div className=\"space-y-2 max-h-48 overflow-y-auto custom-scrollbar\">\n            {templates.map((template) => (\n              <button\n                key={template.id}\n                onClick={() => handleTemplateSelect(template)}\n                className=\"w-full text-left p-3 bg-slate-700/30 hover:bg-slate-600/30 rounded-lg transition-colors\"\n              >\n                <div className=\"font-medium text-white text-sm\">\n                  {template.name}\n                </div>\n                <div className=\"text-xs text-slate-400 mt-1 line-clamp-1\">\n                  {template.subject}\n                </div>\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n\n      <div className=\"space-y-4\">\n        {/* Recipients */}\n        <div>\n          <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n            Recipients\n          </label>\n          <div className=\"max-h-32 overflow-y-auto custom-scrollbar space-y-2 p-3 bg-slate-800/30 rounded-xl border border-slate-700/50\">\n            {recipients.map((recipient) => (\n              <label key={recipient.id} className=\"flex items-center space-x-3\">\n                <input\n                  type=\"checkbox\"\n                  checked={selectedRecipients.includes(recipient.id)}\n                  onChange={(e) => {\n                    if (e.target.checked) {\n                      setSelectedRecipients((prev) => [...prev, recipient.id]);\n                    } else {\n                      setSelectedRecipients((prev) =>\n                        prev.filter((id) => id !== recipient.id),\n                      );\n                    }\n                  }}\n                  className=\"h-4 w-4 text-blue-500 focus:ring-blue-500 border-slate-600 rounded\"\n                />\n                <div className=\"flex-1\">\n                  <span className=\"text-white text-sm\">{recipient.name}</span>\n                  <span className=\"text-slate-400 text-sm ml-2\">\n                    ({recipient.email})\n                  </span>\n                </div>\n                <span className=\"text-xs px-2 py-1 bg-slate-600/50 text-slate-300 rounded-full\">\n                  {recipient.type}\n                </span>\n              </label>\n            ))}\n          </div>\n          {selectedRecipients.length > 0 && (\n            <p className=\"text-sm text-slate-400 mt-2\">\n              {selectedRecipients.length} recipient\n              {selectedRecipients.length !== 1 ? \"s\" : \"\"} selected\n            </p>\n          )}\n        </div>\n\n        {/* Subject */}\n        <div>\n          <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n            Subject\n          </label>\n          <input\n            type=\"text\"\n            value={subject}\n            onChange={(e) => setSubject(e.target.value)}\n            placeholder=\"Enter email subject\"\n            className=\"w-full input-base\"\n          />\n        </div>\n\n        {/* Message */}\n        <div>\n          <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n            Message\n          </label>\n          <textarea\n            value={content}\n            onChange={(e) => setContent(e.target.value)}\n            placeholder=\"Type your message here...\"\n            rows={6}\n            className=\"w-full input-base resize-none\"\n          />\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex items-center justify-between pt-4 border-t border-slate-700/50\">\n          <div className=\"text-sm text-slate-400\">\n            {isValid ? \"Ready to send\" : \"Please fill in all required fields\"}\n          </div>\n          <button\n            onClick={handleSend}\n            disabled={!isValid}\n            className=\"button-primary disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2\"\n          >\n            <Send className=\"w-4 h-4\" />\n            <span>Send Message</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/components/DashboardOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/components/DonorComponents.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'query' is defined but never used.","line":428,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":428,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"query"},"fix":{"range":[13734,13747],"text":""},"desc":"Remove unused variable 'query'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'filters' is defined but never used.","line":429,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":429,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"filters"},"fix":{"range":[13777,13789],"text":""},"desc":"Remove unused variable 'filters'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/components/DonorComponents.tsx - Specialized donor management components\nimport clsx from \"clsx\";\nimport { User, Mail, Phone, Edit, Gift, Users } from \"lucide-react\";\nimport React, { useState } from \"react\";\n\n// Types\ninterface Donor {\n  id: string;\n  name: string;\n  email: string;\n  phone?: string;\n  address?: string;\n  totalGiven: number;\n  donationCount: number;\n  averageGift: number;\n  firstDonation: Date;\n  lastDonation: Date;\n  preferredContact: \"email\" | \"phone\" | \"mail\";\n  donorType: \"individual\" | \"corporation\" | \"foundation\";\n  segment: \"major\" | \"mid-level\" | \"recurring\" | \"first-time\" | \"lapsed\";\n  tags: string[];\n  notes?: string;\n  avatar?: string;\n}\n\ninterface DonorCardProps {\n  donor: Donor;\n  onClick?: () => void;\n  onEdit?: () => void;\n  compact?: boolean;\n}\n\n// Donor Profile Card Component\nexport const DonorProfileCard: React.FC<DonorCardProps> = ({\n  donor,\n  onClick,\n  onEdit,\n  compact = false,\n}) => {\n  const getSegmentColor = (segment: string) => {\n    const colors = {\n      major: \"bg-purple-500/20 text-purple-300 border-purple-500/30\",\n      \"mid-level\": \"bg-blue-500/20 text-blue-300 border-blue-500/30\",\n      recurring: \"bg-green-500/20 text-green-300 border-green-500/30\",\n      \"first-time\": \"bg-yellow-500/20 text-yellow-300 border-yellow-500/30\",\n      lapsed: \"bg-red-500/20 text-red-300 border-red-500/30\",\n    };\n    return colors[segment as keyof typeof colors] || colors.major;\n  };\n\n  const getDonorTypeIcon = (type: string) => {\n    switch (type) {\n      case \"corporation\":\n        return \"🏢\";\n      case \"foundation\":\n        return \"🏛️\";\n      default:\n        return \"👤\";\n    }\n  };\n\n  return (\n    <div className=\"card-base card-hover p-6 cursor-pointer\" onClick={onClick}>\n      <div className=\"flex items-start justify-between mb-4\">\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center\">\n            {donor.avatar ? (\n              <img\n                src={donor.avatar}\n                alt={donor.name}\n                className=\"w-full h-full rounded-full object-cover\"\n              />\n            ) : (\n              <span className=\"text-white font-bold text-lg\">\n                {donor.name\n                  .split(\" \")\n                  .map((n) => n[0])\n                  .join(\"\")}\n              </span>\n            )}\n          </div>\n\n          <div>\n            <div className=\"flex items-center space-x-2\">\n              <h3 className=\"text-lg font-semibold text-white\">{donor.name}</h3>\n              <span className=\"text-sm\">\n                {getDonorTypeIcon(donor.donorType)}\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-3 text-sm text-slate-400\">\n              <span className=\"flex items-center space-x-1\">\n                <Mail className=\"w-3 h-3\" />\n                <span>{donor.email}</span>\n              </span>\n              {donor.phone && (\n                <span className=\"flex items-center space-x-1\">\n                  <Phone className=\"w-3 h-3\" />\n                  <span>{donor.phone}</span>\n                </span>\n              )}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          <span\n            className={clsx(\n              \"px-2.5 py-1 rounded-full text-xs font-medium border\",\n              getSegmentColor(donor.segment),\n            )}\n          >\n            {donor.segment.charAt(0).toUpperCase() + donor.segment.slice(1)}\n          </span>\n          {onEdit && (\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                onEdit();\n              }}\n              className=\"p-2 text-slate-400 hover:text-white hover:bg-slate-700/50 rounded-lg transition-colors\"\n            >\n              <Edit className=\"w-4 h-4\" />\n            </button>\n          )}\n        </div>\n      </div>\n\n      {!compact && (\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4 mb-4\">\n          <div className=\"text-center\">\n            <div className=\"text-xl font-bold text-green-400\">\n              ${donor.totalGiven.toLocaleString()}\n            </div>\n            <div className=\"text-xs text-slate-400\">Total Given</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-xl font-bold text-blue-400\">\n              {donor.donationCount}\n            </div>\n            <div className=\"text-xs text-slate-400\">Donations</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-xl font-bold text-purple-400\">\n              ${donor.averageGift.toLocaleString()}\n            </div>\n            <div className=\"text-xs text-slate-400\">Avg Gift</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-xl font-bold text-yellow-400\">\n              {Math.floor(\n                (new Date().getTime() - donor.lastDonation.getTime()) /\n                  (1000 * 60 * 60 * 24),\n              )}\n              d\n            </div>\n            <div className=\"text-xs text-slate-400\">Last Gift</div>\n          </div>\n        </div>\n      )}\n\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex flex-wrap gap-1\">\n          {donor.tags.slice(0, 3).map((tag, index) => (\n            <span\n              key={index}\n              className=\"px-2 py-1 bg-slate-700/50 text-slate-300 text-xs rounded-full\"\n            >\n              #{tag}\n            </span>\n          ))}\n          {donor.tags.length > 3 && (\n            <span className=\"px-2 py-1 bg-slate-700/50 text-slate-300 text-xs rounded-full\">\n              +{donor.tags.length - 3}\n            </span>\n          )}\n        </div>\n\n        <div className=\"text-xs text-slate-400\">\n          Donor since {donor.firstDonation.getFullYear()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Donation History Component\ninterface Donation {\n  id: string;\n  amount: number;\n  date: Date;\n  campaign: string;\n  method: \"credit_card\" | \"bank_transfer\" | \"check\" | \"paypal\";\n  recurring: boolean;\n  status: \"completed\" | \"pending\" | \"failed\";\n}\n\ninterface DonationHistoryProps {\n  donations: Donation[];\n  className?: string;\n  showFilters?: boolean;\n}\n\nexport const DonationHistory: React.FC<DonationHistoryProps> = ({\n  donations,\n  className = \"\",\n  showFilters = true,\n}) => {\n  const [filter, setFilter] = useState<\"all\" | \"recurring\" | \"one-time\">(\"all\");\n  const [sortBy, setSortBy] = useState<\"date\" | \"amount\">(\"date\");\n\n  const getMethodIcon = (method: string) => {\n    switch (method) {\n      case \"credit_card\":\n        return \"💳\";\n      case \"bank_transfer\":\n        return \"🏦\";\n      case \"check\":\n        return \"📝\";\n      case \"paypal\":\n        return \"💰\";\n      default:\n        return \"💳\";\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return \"text-green-400\";\n      case \"pending\":\n        return \"text-yellow-400\";\n      case \"failed\":\n        return \"text-red-400\";\n      default:\n        return \"text-slate-400\";\n    }\n  };\n\n  const filteredDonations = donations\n    .filter((donation) => {\n      if (filter === \"recurring\" && !donation.recurring) return false;\n      if (filter === \"one-time\" && donation.recurring) return false;\n      return true;\n    })\n    .sort((a, b) => {\n      if (sortBy === \"date\") {\n        return b.date.getTime() - a.date.getTime();\n      } else {\n        return b.amount - a.amount;\n      }\n    });\n\n  return (\n    <div className={clsx(\"card-base\", className)}>\n      <div className=\"p-6 border-b border-slate-700/50\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-white\">\n              Donation History\n            </h3>\n            <p className=\"text-sm text-slate-400\">\n              {donations.length} total donations\n            </p>\n          </div>\n\n          {showFilters && (\n            <div className=\"flex items-center space-x-3\">\n              <select\n                value={filter}\n                onChange={(e) => setFilter(e.target.value as any)}\n                className=\"input-base text-sm py-2 px-3\"\n              >\n                <option value=\"all\">All Donations</option>\n                <option value=\"recurring\">Recurring Only</option>\n                <option value=\"one-time\">One-time Only</option>\n              </select>\n\n              <select\n                value={sortBy}\n                onChange={(e) => setSortBy(e.target.value as any)}\n                className=\"input-base text-sm py-2 px-3\"\n              >\n                <option value=\"date\">Sort by Date</option>\n                <option value=\"amount\">Sort by Amount</option>\n              </select>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"max-h-96 overflow-y-auto custom-scrollbar\">\n        {filteredDonations.map((donation) => (\n          <div\n            key={donation.id}\n            className=\"p-4 border-b border-slate-700/30 hover:bg-slate-800/30 transition-colors\"\n          >\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-10 h-10 bg-slate-800/50 rounded-lg flex items-center justify-center\">\n                  <span className=\"text-lg\">\n                    {getMethodIcon(donation.method)}\n                  </span>\n                </div>\n\n                <div>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"font-semibold text-white\">\n                      ${donation.amount.toLocaleString()}\n                    </span>\n                    {donation.recurring && (\n                      <span className=\"px-2 py-0.5 bg-blue-500/20 text-blue-300 text-xs rounded-full\">\n                        Recurring\n                      </span>\n                    )}\n                  </div>\n                  <div className=\"text-sm text-slate-400\">\n                    {donation.campaign} • {donation.date.toLocaleDateString()}\n                  </div>\n                </div>\n              </div>\n\n              <div\n                className={clsx(\n                  \"text-sm font-medium\",\n                  getStatusColor(donation.status),\n                )}\n              >\n                {donation.status.charAt(0).toUpperCase() +\n                  donation.status.slice(1)}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {filteredDonations.length === 0 && (\n        <div className=\"p-12 text-center\">\n          <div className=\"w-16 h-16 mx-auto mb-4 bg-slate-800/50 rounded-full flex items-center justify-center\">\n            <Gift className=\"w-8 h-8 text-slate-400\" />\n          </div>\n          <h3 className=\"text-lg font-medium text-slate-300 mb-2\">\n            No donations found\n          </h3>\n          <p className=\"text-slate-400\">\n            {filter !== \"all\"\n              ? `No ${filter === \"recurring\" ? \"recurring\" : \"one-time\"} donations to display.`\n              : \"This donor hasn't made any donations yet.\"}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Donor Segmentation Widget\ninterface DonorSegmentWidgetProps {\n  segments: {\n    name: string;\n    count: number;\n    percentage: number;\n    color: string;\n    icon: string;\n  }[];\n  totalDonors: number;\n  className?: string;\n}\n\nexport const DonorSegmentWidget: React.FC<DonorSegmentWidgetProps> = ({\n  segments,\n  totalDonors,\n  className = \"\",\n}) => {\n  return (\n    <div className={clsx(\"card-base p-6\", className)}>\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h3 className=\"text-lg font-semibold text-white\">Donor Segments</h3>\n          <p className=\"text-sm text-slate-400\">\n            {totalDonors.toLocaleString()} total donors\n          </p>\n        </div>\n        <div className=\"p-2 bg-purple-500/20 rounded-xl\">\n          <Users className=\"w-5 h-5 text-purple-400\" />\n        </div>\n      </div>\n\n      <div className=\"space-y-4\">\n        {segments.map((segment, index) => (\n          <div key={index} className=\"group cursor-pointer\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <div className=\"flex items-center space-x-3\">\n                <span className=\"text-lg\">{segment.icon}</span>\n                <div>\n                  <span className=\"text-white font-medium\">{segment.name}</span>\n                  <div className=\"text-sm text-slate-400\">\n                    {segment.count.toLocaleString()} donors\n                  </div>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-white font-semibold\">\n                  {segment.percentage.toFixed(1)}%\n                </div>\n              </div>\n            </div>\n\n            <div className=\"w-full bg-slate-700/50 rounded-full h-2 mb-1\">\n              <div\n                className={`h-2 rounded-full transition-all duration-500 group-hover:opacity-80 ${segment.color}`}\n                style={{ width: `${segment.percentage}%` }}\n              />\n            </div>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"mt-6 pt-4 border-t border-slate-700/50\">\n        <button className=\"w-full text-center text-blue-400 hover:text-blue-300 text-sm font-medium transition-colors\">\n          View detailed segmentation →\n        </button>\n      </div>\n    </div>\n  );\n};\n\n// Donor Search and Filter Bar\ninterface DonorSearchBarProps {\n  onSearch: (query: string) => void;\n  onFilterChange: (filters: any) => void;\n  totalResults: number;\n  className?: string;\n}\n\nexport const DonorSearchBar: React.FC<DonorSearchBarProps> = ({\n  onSearch,\n  onFilterChange,\n  totalResults,\n  className = \"\",\n}) => {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showFilters, setShowFilters] = useState(false);\n  const [filters, setFilters] = useState({\n    segment: \"all\",\n    donorType: \"all\",\n    lastGift: \"all\",\n    giftRange: \"all\",\n  });\n\n  const handleSearchChange = (query: string) => {\n    setSearchQuery(query);\n    onSearch(query);\n  };\n\n  const handleFilterChange = (key: string, value: string) => {\n    const newFilters = { ...filters, [key]: value };\n    setFilters(newFilters);\n    onFilterChange(newFilters);\n  };\n\n  return (\n    <div className={clsx(\"card-base p-4\", className)}>\n      <div className=\"flex items-center space-x-4 mb-4\">\n        <div className=\"flex-1 relative\">\n          <User className=\"absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-slate-400\" />\n          <input\n            type=\"text\"\n            value={searchQuery}\n            onChange={(e) => handleSearchChange(e.target.value)}\n            placeholder=\"Search donors by name, email, or phone...\"\n            className=\"w-full pl-10 pr-4 py-3 input-base\"\n          />\n        </div>\n\n        <button\n          onClick={() => setShowFilters(!showFilters)}\n          className={clsx(\n            \"px-4 py-3 rounded-xl font-medium transition-all duration-200 flex items-center space-x-2\",\n            showFilters\n              ? \"bg-blue-500/20 text-blue-300 border border-blue-500/30\"\n              : \"bg-slate-800/50 text-slate-300 border border-slate-700/50 hover:bg-slate-700/50\",\n          )}\n        >\n          <span>Filters</span>\n          <div\n            className={clsx(\n              \"w-4 h-4 transition-transform\",\n              showFilters && \"rotate-180\",\n            )}\n          >\n            ⌄\n          </div>\n        </button>\n\n        <div className=\"text-sm text-slate-400\">\n          {totalResults.toLocaleString()} donors\n        </div>\n      </div>\n\n      {showFilters && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 pt-4 border-t border-slate-700/50 animate-slide-up\">\n          <div>\n            <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n              Segment\n            </label>\n            <select\n              value={filters.segment}\n              onChange={(e) => handleFilterChange(\"segment\", e.target.value)}\n              className=\"input-base text-sm\"\n            >\n              <option value=\"all\">All Segments</option>\n              <option value=\"major\">Major Donors</option>\n              <option value=\"mid-level\">Mid-level</option>\n              <option value=\"recurring\">Recurring</option>\n              <option value=\"first-time\">First-time</option>\n              <option value=\"lapsed\">Lapsed</option>\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n              Donor Type\n            </label>\n            <select\n              value={filters.donorType}\n              onChange={(e) => handleFilterChange(\"donorType\", e.target.value)}\n              className=\"input-base text-sm\"\n            >\n              <option value=\"all\">All Types</option>\n              <option value=\"individual\">Individual</option>\n              <option value=\"corporation\">Corporation</option>\n              <option value=\"foundation\">Foundation</option>\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n              Last Gift\n            </label>\n            <select\n              value={filters.lastGift}\n              onChange={(e) => handleFilterChange(\"lastGift\", e.target.value)}\n              className=\"input-base text-sm\"\n            >\n              <option value=\"all\">Any Time</option>\n              <option value=\"30\">Last 30 days</option>\n              <option value=\"90\">Last 3 months</option>\n              <option value=\"365\">Last year</option>\n              <option value=\"old\">Over 1 year ago</option>\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-slate-300 mb-2\">\n              Gift Range\n            </label>\n            <select\n              value={filters.giftRange}\n              onChange={(e) => handleFilterChange(\"giftRange\", e.target.value)}\n              className=\"input-base text-sm\"\n            >\n              <option value=\"all\">Any Amount</option>\n              <option value=\"under-100\">Under $100</option>\n              <option value=\"100-500\">$100 - $500</option>\n              <option value=\"500-1000\">$500 - $1,000</option>\n              <option value=\"1000-5000\">$1,000 - $5,000</option>\n              <option value=\"over-5000\">Over $5,000</option>\n            </select>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/components/DonorInsightsPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/components/FormComponents.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'value' is defined but never used.","line":22,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"value"},"fix":{"range":[494,507],"text":""},"desc":"Remove unused variable 'value'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'value' is defined but never used.","line":162,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":162,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"value"},"fix":{"range":[4275,4288],"text":""},"desc":"Remove unused variable 'value'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'files' is defined but never used.","line":321,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":321,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"files"},"fix":{"range":[9445,9458],"text":""},"desc":"Remove unused variable 'files'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'date' is defined but never used.","line":472,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":472,"endColumn":35,"suggestions":[{"messageId":"removeVar","data":{"varName":"date"},"fix":{"range":[13883,13895],"text":""},"desc":"Remove unused variable 'date'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'date' is defined but never used.","line":473,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":473,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"date"},"fix":{"range":[13926,13938],"text":""},"desc":"Remove unused variable 'date'."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":582,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":582,"endColumn":31}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/components/FormComponents.tsx - Advanced form components with validation\nimport clsx from \"clsx\";\nimport {\n  Check,\n  ChevronDown,\n  X,\n  Upload,\n  Eye,\n  EyeOff,\n  Calendar,\n  Clock,\n  AlertCircle,\n  CheckCircle,\n} from \"lucide-react\";\nimport React, { useState, useRef, useEffect } from \"react\";\n\n// Enhanced Input Component with validation\ninterface EnhancedInputProps {\n  label: string;\n  type?: \"text\" | \"email\" | \"password\" | \"number\" | \"tel\" | \"url\";\n  value: string;\n  onChange: (value: string) => void;\n  placeholder?: string;\n  error?: string;\n  success?: boolean;\n  required?: boolean;\n  disabled?: boolean;\n  icon?: React.ReactNode;\n  helperText?: string;\n  maxLength?: number;\n  className?: string;\n}\n\nexport const EnhancedInput: React.FC<EnhancedInputProps> = ({\n  label,\n  type = \"text\",\n  value,\n  onChange,\n  placeholder,\n  error,\n  success,\n  required,\n  disabled,\n  icon,\n  helperText,\n  maxLength,\n  className = \"\",\n}) => {\n  const [showPassword, setShowPassword] = useState(false);\n  const [focused, setFocused] = useState(false);\n\n  const inputType = type === \"password\" && showPassword ? \"text\" : type;\n\n  return (\n    <div className={clsx(\"space-y-2\", className)}>\n      <label className=\"block text-sm font-medium text-slate-300\">\n        {label}\n        {required && <span className=\"text-red-400 ml-1\">*</span>}\n      </label>\n\n      <div className=\"relative\">\n        {icon && (\n          <div className=\"absolute left-3 top-1/2 -translate-y-1/2 text-slate-400\">\n            {icon}\n          </div>\n        )}\n\n        <input\n          type={inputType}\n          value={value}\n          onChange={(e) => onChange(e.target.value)}\n          placeholder={placeholder}\n          disabled={disabled}\n          maxLength={maxLength}\n          onFocus={() => setFocused(true)}\n          onBlur={() => setFocused(false)}\n          className={clsx(\n            \"input-base transition-all duration-200\",\n            icon && \"pl-10\",\n            (type === \"password\" || success || error) && \"pr-10\",\n            error && \"border-red-500/50 bg-red-500/5 focus:ring-red-500/50\",\n            success &&\n              !error &&\n              \"border-green-500/50 bg-green-500/5 focus:ring-green-500/50\",\n            disabled && \"opacity-50 cursor-not-allowed\",\n            focused &&\n              !error &&\n              !success &&\n              \"border-blue-500/50 ring-2 ring-blue-500/20\",\n          )}\n        />\n\n        {type === \"password\" && (\n          <button\n            type=\"button\"\n            onClick={() => setShowPassword(!showPassword)}\n            className=\"absolute right-3 top-1/2 -translate-y-1/2 text-slate-400 hover:text-white transition-colors\"\n          >\n            {showPassword ? (\n              <EyeOff className=\"w-4 h-4\" />\n            ) : (\n              <Eye className=\"w-4 h-4\" />\n            )}\n          </button>\n        )}\n\n        {success && !error && (\n          <div className=\"absolute right-3 top-1/2 -translate-y-1/2 text-green-400\">\n            <CheckCircle className=\"w-4 h-4\" />\n          </div>\n        )}\n\n        {error && (\n          <div className=\"absolute right-3 top-1/2 -translate-y-1/2 text-red-400\">\n            <AlertCircle className=\"w-4 h-4\" />\n          </div>\n        )}\n      </div>\n\n      <div className=\"flex justify-between items-start\">\n        <div>\n          {error && (\n            <p className=\"text-sm text-red-400 flex items-center gap-1\">\n              <AlertCircle className=\"w-3 h-3\" />\n              {error}\n            </p>\n          )}\n          {helperText && !error && (\n            <p className=\"text-sm text-slate-400\">{helperText}</p>\n          )}\n        </div>\n        {maxLength && (\n          <p\n            className={clsx(\n              \"text-xs\",\n              value.length > maxLength * 0.9\n                ? \"text-yellow-400\"\n                : \"text-slate-500\",\n            )}\n          >\n            {value.length}/{maxLength}\n          </p>\n        )}\n      </div>\n    </div>\n  );\n};\n\n// Advanced Select Component\ninterface SelectOption {\n  value: string;\n  label: string;\n  icon?: React.ReactNode;\n  description?: string;\n  disabled?: boolean;\n}\n\ninterface AdvancedSelectProps {\n  label: string;\n  options: SelectOption[];\n  value: string;\n  onChange: (value: string) => void;\n  placeholder?: string;\n  error?: string;\n  required?: boolean;\n  disabled?: boolean;\n  searchable?: boolean;\n  multiple?: boolean;\n  className?: string;\n}\n\nexport const AdvancedSelect: React.FC<AdvancedSelectProps> = ({\n  label,\n  options,\n  value,\n  onChange,\n  placeholder = \"Select an option\",\n  error,\n  required,\n  disabled,\n  searchable = false,\n  className = \"\",\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  const filteredOptions = searchable\n    ? options.filter((option) =>\n        option.label.toLowerCase().includes(searchQuery.toLowerCase()),\n      )\n    : options;\n\n  const selectedOption = options.find((option) => option.value === value);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        dropdownRef.current &&\n        !dropdownRef.current.contains(event.target as Node)\n      ) {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, []);\n\n  return (\n    <div className={clsx(\"relative space-y-2\", className)} ref={dropdownRef}>\n      <label className=\"block text-sm font-medium text-slate-300\">\n        {label}\n        {required && <span className=\"text-red-400 ml-1\">*</span>}\n      </label>\n\n      <button\n        type=\"button\"\n        onClick={() => !disabled && setIsOpen(!isOpen)}\n        disabled={disabled}\n        className={clsx(\n          \"w-full flex items-center justify-between input-base text-left\",\n          error && \"border-red-500/50 bg-red-500/5\",\n          disabled && \"opacity-50 cursor-not-allowed\",\n          !disabled && \"hover:border-slate-600/50\",\n        )}\n      >\n        <div className=\"flex items-center space-x-2\">\n          {selectedOption?.icon}\n          <span\n            className={clsx(selectedOption ? \"text-white\" : \"text-slate-400\")}\n          >\n            {selectedOption?.label || placeholder}\n          </span>\n        </div>\n        <ChevronDown\n          className={clsx(\n            \"w-4 h-4 text-slate-400 transition-transform duration-200\",\n            isOpen && \"rotate-180\",\n          )}\n        />\n      </button>\n\n      {isOpen && (\n        <div className=\"absolute top-full left-0 right-0 z-50 mt-1 bg-slate-800/95 backdrop-blur-sm border border-slate-700/50 rounded-xl shadow-lg animate-fade-in\">\n          {searchable && (\n            <div className=\"p-3 border-b border-slate-700/50\">\n              <input\n                type=\"text\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                placeholder=\"Search options...\"\n                className=\"w-full bg-slate-700/50 border border-slate-600/50 rounded-lg px-3 py-2 text-sm text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500/50\"\n                autoFocus\n              />\n            </div>\n          )}\n\n          <div className=\"max-h-60 overflow-y-auto custom-scrollbar\">\n            {filteredOptions.length > 0 ? (\n              filteredOptions.map((option) => (\n                <button\n                  key={option.value}\n                  onClick={() => {\n                    if (!option.disabled) {\n                      onChange(option.value);\n                      setIsOpen(false);\n                      setSearchQuery(\"\");\n                    }\n                  }}\n                  disabled={option.disabled}\n                  className={clsx(\n                    \"w-full flex items-center space-x-3 px-4 py-3 text-left hover:bg-slate-700/50 transition-colors\",\n                    option.value === value && \"bg-blue-500/20 text-blue-300\",\n                    option.disabled && \"opacity-50 cursor-not-allowed\",\n                  )}\n                >\n                  <div className=\"flex items-center space-x-3 flex-1\">\n                    {option.icon}\n                    <div>\n                      <div className=\"text-white font-medium\">\n                        {option.label}\n                      </div>\n                      {option.description && (\n                        <div className=\"text-xs text-slate-400\">\n                          {option.description}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                  {option.value === value && (\n                    <Check className=\"w-4 h-4 text-blue-400\" />\n                  )}\n                </button>\n              ))\n            ) : (\n              <div className=\"px-4 py-8 text-center text-slate-400\">\n                No options found\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {error && (\n        <p className=\"text-sm text-red-400 flex items-center gap-1\">\n          <AlertCircle className=\"w-3 h-3\" />\n          {error}\n        </p>\n      )}\n    </div>\n  );\n};\n\n// File Upload Component\ninterface FileUploadProps {\n  label: string;\n  accept?: string;\n  multiple?: boolean;\n  maxSize?: number; // in MB\n  onFilesChange: (files: File[]) => void;\n  error?: string;\n  required?: boolean;\n  className?: string;\n  preview?: boolean;\n}\n\nexport const FileUpload: React.FC<FileUploadProps> = ({\n  label,\n  accept,\n  multiple = false,\n  maxSize = 10,\n  onFilesChange,\n  error,\n  required,\n  className = \"\",\n  preview = true,\n}) => {\n  const [files, setFiles] = useState<File[]>([]);\n  const [dragOver, setDragOver] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleFileChange = (selectedFiles: FileList | null) => {\n    if (!selectedFiles) return;\n\n    const fileArray = Array.from(selectedFiles);\n    const validFiles = fileArray.filter((file) => {\n      if (file.size > maxSize * 1024 * 1024) {\n        alert(`File ${file.name} is too large. Maximum size is ${maxSize}MB.`);\n        return false;\n      }\n      return true;\n    });\n\n    setFiles(validFiles);\n    onFilesChange(validFiles);\n  };\n\n  const removeFile = (index: number) => {\n    const newFiles = files.filter((_, i) => i !== index);\n    setFiles(newFiles);\n    onFilesChange(newFiles);\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setDragOver(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    setDragOver(false);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setDragOver(false);\n    handleFileChange(e.dataTransfer.files);\n  };\n\n  return (\n    <div className={clsx(\"space-y-2\", className)}>\n      <label className=\"block text-sm font-medium text-slate-300\">\n        {label}\n        {required && <span className=\"text-red-400 ml-1\">*</span>}\n      </label>\n\n      <div\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onDrop={handleDrop}\n        className={clsx(\n          \"border-2 border-dashed rounded-xl p-6 transition-all duration-200 cursor-pointer\",\n          dragOver\n            ? \"border-blue-500/50 bg-blue-500/10\"\n            : \"border-slate-600/50 hover:border-slate-500/50\",\n          error && \"border-red-500/50 bg-red-500/5\",\n        )}\n        onClick={() => fileInputRef.current?.click()}\n      >\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          accept={accept}\n          multiple={multiple}\n          onChange={(e) => handleFileChange(e.target.files)}\n          className=\"hidden\"\n        />\n\n        <div className=\"text-center\">\n          <Upload className=\"w-8 h-8 text-slate-400 mx-auto mb-4\" />\n          <p className=\"text-white font-medium mb-2\">\n            Drop files here or click to browse\n          </p>\n          <p className=\"text-sm text-slate-400\">\n            {accept && `Accepted formats: ${accept}`}\n            {maxSize && ` • Max size: ${maxSize}MB`}\n            {multiple && \" • Multiple files allowed\"}\n          </p>\n        </div>\n      </div>\n\n      {preview && files.length > 0 && (\n        <div className=\"space-y-2\">\n          {files.map((file, index) => (\n            <div\n              key={index}\n              className=\"flex items-center justify-between p-3 bg-slate-800/50 rounded-lg\"\n            >\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-blue-500/20 rounded-lg flex items-center justify-center\">\n                  <span className=\"text-xs font-medium text-blue-400\">\n                    {file.name.split(\".\").pop()?.toUpperCase()}\n                  </span>\n                </div>\n                <div>\n                  <p className=\"text-white text-sm font-medium\">{file.name}</p>\n                  <p className=\"text-xs text-slate-400\">\n                    {(file.size / 1024 / 1024).toFixed(2)} MB\n                  </p>\n                </div>\n              </div>\n              <button\n                onClick={(e) => {\n                  e.stopPropagation();\n                  removeFile(index);\n                }}\n                className=\"p-1 text-slate-400 hover:text-red-400 transition-colors\"\n              >\n                <X className=\"w-4 h-4\" />\n              </button>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {error && (\n        <p className=\"text-sm text-red-400 flex items-center gap-1\">\n          <AlertCircle className=\"w-3 h-3\" />\n          {error}\n        </p>\n      )}\n    </div>\n  );\n};\n\n// Date Range Picker\ninterface DateRangePickerProps {\n  label: string;\n  startDate: string;\n  endDate: string;\n  onStartDateChange: (date: string) => void;\n  onEndDateChange: (date: string) => void;\n  error?: string;\n  required?: boolean;\n  className?: string;\n}\n\nexport const DateRangePicker: React.FC<DateRangePickerProps> = ({\n  label,\n  startDate,\n  endDate,\n  onStartDateChange,\n  onEndDateChange,\n  error,\n  required,\n  className = \"\",\n}) => {\n  const quickRanges = [\n    { label: \"Last 7 days\", days: 7 },\n    { label: \"Last 30 days\", days: 30 },\n    { label: \"Last 90 days\", days: 90 },\n    { label: \"This year\", days: 0, isYear: true },\n  ];\n\n  const setQuickRange = (range: (typeof quickRanges)[0]) => {\n    const end = new Date();\n    let start: Date;\n\n    if (range.isYear) {\n      start = new Date(end.getFullYear(), 0, 1);\n    } else {\n      start = new Date(end.getTime() - range.days * 24 * 60 * 60 * 1000);\n    }\n\n    onStartDateChange(start.toISOString().split(\"T\")[0]);\n    onEndDateChange(end.toISOString().split(\"T\")[0]);\n  };\n\n  return (\n    <div className={clsx(\"space-y-3\", className)}>\n      <label className=\"block text-sm font-medium text-slate-300\">\n        {label}\n        {required && <span className=\"text-red-400 ml-1\">*</span>}\n      </label>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div className=\"relative\">\n          <Calendar className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-slate-400\" />\n          <input\n            type=\"date\"\n            value={startDate}\n            onChange={(e) => onStartDateChange(e.target.value)}\n            className={clsx(\n              \"input-base pl-10\",\n              error && \"border-red-500/50 bg-red-500/5\",\n            )}\n            placeholder=\"Start date\"\n          />\n          <label className=\"absolute -top-2 left-2 px-2 bg-slate-800 text-xs text-slate-400\">\n            Start Date\n          </label>\n        </div>\n\n        <div className=\"relative\">\n          <Calendar className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-slate-400\" />\n          <input\n            type=\"date\"\n            value={endDate}\n            onChange={(e) => onEndDateChange(e.target.value)}\n            className={clsx(\n              \"input-base pl-10\",\n              error && \"border-red-500/50 bg-red-500/5\",\n            )}\n            placeholder=\"End date\"\n            min={startDate}\n          />\n          <label className=\"absolute -top-2 left-2 px-2 bg-slate-800 text-xs text-slate-400\">\n            End Date\n          </label>\n        </div>\n      </div>\n\n      <div className=\"flex flex-wrap gap-2\">\n        <span className=\"text-xs text-slate-400 flex items-center mr-2\">\n          <Clock className=\"w-3 h-3 mr-1\" />\n          Quick ranges:\n        </span>\n        {quickRanges.map((range, index) => (\n          <button\n            key={index}\n            type=\"button\"\n            onClick={() => setQuickRange(range)}\n            className=\"px-3 py-1 bg-slate-700/50 hover:bg-slate-600/50 text-xs text-slate-300 rounded-full transition-colors\"\n          >\n            {range.label}\n          </button>\n        ))}\n      </div>\n\n      {error && (\n        <p className=\"text-sm text-red-400 flex items-center gap-1\">\n          <AlertCircle className=\"w-3 h-3\" />\n          {error}\n        </p>\n      )}\n    </div>\n  );\n};\n\n// Form Validation Hook\nexport const useFormValidation = (\n  initialValues: Record<string, any>,\n  rules: Record<string, any>,\n) => {\n  const [values, setValues] = useState(initialValues);\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const [touched, setTouched] = useState<Record<string, boolean>>({});\n\n  const validateField = (field: string, value: any) => {\n    const fieldRules = rules[field];\n    if (!fieldRules) return \"\";\n\n    if (fieldRules.required && (!value || value.toString().trim() === \"\")) {\n      return fieldRules.message || `${field} is required`;\n    }\n\n    if (fieldRules.minLength && value.length < fieldRules.minLength) {\n      return `${field} must be at least ${fieldRules.minLength} characters`;\n    }\n\n    if (fieldRules.maxLength && value.length > fieldRules.maxLength) {\n      return `${field} must be no more than ${fieldRules.maxLength} characters`;\n    }\n\n    if (fieldRules.pattern && !fieldRules.pattern.test(value)) {\n      return fieldRules.patternMessage || `${field} format is invalid`;\n    }\n\n    if (fieldRules.custom && typeof fieldRules.custom === \"function\") {\n      return fieldRules.custom(value) || \"\";\n    }\n\n    return \"\";\n  };\n\n  const setValue = (field: string, value: any) => {\n    setValues((prev) => ({ ...prev, [field]: value }));\n\n    if (touched[field]) {\n      const error = validateField(field, value);\n      setErrors((prev) => ({ ...prev, [field]: error }));\n    }\n  };\n\n  const setFieldTouched = (field: string) => {\n    setTouched((prev) => ({ ...prev, [field]: true }));\n    const error = validateField(field, values[field]);\n    setErrors((prev) => ({ ...prev, [field]: error }));\n  };\n\n  const validateAll = () => {\n    const newErrors: Record<string, string> = {};\n    let isValid = true;\n\n    Object.keys(rules).forEach((field) => {\n      const error = validateField(field, values[field]);\n      if (error) {\n        newErrors[field] = error;\n        isValid = false;\n      }\n    });\n\n    setErrors(newErrors);\n    setTouched(\n      Object.keys(rules).reduce(\n        (acc, field) => ({ ...acc, [field]: true }),\n        {},\n      ),\n    );\n\n    return isValid;\n  };\n\n  const reset = () => {\n    setValues(initialValues);\n    setErrors({});\n    setTouched({});\n  };\n\n  return {\n    values,\n    errors,\n    touched,\n    setValue,\n    setFieldTouched,\n    validateAll,\n    reset,\n    isValid: Object.keys(errors).every((key) => !errors[key]),\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/components/LoadingSpinner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/components/MetricsOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/components/NotificationsPanel.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":29,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[626,636],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'notification' is defined but never used.","line":31,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":52,"suggestions":[{"messageId":"removeVar","data":{"varName":"notification"},"fix":{"range":[704,730],"text":""},"desc":"Remove unused variable 'notification'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/panels/NotificationsPanel.tsx - Modernized with unified design system\nimport clsx from \"clsx\";\nimport {\n  Bell,\n  X,\n  Check,\n  AlertTriangle,\n  Info,\n  CheckCircle,\n  Filter,\n} from \"lucide-react\";\nimport React, { useState } from \"react\";\n\ninterface Notification {\n  id: string;\n  type: \"success\" | \"warning\" | \"error\" | \"info\";\n  title: string;\n  message: string;\n  timestamp: Date;\n  read: boolean;\n  category: \"campaign\" | \"donor\" | \"system\" | \"report\";\n  actionUrl?: string;\n  actionLabel?: string;\n}\n\ninterface NotificationsPanelProps {\n  notifications?: Notification[];\n  onClose?: () => void;\n  onMarkAsRead?: (id: string) => void;\n  onMarkAllAsRead?: () => void;\n  onNotificationClick?: (notification: Notification) => void;\n}\n\nconst NotificationsPanel: React.FC<NotificationsPanelProps> = ({\n  notifications = [],\n  onClose,\n  onMarkAsRead,\n  onMarkAllAsRead,\n  onNotificationClick,\n}) => {\n  const [filter, setFilter] = useState<\"all\" | \"unread\">(\"all\");\n  const [categoryFilter, setCategoryFilter] = useState<string>(\"all\");\n\n  // Sample notifications if none provided\n  const defaultNotifications: Notification[] = [\n    {\n      id: \"1\",\n      type: \"success\",\n      title: \"Campaign Milestone Reached!\",\n      message:\n        'Your \"End of Year Giving\" campaign has reached 75% of its $50,000 goal with $37,500 raised.',\n      timestamp: new Date(Date.now() - 2 * 60 * 1000), // 2 minutes ago\n      read: false,\n      category: \"campaign\",\n      actionUrl: \"/campaigns/eoy-giving\",\n      actionLabel: \"View Campaign\",\n    },\n    {\n      id: \"2\",\n      type: \"info\",\n      title: \"New Major Donor\",\n      message:\n        \"Sarah Johnson has made a $5,000 donation and qualifies as a major donor. Consider adding her to your stewardship program.\",\n      timestamp: new Date(Date.now() - 30 * 60 * 1000), // 30 minutes ago\n      read: false,\n      category: \"donor\",\n      actionUrl: \"/donors/sarah-johnson\",\n      actionLabel: \"View Profile\",\n    },\n    {\n      id: \"3\",\n      type: \"warning\",\n      title: \"Campaign Deadline Approaching\",\n      message:\n        'Your \"CASA Holiday Drive\" campaign ends in 3 days. Consider sending a final appeal to boost donations.',\n      timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago\n      read: true,\n      category: \"campaign\",\n      actionUrl: \"/campaigns/casa-holiday\",\n      actionLabel: \"Send Appeal\",\n    },\n    {\n      id: \"4\",\n      type: \"info\",\n      title: \"Monthly Report Generated\",\n      message:\n        \"Your October fundraising report is ready for review. Total raised: $127,500 across 8 active campaigns.\",\n      timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000), // 1 day ago\n      read: true,\n      category: \"report\",\n      actionUrl: \"/reports/october-2024\",\n      actionLabel: \"View Report\",\n    },\n    {\n      id: \"5\",\n      type: \"error\",\n      title: \"Payment Processing Issue\",\n      message:\n        \"A recurring donation from David Chen failed to process. The donor has been notified and may need to update their payment method.\",\n      timestamp: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2 days ago\n      read: false,\n      category: \"system\",\n      actionUrl: \"/donors/david-chen\",\n      actionLabel: \"Contact Donor\",\n    },\n  ];\n\n  const allNotifications =\n    notifications.length > 0 ? notifications : defaultNotifications;\n\n  const filteredNotifications = allNotifications.filter((notification) => {\n    if (filter === \"unread\" && notification.read) return false;\n    if (categoryFilter !== \"all\" && notification.category !== categoryFilter)\n      return false;\n    return true;\n  });\n\n  const unreadCount = allNotifications.filter((n) => !n.read).length;\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case \"success\":\n        return <CheckCircle className=\"w-5 h-5 text-green-400\" />;\n      case \"warning\":\n        return <AlertTriangle className=\"w-5 h-5 text-yellow-400\" />;\n      case \"error\":\n        return <AlertTriangle className=\"w-5 h-5 text-red-400\" />;\n      case \"info\":\n      default:\n        return <Info className=\"w-5 h-5 text-blue-400\" />;\n    }\n  };\n\n  const getNotificationColors = (type: string) => {\n    switch (type) {\n      case \"success\":\n        return \"border-green-500/30 bg-green-500/5\";\n      case \"warning\":\n        return \"border-yellow-500/30 bg-yellow-500/5\";\n      case \"error\":\n        return \"border-red-500/30 bg-red-500/5\";\n      case \"info\":\n      default:\n        return \"border-blue-500/30 bg-blue-500/5\";\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case \"campaign\":\n        return \"🎯\";\n      case \"donor\":\n        return \"👤\";\n      case \"system\":\n        return \"⚙️\";\n      case \"report\":\n        return \"📊\";\n      default:\n        return \"📝\";\n    }\n  };\n\n  const formatTimeAgo = (timestamp: Date) => {\n    const now = new Date();\n    const diff = now.getTime() - timestamp.getTime();\n    const minutes = Math.floor(diff / (1000 * 60));\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n\n    if (minutes < 1) return \"Just now\";\n    if (minutes < 60) return `${minutes}m ago`;\n    if (hours < 24) return `${hours}h ago`;\n    if (days < 7) return `${days}d ago`;\n    return timestamp.toLocaleDateString();\n  };\n\n  const categories = [\n    { value: \"all\", label: \"All Categories\", count: allNotifications.length },\n    {\n      value: \"campaign\",\n      label: \"Campaigns\",\n      count: allNotifications.filter((n) => n.category === \"campaign\").length,\n    },\n    {\n      value: \"donor\",\n      label: \"Donors\",\n      count: allNotifications.filter((n) => n.category === \"donor\").length,\n    },\n    {\n      value: \"system\",\n      label: \"System\",\n      count: allNotifications.filter((n) => n.category === \"system\").length,\n    },\n    {\n      value: \"report\",\n      label: \"Reports\",\n      count: allNotifications.filter((n) => n.category === \"report\").length,\n    },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"card-base p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"p-2 bg-blue-500/20 rounded-xl\">\n              <Bell className=\"w-6 h-6 text-blue-400\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-bold text-white\">Notifications</h1>\n              <p className=\"text-slate-400\">\n                {unreadCount > 0\n                  ? `${unreadCount} unread notification${unreadCount !== 1 ? \"s\" : \"\"}`\n                  : \"All caught up!\"}\n              </p>\n            </div>\n          </div>\n\n          {onClose && (\n            <button\n              onClick={onClose}\n              className=\"p-2 text-slate-400 hover:text-white hover:bg-slate-700/50 rounded-lg transition-colors\"\n            >\n              <X className=\"w-5 h-5\" />\n            </button>\n          )}\n        </div>\n\n        {/* Controls */}\n        <div className=\"flex flex-col sm:flex-row gap-4\">\n          {/* Filter Buttons */}\n          <div className=\"flex items-center space-x-2\">\n            <button\n              onClick={() => setFilter(\"all\")}\n              className={clsx(\n                \"px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200\",\n                filter === \"all\"\n                  ? \"bg-blue-500/20 text-blue-300 border border-blue-500/30\"\n                  : \"text-slate-400 hover:text-white hover:bg-slate-700/50\",\n              )}\n            >\n              All ({allNotifications.length})\n            </button>\n            <button\n              onClick={() => setFilter(\"unread\")}\n              className={clsx(\n                \"px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200\",\n                filter === \"unread\"\n                  ? \"bg-blue-500/20 text-blue-300 border border-blue-500/30\"\n                  : \"text-slate-400 hover:text-white hover:bg-slate-700/50\",\n              )}\n            >\n              Unread ({unreadCount})\n            </button>\n          </div>\n\n          {/* Actions */}\n          <div className=\"flex items-center space-x-2 sm:ml-auto\">\n            {unreadCount > 0 && onMarkAllAsRead && (\n              <button\n                onClick={onMarkAllAsRead}\n                className=\"px-4 py-2 text-sm font-medium text-blue-400 hover:text-blue-300 hover:bg-slate-700/50 rounded-lg transition-colors flex items-center space-x-2\"\n              >\n                <Check className=\"w-4 h-4\" />\n                <span>Mark all as read</span>\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Category Filters */}\n      <div className=\"card-base p-4\">\n        <div className=\"flex items-center space-x-2 mb-3\">\n          <Filter className=\"w-4 h-4 text-slate-400\" />\n          <span className=\"text-sm font-medium text-slate-300\">\n            Filter by category\n          </span>\n        </div>\n        <div className=\"flex flex-wrap gap-2\">\n          {categories.map((category) => (\n            <button\n              key={category.value}\n              onClick={() => setCategoryFilter(category.value)}\n              className={clsx(\n                \"flex items-center space-x-2 px-3 py-1.5 rounded-full text-xs font-medium border transition-all duration-200\",\n                categoryFilter === category.value\n                  ? \"bg-purple-500/20 text-purple-300 border-purple-500/30\"\n                  : \"text-slate-400 border-slate-700/50 hover:text-slate-300 hover:border-slate-600/50\",\n              )}\n            >\n              <span>{getCategoryIcon(category.value)}</span>\n              <span>{category.label}</span>\n              <span className=\"bg-slate-600/50 text-slate-300 px-1.5 py-0.5 rounded-full text-xs\">\n                {category.count}\n              </span>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Notifications List */}\n      <div className=\"space-y-3\">\n        {filteredNotifications.length > 0 ? (\n          filteredNotifications.map((notification) => (\n            <div\n              key={notification.id}\n              className={clsx(\n                \"card-base p-4 cursor-pointer transition-all duration-200 hover:shadow-md border\",\n                !notification.read && \"ring-1 ring-blue-500/20\",\n                getNotificationColors(notification.type),\n              )}\n              onClick={() => onNotificationClick?.(notification)}\n            >\n              <div className=\"flex items-start space-x-4\">\n                {/* Icon */}\n                <div className=\"flex-shrink-0 mt-0.5\">\n                  {getNotificationIcon(notification.type)}\n                </div>\n\n                {/* Content */}\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h3\n                      className={clsx(\n                        \"font-semibold text-sm\",\n                        notification.read ? \"text-slate-300\" : \"text-white\",\n                      )}\n                    >\n                      {notification.title}\n                    </h3>\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-xs text-slate-500\">\n                        {formatTimeAgo(notification.timestamp)}\n                      </span>\n                      {!notification.read && (\n                        <div className=\"w-2 h-2 bg-blue-500 rounded-full\" />\n                      )}\n                    </div>\n                  </div>\n\n                  <p\n                    className={clsx(\n                      \"text-sm leading-relaxed mb-3\",\n                      notification.read ? \"text-slate-400\" : \"text-slate-300\",\n                    )}\n                  >\n                    {notification.message}\n                  </p>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-xs text-slate-500\">\n                        {getCategoryIcon(notification.category)}{\" \"}\n                        {notification.category}\n                      </span>\n                    </div>\n\n                    <div className=\"flex items-center space-x-2\">\n                      {notification.actionLabel && (\n                        <button className=\"text-xs font-medium text-blue-400 hover:text-blue-300 transition-colors\">\n                          {notification.actionLabel} →\n                        </button>\n                      )}\n\n                      {!notification.read && onMarkAsRead && (\n                        <button\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            onMarkAsRead(notification.id);\n                          }}\n                          className=\"p-1 text-slate-400 hover:text-blue-400 transition-colors\"\n                          title=\"Mark as read\"\n                        >\n                          <Check className=\"w-4 h-4\" />\n                        </button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))\n        ) : (\n          <div className=\"card-base p-12 text-center\">\n            <div className=\"w-16 h-16 mx-auto mb-4 bg-slate-800/50 rounded-full flex items-center justify-center\">\n              <Bell className=\"w-8 h-8 text-slate-400\" />\n            </div>\n            <h3 className=\"text-lg font-medium text-slate-300 mb-2\">\n              {filter === \"unread\"\n                ? \"No unread notifications\"\n                : \"No notifications\"}\n            </h3>\n            <p className=\"text-slate-400\">\n              {filter === \"unread\"\n                ? \"All your notifications have been read.\"\n                : \"You'll see important updates about your campaigns and donors here.\"}\n            </p>\n          </div>\n        )}\n      </div>\n\n      {/* Load More */}\n      {filteredNotifications.length > 10 && (\n        <div className=\"text-center\">\n          <button className=\"button-ghost\">Load more notifications</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default NotificationsPanel;\n","usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/components/PerformanceChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/components/SegmentComparison.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":1,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":48,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":48,"endColumn":24,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1537,1537],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1537,1537],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadComparison'. Either include it or remove the dependency array.","line":50,"column":6,"nodeType":"ArrayExpression","endLine":50,"endColumn":42,"suggestions":[{"desc":"Update the dependencies array to be: [loadComparison, selectedSegment1, selectedSegment2]","fix":{"range":[1566,1602],"text":"[loadComparison, selectedSegment1, selectedSegment2]"}}]},{"ruleId":"no-unused-vars","severity":2,"message":"'num' is defined but never used.","line":92,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":92,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"num"},"fix":{"range":[2736,2747],"text":""},"desc":"Remove unused variable 'num'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'value' is defined but never used.","line":177,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":177,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"value"},"fix":{"range":[5839,5852],"text":""},"desc":"Remove unused variable 'value'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\n\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport {\n  DonorSegment,\n  DonorSegmentAnalytics,\n  SegmentComparison as SegmentComparisonType,\n} from \"../models/donorSegments\";\nimport donorSegmentService from \"../services/donorSegmentService\";\n\ninterface SegmentComparisonProps {\n  segments: DonorSegment[];\n  analytics: DonorSegmentAnalytics;\n}\n\nexport const SegmentComparison: React.FC<SegmentComparisonProps> = ({\n  segments,\n  analytics,\n}) => {\n  const [selectedSegment1, setSelectedSegment1] = useState<string>(\"\");\n  const [selectedSegment2, setSelectedSegment2] = useState<string>(\"\");\n  const [comparison, setComparison] = useState<SegmentComparisonType | null>(\n    null,\n  );\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Auto-select top 2 segments by revenue on initial load\n  useEffect(() => {\n    if (segments.length >= 2 && !selectedSegment1 && !selectedSegment2) {\n      const sortedByRevenue = [...analytics.segmentData]\n        .sort((a, b) => b.totalContributed - a.totalContributed)\n        .slice(0, 2);\n\n      if (sortedByRevenue.length >= 2) {\n        setSelectedSegment1(sortedByRevenue[0].segmentId);\n        setSelectedSegment2(sortedByRevenue[1].segmentId);\n      }\n    }\n  }, [segments, analytics.segmentData, selectedSegment1, selectedSegment2]);\n\n  useEffect(() => {\n    if (\n      selectedSegment1 &&\n      selectedSegment2 &&\n      selectedSegment1 !== selectedSegment2\n    ) {\n      loadComparison();\n    }\n  }, [selectedSegment1, selectedSegment2]);\n\n  const loadComparison = async () => {\n    if (\n      !selectedSegment1 ||\n      !selectedSegment2 ||\n      selectedSegment1 === selectedSegment2\n    )\n      return;\n\n    try {\n      setLoading(true);\n      setError(null);\n      const comparisonData = await donorSegmentService.compareSegments(\n        selectedSegment1,\n        selectedSegment2,\n      );\n      setComparison(comparisonData);\n    } catch (err) {\n      setError(\n        err instanceof Error ? err.message : \"Failed to load comparison\",\n      );\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getSegmentData = (segmentId: string) => {\n    return analytics.segmentData.find((d) => d.segmentId === segmentId);\n  };\n\n  const getSegmentInfo = (segmentId: string) => {\n    return segments.find((s) => s.id === segmentId);\n  };\n\n  const formatNumber = (num: number) => num.toLocaleString();\n  const formatCurrency = (num: number) => `$${num.toLocaleString()}`;\n  const formatPercentage = (num: number) => `${num.toFixed(1)}%`;\n\n  const MetricComparisonCard: React.FC<{\n    title: string;\n    metric: keyof SegmentComparisonType[\"metrics\"];\n    formatter: (num: number) => string;\n    icon: string;\n  }> = ({ title, metric, formatter, icon }) => {\n    if (!comparison) return null;\n\n    const data = comparison.metrics[metric];\n    const isPositive = data.difference > 0;\n    const segment1Info = getSegmentInfo(comparison.baseSegmentId);\n    const segment2Info = getSegmentInfo(comparison.compareSegmentId);\n\n    return (\n      <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n        <div className=\"flex items-center gap-3 mb-4\">\n          <div className=\"w-8 h-8 bg-blue-100 text-blue-600 rounded-lg flex items-center justify-center\">\n            {icon}\n          </div>\n          <h3 className=\"text-lg font-semibold text-gray-900\">{title}</h3>\n        </div>\n\n        <div className=\"space-y-4\">\n          {/* Segment 1 */}\n          <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n            <div className=\"flex items-center gap-3\">\n              {segment1Info && (\n                <div\n                  className={`w-6 h-6 rounded flex items-center justify-center text-sm ${segment1Info.color}`}\n                >\n                  {segment1Info.icon}\n                </div>\n              )}\n              <span className=\"font-medium text-gray-900\">\n                {segment1Info?.name || \"Segment 1\"}\n              </span>\n            </div>\n            <span className=\"text-lg font-bold text-gray-900\">\n              {formatter(data.base)}\n            </span>\n          </div>\n\n          {/* Segment 2 */}\n          <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n            <div className=\"flex items-center gap-3\">\n              {segment2Info && (\n                <div\n                  className={`w-6 h-6 rounded flex items-center justify-center text-sm ${segment2Info.color}`}\n                >\n                  {segment2Info.icon}\n                </div>\n              )}\n              <span className=\"font-medium text-gray-900\">\n                {segment2Info?.name || \"Segment 2\"}\n              </span>\n            </div>\n            <span className=\"text-lg font-bold text-gray-900\">\n              {formatter(data.compare)}\n            </span>\n          </div>\n\n          {/* Difference */}\n          <div className=\"flex items-center justify-between p-3 border-t border-gray-200\">\n            <span className=\"text-sm font-medium text-gray-600\">\n              Difference\n            </span>\n            <div className=\"text-right\">\n              <div\n                className={`text-lg font-bold ${isPositive ? \"text-green-600\" : \"text-red-600\"}`}\n              >\n                {isPositive ? \"+\" : \"\"}\n                {formatter(data.difference)}\n              </div>\n              <div\n                className={`text-sm ${isPositive ? \"text-green-600\" : \"text-red-600\"}`}\n              >\n                {isPositive ? \"+\" : \"\"}\n                {data.percentageDifference.toFixed(1)}%\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const SegmentSelector: React.FC<{\n    value: string;\n    onChange: (value: string) => void;\n    label: string;\n    excludeId?: string;\n  }> = ({ value, onChange, label, excludeId }) => (\n    <div>\n      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n        {label}\n      </label>\n      <select\n        value={value}\n        onChange={(e) => onChange(e.target.value)}\n        className=\"w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n      >\n        <option value=\"\">Select a segment</option>\n        {segments\n          .filter((segment) => segment.id !== excludeId)\n          .map((segment) => (\n            <option key={segment.id} value={segment.id}>\n              {segment.icon} {segment.name}\n            </option>\n          ))}\n      </select>\n    </div>\n  );\n\n  const ComparisonSummary: React.FC = () => {\n    if (!comparison) return null;\n\n    const segment1Info = getSegmentInfo(comparison.baseSegmentId);\n    const segment2Info = getSegmentInfo(comparison.compareSegmentId);\n    const segment1Data = getSegmentData(comparison.baseSegmentId);\n    const segment2Data = getSegmentData(comparison.compareSegmentId);\n\n    return (\n      <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n          Comparison Summary\n        </h3>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n          {/* Segment 1 Summary */}\n          <div className=\"p-4 bg-gray-50 rounded-lg\">\n            <div className=\"flex items-center gap-3 mb-3\">\n              {segment1Info && (\n                <div\n                  className={`w-8 h-8 rounded-lg flex items-center justify-center ${segment1Info.color}`}\n                >\n                  {segment1Info.icon}\n                </div>\n              )}\n              <h4 className=\"font-medium text-gray-900\">\n                {segment1Info?.name}\n              </h4>\n            </div>\n            {segment1Data && (\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Donors:</span>\n                  <span className=\"font-medium\">\n                    {formatNumber(segment1Data.donorCount)}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Revenue:</span>\n                  <span className=\"font-medium\">\n                    {formatCurrency(segment1Data.totalContributed)}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Avg Gift:</span>\n                  <span className=\"font-medium\">\n                    {formatCurrency(segment1Data.averageGiftSize)}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Retention:</span>\n                  <span className=\"font-medium\">\n                    {formatPercentage(segment1Data.retentionRate)}\n                  </span>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Segment 2 Summary */}\n          <div className=\"p-4 bg-gray-50 rounded-lg\">\n            <div className=\"flex items-center gap-3 mb-3\">\n              {segment2Info && (\n                <div\n                  className={`w-8 h-8 rounded-lg flex items-center justify-center ${segment2Info.color}`}\n                >\n                  {segment2Info.icon}\n                </div>\n              )}\n              <h4 className=\"font-medium text-gray-900\">\n                {segment2Info?.name}\n              </h4>\n            </div>\n            {segment2Data && (\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Donors:</span>\n                  <span className=\"font-medium\">\n                    {formatNumber(segment2Data.donorCount)}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Revenue:</span>\n                  <span className=\"font-medium\">\n                    {formatCurrency(segment2Data.totalContributed)}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Avg Gift:</span>\n                  <span className=\"font-medium\">\n                    {formatCurrency(segment2Data.averageGiftSize)}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Retention:</span>\n                  <span className=\"font-medium\">\n                    {formatPercentage(segment2Data.retentionRate)}\n                  </span>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Key Insights */}\n        {comparison.insights.length > 0 && (\n          <div className=\"mb-6\">\n            <h4 className=\"text-md font-medium text-gray-900 mb-3\">\n              Key Insights\n            </h4>\n            <div className=\"space-y-2\">\n              {comparison.insights.map((insight, index) => (\n                <div key={index} className=\"flex items-start gap-2\">\n                  <div className=\"w-1.5 h-1.5 bg-blue-500 rounded-full mt-2 flex-shrink-0\" />\n                  <p className=\"text-sm text-gray-700\">{insight}</p>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Recommendations */}\n        {comparison.recommendations.length > 0 && (\n          <div>\n            <h4 className=\"text-md font-medium text-gray-900 mb-3\">\n              Recommendations\n            </h4>\n            <div className=\"space-y-3\">\n              {comparison.recommendations.map((recommendation, index) => (\n                <div\n                  key={index}\n                  className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg\"\n                >\n                  <div className=\"flex items-start gap-2\">\n                    <div className=\"text-blue-600 mt-0.5\">💡</div>\n                    <p className=\"text-sm text-blue-800\">{recommendation}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header and Selectors */}\n      <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n        <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 mb-6\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-900\">\n              Compare Donor Segments\n            </h3>\n            <p className=\"text-gray-600\">\n              Analyze performance differences between segments\n            </p>\n          </div>\n\n          <button\n            onClick={loadComparison}\n            disabled={\n              !selectedSegment1 ||\n              !selectedSegment2 ||\n              selectedSegment1 === selectedSegment2 ||\n              loading\n            }\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed text-sm font-medium\"\n          >\n            {loading ? \"Comparing...\" : \"Update Comparison\"}\n          </button>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <SegmentSelector\n            value={selectedSegment1}\n            onChange={setSelectedSegment1}\n            label=\"Base Segment\"\n            excludeId={selectedSegment2}\n          />\n          <SegmentSelector\n            value={selectedSegment2}\n            onChange={setSelectedSegment2}\n            label=\"Compare To\"\n            excludeId={selectedSegment1}\n          />\n        </div>\n\n        {selectedSegment1 === selectedSegment2 && selectedSegment1 && (\n          <div className=\"mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\n            <p className=\"text-sm text-yellow-800\">\n              Please select two different segments to compare.\n            </p>\n          </div>\n        )}\n      </div>\n\n      {/* Loading State */}\n      {loading && (\n        <div className=\"flex justify-center items-center py-8\">\n          <LoadingSpinner size=\"md\" text=\"Comparing segments...\" />\n        </div>\n      )}\n\n      {/* Error State */}\n      {error && (\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n          <div className=\"flex\">\n            <svg\n              className=\"h-5 w-5 text-red-400 mt-0.5\"\n              viewBox=\"0 0 20 20\"\n              fill=\"currentColor\"\n            >\n              <path\n                fillRule=\"evenodd\"\n                d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\"\n                clipRule=\"evenodd\"\n              />\n            </svg>\n            <div className=\"ml-3\">\n              <p className=\"text-sm text-red-800\">{error}</p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Comparison Results */}\n      {comparison && !loading && (\n        <>\n          {/* Summary */}\n          <ComparisonSummary />\n\n          {/* Metric Comparisons */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <MetricComparisonCard\n              title=\"Donor Count\"\n              metric=\"donorCount\"\n              formatter={formatNumber}\n              icon=\"👥\"\n            />\n\n            <MetricComparisonCard\n              title=\"Average Gift Size\"\n              metric=\"averageGift\"\n              formatter={formatCurrency}\n              icon=\"💰\"\n            />\n\n            <MetricComparisonCard\n              title=\"Retention Rate\"\n              metric=\"retentionRate\"\n              formatter={formatPercentage}\n              icon=\"🔄\"\n            />\n\n            <MetricComparisonCard\n              title=\"Engagement Score\"\n              metric=\"engagementScore\"\n              formatter={(num) => num.toFixed(0)}\n              icon=\"📈\"\n            />\n          </div>\n        </>\n      )}\n\n      {/* Empty State */}\n      {!selectedSegment1 || !selectedSegment2 ? (\n        <div className=\"text-center py-12\">\n          <div className=\"text-4xl mb-4\">⚖️</div>\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n            Select Segments to Compare\n          </h3>\n          <p className=\"text-gray-600\">\n            Choose two different segments to see detailed performance\n            comparisons and insights.\n          </p>\n        </div>\n      ) : null}\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/components/Sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/components/SidebarItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/components/Topbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/components/ui-kit/Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/components/ui-kit/Card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/components/ui-kit/Input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/components/ui-kit/Modal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/components/ui-kit/Panel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/context/AppProviders.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":30,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":30,"endColumn":27},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":38,"column":10,"nodeType":"Identifier","messageId":"namedExport","endLine":38,"endColumn":15},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":39,"column":10,"nodeType":"Identifier","messageId":"namedExport","endLine":39,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/context/AppProviders.tsx\n\nimport React, { createContext, useContext, useReducer } from \"react\";\n\nimport { AnalyticsProvider } from \"./analytics/AnalyticsContext\";\nimport { appReducer, initialState } from \"./appReducer\";\nimport { NotificationsProvider } from \"./notifications/NotificationsContext\";\nimport { AppState, AppAction } from \"./uiTypes\";\n\nconst AppContext = createContext<\n  | {\n      state: AppState;\n      dispatch: React.Dispatch<AppAction>;\n    }\n  | undefined\n>(undefined);\n\nexport const AppProvider = ({ children }: { children: React.ReactNode }) => {\n  const [state, dispatch] = useReducer(appReducer, initialState);\n\n  return (\n    <AppContext.Provider value={{ state, dispatch }}>\n      <AnalyticsProvider>\n        <NotificationsProvider>{children}</NotificationsProvider>\n      </AnalyticsProvider>\n    </AppContext.Provider>\n  );\n};\n\nexport const useAppContext = () => {\n  const context = useContext(AppContext);\n  if (!context)\n    throw new Error(\"useAppContext must be used within AppProvider\");\n  return context;\n};\n\n// Re-exports\nexport { useUI } from \"./useUI\";\nexport { useNotifications } from \"./notifications/NotificationsContext\";\nexport { AppProvider as AppProviders };\n","usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/context/analytics/AnalyticsContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":33,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":33,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/context/analytics/AnalyticsContext.tsx\n\nimport React, { createContext, useContext, ReactNode } from \"react\";\n\nimport { AnalyticsContextType } from \"./AnalyticsTypes\";\n\nconst AnalyticsContext = createContext<AnalyticsContextType | undefined>(\n  undefined,\n);\n\nexport const AnalyticsProvider = ({ children }: { children: ReactNode }) => {\n  const value: AnalyticsContextType = {\n    user: {\n      id: \"user123\",\n      name: \"Dave Hail\",\n      organizationName: \"Nexus Consulting\",\n    },\n    organization: {\n      overallMetrics: {\n        totalDonors: 128,\n        totalRevenue: 56000,\n      },\n    },\n  };\n\n  return (\n    <AnalyticsContext.Provider value={value}>\n      {children}\n    </AnalyticsContext.Provider>\n  );\n};\n\nexport const useAnalytics = () => {\n  const context = useContext(AnalyticsContext);\n  if (!context)\n    throw new Error(\"useAnalytics must be used within an AnalyticsProvider\");\n  return context;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/context/analytics/AnalyticsTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/context/appReducer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/context/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/context/notifications/NotificationsContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":33,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":33,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/context/NotificationsContext.tsx\nimport React, { createContext, useContext, useState, ReactNode } from \"react\";\n\ninterface NotificationsContextType {\n  show: boolean;\n  toggle: () => void;\n  markAsRead: () => void;\n  clear: () => void;\n}\n\nconst NotificationsContext = createContext<\n  NotificationsContextType | undefined\n>(undefined);\n\nexport const NotificationsProvider = ({\n  children,\n}: {\n  children: ReactNode;\n}) => {\n  const [show, setShow] = useState(false);\n\n  const toggle = () => setShow((prev) => !prev);\n  const markAsRead = () => console.log(\"Marking notifications as read\");\n  const clear = () => console.log(\"Clearing all notifications\");\n\n  return (\n    <NotificationsContext.Provider value={{ show, toggle, markAsRead, clear }}>\n      {children}\n    </NotificationsContext.Provider>\n  );\n};\n\nexport const useNotifications = (): NotificationsContextType => {\n  const context = useContext(NotificationsContext);\n  if (!context)\n    throw new Error(\n      \"useNotifications must be used within a NotificationsProvider\",\n    );\n  return context;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/context/uiTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/context/useUI.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/features/claude/ClaudePanel.tsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be no empty line within import group","line":15,"column":1,"nodeType":"ImportDeclaration","endLine":15,"endColumn":49},{"ruleId":"no-unused-vars","severity":2,"message":"'campaign' is defined but never used.","line":26,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":41,"suggestions":[{"messageId":"removeVar","data":{"varName":"campaign"},"fix":{"range":[707,725],"text":""},"desc":"Remove unused variable 'campaign'."}]},{"ruleId":"no-redeclare","severity":2,"message":"'ClaudePanelProps' is already defined.","line":48,"column":11,"nodeType":"Identifier","messageId":"redeclared","endLine":48,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'campaign' is defined but never used.","line":52,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":41,"suggestions":[{"messageId":"removeVar","data":{"varName":"campaign"},"fix":{"range":[1264,1282],"text":""},"desc":"Remove unused variable 'campaign'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'onCampaignSelect' is defined but never used.","line":59,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"onCampaignSelect"},"fix":{"range":[1385,1405],"text":""},"desc":"Remove unused variable 'onCampaignSelect'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onCampaignSelect' is defined but never used. Allowed unused args must match /^_/u.","line":59,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'conversationHistory' is assigned a value but never used.","line":65,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":65,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"conversationHistory"},"fix":{"range":[1669,1688],"text":""},"desc":"Remove unused variable 'conversationHistory'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'conversationHistory' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":65,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'setConversationHistory' is assigned a value but never used.","line":65,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":65,"endColumn":53,"suggestions":[{"messageId":"removeVar","data":{"varName":"setConversationHistory"},"fix":{"range":[1688,1712],"text":""},"desc":"Remove unused variable 'setConversationHistory'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setConversationHistory' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":65,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":53},{"ruleId":"no-unused-vars","severity":2,"message":"'sessions' is assigned a value but never used.","line":68,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":68,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"sessions"},"fix":{"range":[1764,1772],"text":""},"desc":"Remove unused variable 'sessions'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'sessions' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":68,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'setSessions' is assigned a value but never used.","line":68,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":68,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"setSessions"},"fix":{"range":[1772,1785],"text":""},"desc":"Remove unused variable 'setSessions'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSessions' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":68,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'currentSession' is assigned a value but never used.","line":69,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":69,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"currentSession"},"fix":{"range":[1835,1849],"text":""},"desc":"Remove unused variable 'currentSession'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'currentSession' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":69,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":24},{"ruleId":"no-unused-vars","severity":2,"message":"'setCurrentSession' is assigned a value but never used.","line":69,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":69,"endColumn":43,"suggestions":[{"messageId":"removeVar","data":{"varName":"setCurrentSession"},"fix":{"range":[1849,1868],"text":""},"desc":"Remove unused variable 'setCurrentSession'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setCurrentSession' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":69,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":43},{"ruleId":"no-unused-vars","severity":2,"message":"'showHistory' is assigned a value but never used.","line":73,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":73,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"showHistory"},"fix":{"range":[2007,2018],"text":""},"desc":"Remove unused variable 'showHistory'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showHistory' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":73,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'setShowHistory' is assigned a value but never used.","line":73,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":73,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"setShowHistory"},"fix":{"range":[2018,2034],"text":""},"desc":"Remove unused variable 'setShowHistory'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setShowHistory' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":73,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'showSessions' is assigned a value but never used.","line":74,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":74,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"showSessions"},"fix":{"range":[2064,2076],"text":""},"desc":"Remove unused variable 'showSessions'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showSessions' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":74,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'setShowSessions' is assigned a value but never used.","line":74,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":74,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"setShowSessions"},"fix":{"range":[2076,2093],"text":""},"desc":"Remove unused variable 'setShowSessions'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setShowSessions' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":74,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'customPrompt' is assigned a value but never used.","line":76,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":76,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"customPrompt"},"fix":{"range":[2180,2192],"text":""},"desc":"Remove unused variable 'customPrompt'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'customPrompt' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":76,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'setCustomPrompt' is assigned a value but never used.","line":76,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":76,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"setCustomPrompt"},"fix":{"range":[2192,2209],"text":""},"desc":"Remove unused variable 'setCustomPrompt'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setCustomPrompt' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":76,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'showCustomInput' is assigned a value but never used.","line":77,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":77,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"showCustomInput"},"fix":{"range":[2236,2251],"text":""},"desc":"Remove unused variable 'showCustomInput'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showCustomInput' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":77,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'formatTimestamp' is assigned a value but never used.","line":123,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":123,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"formatTimestamp"},"fix":{"range":[3566,3776],"text":""},"desc":"Remove unused variable 'formatTimestamp'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'formatTimestamp' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":123,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":123,"endColumn":24}],"suppressedMessages":[],"errorCount":33,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  X,\n  ArrowRight,\n  Copy,\n  RotateCcw,\n  Zap,\n  User as CampaignIcon,\n} from \"lucide-react\";\nimport React, { useState, useCallback, useEffect } from \"react\";\n\n// Fixed import paths based on file structure:\n// From src/features/claude/ClaudePanel.tsx, the paths should be:\n\n// Same directory (no ../ needed)\nimport { ClaudeMessage } from \"./claudeService\";\n\n// Go up two levels to reach src/models/ and src/components/\nimport LoadingSpinner from \"../../components/LoadingSpinner\";\nimport { Campaign } from \"../../models/campaign\";\n\n// Rest of your ClaudePanel code...\ninterface ClaudePanelProps {\n  isOpen: boolean;\n  onClose: () => void;\n  currentCampaign?: Campaign | null;\n  onCampaignSelect?: (campaign: Campaign) => void;\n}\n\n// Define types locally if they're not exported from useClaude\ninterface ConversationSession {\n  id: string;\n  campaignId?: string;\n  campaignName?: string;\n  messages: ClaudeMessage[];\n  createdAt: string;\n  lastUpdated: string;\n}\n\ninterface ClaudeAction {\n  id: string;\n  label: string;\n  icon: string;\n  description: string;\n  estimatedTime: string;\n  priority: \"high\" | \"medium\" | \"low\";\n}\n\ninterface ClaudePanelProps {\n  isOpen: boolean;\n  onClose: () => void;\n  currentCampaign?: Campaign | null;\n  onCampaignSelect?: (campaign: Campaign) => void;\n}\n\nconst ClaudePanel: React.FC<ClaudePanelProps> = ({\n  isOpen,\n  onClose,\n  currentCampaign,\n  onCampaignSelect,\n}) => {\n  // If useClaude hook doesn't work, create local state for testing\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [response, setResponse] = useState<string | null>(null);\n  const [conversationHistory, setConversationHistory] = useState<\n    ClaudeMessage[]\n  >([]);\n  const [sessions, setSessions] = useState<ConversationSession[]>([]);\n  const [currentSession, setCurrentSession] =\n    useState<ConversationSession | null>(null);\n\n  const [selectedAction, setSelectedAction] = useState<string | null>(null);\n  const [showHistory, setShowHistory] = useState(false);\n  const [showSessions, setShowSessions] = useState(false);\n  const [copySuccess, setCopySuccess] = useState(false);\n  const [customPrompt, setCustomPrompt] = useState(\"\");\n  const [showCustomInput, setShowCustomInput] = useState(false);\n\n  const handleClaudeRequest = useCallback(\n    async (type: string) => {\n      if (!currentCampaign) {\n        setError(\"Please select a campaign first\");\n        return;\n      }\n\n      setSelectedAction(type);\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        // Mock response for testing - replace with real API call\n        await new Promise((resolve) => setTimeout(resolve, 2000)); // Simulate delay\n        const mockResponse = `Mock ${type} response for campaign: ${currentCampaign.name}\\n\\nThis is a test response. Replace with real Claude API integration.`;\n        setResponse(mockResponse);\n      } catch (err: any) {\n        setError(err.message || \"Failed to generate content\");\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [currentCampaign],\n  );\n\n  const handleCopy = useCallback(async () => {\n    if (!response) return;\n\n    try {\n      await navigator.clipboard.writeText(response);\n      setCopySuccess(true);\n      setTimeout(() => setCopySuccess(false), 2000);\n    } catch (err) {\n      console.error(\"Failed to copy:\", err);\n    }\n  }, [response]);\n\n  const handleNewRequest = useCallback(() => {\n    setResponse(null);\n    setError(null);\n    setSelectedAction(null);\n    setShowCustomInput(false);\n  }, []);\n\n  const formatTimestamp = (timestamp: string) => {\n    return new Date(timestamp).toLocaleString(\"en-US\", {\n      month: \"short\",\n      day: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  // Enhanced Claude actions with better descriptions\n  const claudeActions: ClaudeAction[] = [\n    {\n      id: \"subject\",\n      label: \"Generate Subject Lines\",\n      icon: \"📧\",\n      description:\n        \"Create 5 compelling email subject lines with A/B testing recommendations\",\n      estimatedTime: \"~30 seconds\",\n      priority: \"high\",\n    },\n    {\n      id: \"email\",\n      label: \"Draft Donor Email\",\n      icon: \"✉️\",\n      description:\n        \"Write a complete fundraising email with proven structure and personalization\",\n      estimatedTime: \"~45 seconds\",\n      priority: \"high\",\n    },\n    {\n      id: \"strategy\",\n      label: \"Campaign Strategy\",\n      icon: \"🎯\",\n      description:\n        \"Develop a comprehensive week-by-week action plan with specific tactics\",\n      estimatedTime: \"~60 seconds\",\n      priority: \"medium\",\n    },\n    {\n      id: \"feedback\",\n      label: \"Improve Campaign\",\n      icon: \"📈\",\n      description:\n        \"Get actionable suggestions to optimize performance and engagement\",\n      estimatedTime: \"~45 seconds\",\n      priority: \"medium\",\n    },\n    {\n      id: \"cta\",\n      label: \"CTA Buttons\",\n      icon: \"🔘\",\n      description: \"Generate compelling call-to-action button text variations\",\n      estimatedTime: \"~20 seconds\",\n      priority: \"low\",\n    },\n  ];\n\n  // Close panel on Escape key\n  useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === \"Escape\" && isOpen) {\n        onClose();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener(\"keydown\", handleEscape);\n      return () => document.removeEventListener(\"keydown\", handleEscape);\n    }\n  }, [isOpen, onClose]);\n\n  if (!isOpen) return null;\n\n  return (\n    <aside className=\"fixed right-0 top-0 h-full w-[500px] bg-slate-900/95 backdrop-blur-md shadow-xl z-50 border-l border-slate-800 flex flex-col animate-in slide-in-from-right duration-300\">\n      {/* Header */}\n      <div className=\"p-6 border-b border-slate-800\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-gradient-to-br from-purple-600 to-blue-600 rounded-xl flex items-center justify-center\">\n              <Zap className=\"w-5 h-5 text-white\" />\n            </div>\n            <div>\n              <h2 className=\"text-xl font-bold text-white\">\n                Claude AI Assistant\n              </h2>\n              <p className=\"text-slate-400 text-sm\">\n                Campaign-powered content generation\n              </p>\n            </div>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"p-2 hover:bg-slate-800 rounded-xl transition-colors\"\n          >\n            <X className=\"w-5 h-5 text-slate-400\" />\n          </button>\n        </div>\n\n        {/* Campaign Context */}\n        {currentCampaign ? (\n          <div className=\"bg-gradient-to-r from-blue-900/30 to-purple-900/30 rounded-xl p-4 border border-blue-800/30\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <h3 className=\"font-semibold text-white truncate\">\n                {currentCampaign.name}\n              </h3>\n              <div\n                className={`px-2 py-1 rounded-lg text-xs font-medium ${\n                  currentCampaign.progress || 0 || 0 >= 75\n                    ? \"bg-green-500/20 text-green-400\"\n                    : currentCampaign.progress || 0 || 0 >= 50\n                      ? \"bg-blue-500/20 text-blue-400\"\n                      : currentCampaign.progress || 0 || 0 >= 25\n                        ? \"bg-yellow-500/20 text-yellow-400\"\n                        : \"bg-red-500/20 text-red-400\"\n                }`}\n              >\n                {currentCampaign.progress || 0 || 0}% Complete\n              </div>\n            </div>\n            <div className=\"grid grid-cols-2 gap-3 text-sm\">\n              <div>\n                <span className=\"text-slate-400\">Goal:</span>\n                <span className=\"text-white ml-2 font-medium\">\n                  ${currentCampaign.goal?.toLocaleString()}\n                </span>\n              </div>\n              <div>\n                <span className=\"text-slate-400\">Days Left:</span>\n                <span\n                  className={`ml-2 font-medium ${\n                    currentCampaign.daysLeft || 0 || 0 <= 7\n                      ? \"text-red-400\"\n                      : currentCampaign.daysLeft || 0 || 0 <= 30\n                        ? \"text-yellow-400\"\n                        : \"text-white\"\n                  }`}\n                >\n                  {currentCampaign.daysLeft || 0 || 0}\n                </span>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"bg-slate-800/50 rounded-xl p-4 text-center border border-slate-700\">\n            <CampaignIcon className=\"w-8 h-8 text-slate-500 mx-auto mb-2\" />\n            <p className=\"text-slate-400 text-sm mb-3\">\n              Select a campaign to get AI assistance tailored to your specific\n              goals and context.\n            </p>\n          </div>\n        )}\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 overflow-y-auto\">\n        {/* Action Buttons */}\n        {!response && !isLoading && (\n          <div className=\"p-6 space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-white font-semibold\">Choose an AI Action</h3>\n              {currentCampaign && (\n                <span className=\"text-xs text-green-400 font-medium px-2 py-1 bg-green-500/20 rounded-lg\">\n                  ✨ Campaign-Optimized\n                </span>\n              )}\n            </div>\n\n            <div className=\"space-y-3\">\n              {claudeActions.map((action: ClaudeAction) => (\n                <button\n                  key={action.id}\n                  onClick={() => handleClaudeRequest(action.id)}\n                  disabled={isLoading || !currentCampaign}\n                  className=\"w-full group disabled:opacity-50 disabled:cursor-not-allowed\"\n                >\n                  <div className=\"flex items-start space-x-4 p-4 text-left hover:bg-slate-800/50 rounded-xl transition-all duration-200 border border-transparent hover:border-slate-700\">\n                    <span className=\"text-2xl mt-1 group-hover:scale-110 transition-transform duration-200\">\n                      {action.icon}\n                    </span>\n                    <div className=\"flex-1 space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"font-semibold text-white group-hover:text-blue-400 transition-colors\">\n                          {action.label}\n                        </span>\n                        <span className=\"text-xs text-slate-500\">\n                          {action.estimatedTime}\n                        </span>\n                      </div>\n                      <p className=\"text-sm text-slate-400 leading-relaxed\">\n                        {action.description}\n                      </p>\n                    </div>\n                    <ArrowRight className=\"w-5 h-5 text-slate-500 opacity-0 group-hover:opacity-100 transition-all duration-200 group-hover:translate-x-1\" />\n                  </div>\n                </button>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Loading State */}\n        {isLoading && (\n          <div className=\"p-6\">\n            <div className=\"text-center py-12 space-y-4\">\n              <LoadingSpinner size=\"lg\" />\n              <div className=\"space-y-2\">\n                <h3 className=\"font-medium text-white\">\n                  Claude is analyzing your campaign...\n                </h3>\n                <p className=\"text-sm text-slate-400\">\n                  {selectedAction &&\n                    `Working on ${claudeActions.find((a) => a.id === selectedAction)?.label}`}\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Error State */}\n        {error && (\n          <div className=\"p-6\">\n            <div className=\"bg-red-900/20 border border-red-800/50 rounded-xl p-6 space-y-3\">\n              <h3 className=\"font-medium text-red-300\">Request Failed</h3>\n              <p className=\"text-sm text-red-400\">{error}</p>\n              <button\n                onClick={handleNewRequest}\n                className=\"text-sm text-red-400 hover:text-red-300 font-medium transition-colors\"\n              >\n                Try Again\n              </button>\n            </div>\n          </div>\n        )}\n\n        {/* Response */}\n        {response && (\n          <div className=\"p-6 space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-gradient-to-br from-purple-600 to-blue-600 rounded-lg flex items-center justify-center\">\n                  <Zap className=\"w-4 h-4 text-white\" />\n                </div>\n                <h3 className=\"font-semibold text-white\">Claude's Response</h3>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <button\n                  onClick={handleCopy}\n                  className={`flex items-center space-x-2 px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${\n                    copySuccess\n                      ? \"bg-green-500/20 text-green-400\"\n                      : \"bg-slate-800 text-slate-300 hover:bg-slate-700 hover:text-white\"\n                  }`}\n                >\n                  <Copy className=\"w-4 h-4\" />\n                  <span>{copySuccess ? \"Copied!\" : \"Copy\"}</span>\n                </button>\n                <button\n                  onClick={handleNewRequest}\n                  className=\"flex items-center space-x-2 px-3 py-2 bg-slate-800 text-slate-300 hover:bg-slate-700 hover:text-white rounded-lg text-sm font-medium transition-all duration-200\"\n                >\n                  <RotateCcw className=\"w-4 h-4\" />\n                  <span>New Request</span>\n                </button>\n              </div>\n            </div>\n\n            <div className=\"bg-slate-800/50 rounded-xl p-6 border border-slate-700\">\n              <pre className=\"text-sm whitespace-pre-wrap font-sans leading-relaxed text-slate-200\">\n                {response}\n              </pre>\n            </div>\n          </div>\n        )}\n      </div>\n    </aside>\n  );\n};\n\nexport default ClaudePanel;\n","usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/features/claude/claude.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/features/claude/claudeService.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'status' is defined but never used.","line":27,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"status"},"fix":{"range":[533,548],"text":""},"desc":"Remove unused variable 'status'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'code' is defined but never used.","line":28,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"code"},"fix":{"range":[561,574],"text":""},"desc":"Remove unused variable 'code'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/features/claude/claudeService.ts - Secure version using backend API\n\nexport interface ClaudeResponse {\n  content: string;\n  usage?: {\n    input_tokens: number;\n    output_tokens: number;\n  };\n  messageType?: string;\n}\n\nexport interface ClaudeMessage {\n  role: \"user\" | \"assistant\";\n  content: string;\n}\n\nexport interface ClaudeRequestOptions {\n  model?: string;\n  max_tokens?: number;\n  temperature?: number;\n  system?: string;\n}\n\nexport class ClaudeServiceError extends Error {\n  constructor(\n    message: string,\n    public status?: number,\n    public code?: string,\n  ) {\n    super(message);\n    this.name = \"ClaudeServiceError\";\n  }\n}\n\n// Get API base URL from environment or default to localhost\nconst API_BASE_URL =\n  import.meta.env.VITE_API_BASE_URL || \"http://localhost:3001\";\n\n/**\n * Generate a response from Claude AI via secure backend\n * @param prompt - The user prompt to send to Claude\n * @param context - Optional campaign or additional context\n * @param messageType - Type of message being generated\n * @param options - Optional configuration for the request\n * @returns Promise<ClaudeResponse>\n */\nexport async function generateClaudeResponse(\n  prompt: string,\n  context?: string,\n  messageType?: string,\n  options: ClaudeRequestOptions = {},\n): Promise<ClaudeResponse> {\n  if (!prompt.trim()) {\n    throw new ClaudeServiceError(\"Prompt cannot be empty\", 0, \"EMPTY_PROMPT\");\n  }\n\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/claude/generate`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // Add any auth headers if your app requires authentication\n        // 'Authorization': `Bearer ${getAuthToken()}`,\n      },\n      body: JSON.stringify({\n        prompt,\n        context,\n        messageType,\n        options,\n      }),\n    });\n\n    if (!response.ok) {\n      let errorMessage = `Request failed: ${response.status}`;\n      let errorCode = \"HTTP_ERROR\";\n\n      try {\n        const errorData = await response.json();\n        if (errorData.error) {\n          errorMessage = errorData.message || errorData.error;\n          errorCode = errorData.code || errorCode;\n        }\n      } catch {\n        // If we can't parse the error response, use the default message\n      }\n\n      throw new ClaudeServiceError(errorMessage, response.status, errorCode);\n    }\n\n    const data = await response.json();\n\n    if (!data.content) {\n      throw new ClaudeServiceError(\n        \"No content received from AI service\",\n        0,\n        \"NO_CONTENT\",\n      );\n    }\n\n    return {\n      content: data.content,\n      usage: data.usage,\n      messageType: data.messageType,\n    };\n  } catch (error) {\n    if (error instanceof ClaudeServiceError) {\n      throw error;\n    }\n\n    if (error instanceof TypeError && error.message.includes(\"fetch\")) {\n      throw new ClaudeServiceError(\n        \"Network error: Unable to connect to AI service. Please check your internet connection.\",\n        0,\n        \"NETWORK_ERROR\",\n      );\n    }\n\n    throw new ClaudeServiceError(\n      `Unexpected error: ${error instanceof Error ? error.message : \"Unknown error occurred\"}`,\n      0,\n      \"UNKNOWN_ERROR\",\n    );\n  }\n}\n\n/**\n * Generate a response from Claude AI with conversation history via secure backend\n * @param messages - Array of conversation messages\n * @param options - Optional configuration for the request\n * @returns Promise<ClaudeResponse>\n */\nexport async function generateClaudeConversation(\n  messages: ClaudeMessage[],\n  options: ClaudeRequestOptions = {},\n): Promise<ClaudeResponse> {\n  if (!messages.length) {\n    throw new ClaudeServiceError(\n      \"Messages array cannot be empty\",\n      0,\n      \"EMPTY_MESSAGES\",\n    );\n  }\n\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/claude/conversation`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // Add any auth headers if your app requires authentication\n        // 'Authorization': `Bearer ${getAuthToken()}`,\n      },\n      body: JSON.stringify({\n        messages,\n        options,\n      }),\n    });\n\n    if (!response.ok) {\n      let errorMessage = `Request failed: ${response.status}`;\n      let errorCode = \"HTTP_ERROR\";\n\n      try {\n        const errorData = await response.json();\n        if (errorData.error) {\n          errorMessage = errorData.message || errorData.error;\n          errorCode = errorData.code || errorCode;\n        }\n      } catch {\n        // Use default message\n      }\n\n      throw new ClaudeServiceError(errorMessage, response.status, errorCode);\n    }\n\n    const data = await response.json();\n\n    if (!data.content) {\n      throw new ClaudeServiceError(\n        \"No content received from AI service\",\n        0,\n        \"NO_CONTENT\",\n      );\n    }\n\n    return {\n      content: data.content,\n      usage: data.usage,\n    };\n  } catch (error) {\n    if (error instanceof ClaudeServiceError) {\n      throw error;\n    }\n\n    if (error instanceof TypeError && error.message.includes(\"fetch\")) {\n      throw new ClaudeServiceError(\n        \"Network error: Unable to connect to AI service. Please check your internet connection.\",\n        0,\n        \"NETWORK_ERROR\",\n      );\n    }\n\n    throw new ClaudeServiceError(\n      `Unexpected error: ${error instanceof Error ? error.message : \"Unknown error occurred\"}`,\n      0,\n      \"UNKNOWN_ERROR\",\n    );\n  }\n}\n\n/**\n * Enhanced fundraising-specific prompts with campaign context\n */\nexport const FundraisingPrompts = {\n  email: (context: string, campaign?: any) => {\n    const campaignInfo = campaign\n      ? `\nCampaign: ${campaign.name}\nGoal: $${campaign.goal?.toLocaleString()}\nProgress: ${campaign.progress}% (${campaign.daysLeft} days remaining)\nRaised: $${campaign.raised?.toLocaleString()}\n    `\n      : \"\";\n\n    return `Write a compelling fundraising email for the following campaign. Make it personal, urgent, and include a clear call-to-action:\n\n${campaignInfo}\n\nCampaign Details:\n${context}\n\nFocus on:\n- Personal connection with the reader\n- Emotional story or impact\n- Specific ask amount or action\n- Deadline urgency (if applicable)\n- Clear next steps`;\n  },\n\n  subjectLines: (context: string, campaign?: any) => {\n    const urgency = campaign?.daysLeft <= 7 ? \" (URGENT - Final week!)\" : \"\";\n    return `Write 5 different subject lines for a fundraising email${urgency}. Make them attention-grabbing and varied in approach (urgency, curiosity, benefit-focused, personal, etc.):\n\nCampaign: ${campaign?.name || \"Fundraising Campaign\"}\nContext: ${context}\n\nInclude a mix of:\n- Urgency-based subject lines\n- Curiosity-driven subject lines  \n- Benefit/impact-focused subject lines\n- Personal/emotional subject lines\n- Question-based subject lines`;\n  },\n\n  socialPost: (\n    context: string,\n    platform: \"facebook\" | \"twitter\" | \"instagram\" | \"linkedin\" = \"facebook\",\n    campaign?: any,\n  ) => {\n    const platformLimits = {\n      twitter: \"(Keep under 280 characters)\",\n      instagram: \"(Include hashtag suggestions)\",\n      linkedin: \"(Professional tone)\",\n      facebook: \"(Engaging and shareable)\",\n    };\n\n    return `Write a ${platform} post for this fundraising campaign ${platformLimits[platform]}:\n\n${campaign ? `Campaign: ${campaign.name} (${campaign.progress}% funded, ${campaign.daysLeft} days left)` : \"\"}\n\nDetails: ${context}\n\nMake it:\n- Platform-appropriate for ${platform}\n- Engaging and action-oriented\n- Include relevant hashtags (if applicable)\n- Clear call-to-action`;\n  },\n\n  ctaButtons: (context: string, campaign?: any) =>\n    `Write 5 different call-to-action button texts for this fundraising campaign:\n\nCampaign: ${campaign?.name || \"Campaign\"}\n${campaign ? `Progress: ${campaign.progress}% of $${campaign.goal?.toLocaleString()} goal` : \"\"}\n\nContext: ${context}\n\nMake them:\n- Short (2-4 words max)\n- Action-oriented and urgent\n- Emotionally compelling\n- Varied in approach (direct ask, impact-focused, urgency-driven, etc.)`,\n\n  strategy: (context: string, campaign?: any) => {\n    const timeframe = campaign?.daysLeft\n      ? `${campaign.daysLeft} days remaining`\n      : \"2-week period\";\n    return `Create a comprehensive fundraising strategy for the following campaign (${timeframe}):\n\nCampaign Overview:\n${\n  campaign\n    ? `\n- Name: ${campaign.name}\n- Goal: $${campaign.goal?.toLocaleString()}\n- Current: $${campaign.raised?.toLocaleString()} (${campaign.progress}%)\n- Contacts: ${campaign.contactCount || \"Unknown\"} in database\n- Days Left: ${campaign.daysLeft}\n`\n    : \"\"\n}\n\nContext: ${context}\n\nProvide:\n1. **Week-by-week action plan** with specific tactics\n2. **Donor segmentation strategy** (major gifts, mid-level, grassroots)\n3. **Communication schedule** (emails, calls, social media)\n4. **Content calendar** with themes and messages\n5. **Metrics to track** and success indicators\n6. **Contingency plans** if behind schedule\n\nBe specific and actionable.`;\n  },\n};\n\nexport default {\n  generateClaudeResponse,\n  generateClaudeConversation,\n  FundraisingPrompts,\n  ClaudeServiceError,\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/features/claude/getClaudePrompt.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/features/claude/useClaude.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'prompt' is defined but never used.","line":37,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"prompt"},"fix":{"range":[940,955],"text":""},"desc":"Remove unused variable 'prompt'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'currentCampaign' is defined but never used.","line":38,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"currentCampaign"},"fix":{"range":[954,986],"text":""},"desc":"Remove unused variable 'currentCampaign'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'actionType' is defined but never used.","line":39,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"actionType"},"fix":{"range":[986,1011],"text":""},"desc":"Remove unused variable 'actionType'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'actionType' is defined but never used.","line":42,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"actionType"},"fix":{"range":[1065,1084],"text":""},"desc":"Remove unused variable 'actionType'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'currentCampaign' is defined but never used.","line":43,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"currentCampaign"},"fix":{"range":[1083,1114],"text":""},"desc":"Remove unused variable 'currentCampaign'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'sessionId' is defined but never used.","line":46,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":34,"suggestions":[{"messageId":"removeVar","data":{"varName":"sessionId"},"fix":{"range":[1187,1204],"text":""},"desc":"Remove unused variable 'sessionId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'sessionId' is defined but never used.","line":47,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"sessionId"},"fix":{"range":[1233,1250],"text":""},"desc":"Remove unused variable 'sessionId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'campaign' is defined but never used.","line":48,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":41,"suggestions":[{"messageId":"removeVar","data":{"varName":"campaign"},"fix":{"range":[1282,1301],"text":""},"desc":"Remove unused variable 'campaign'."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadSavedSessions'. Either include it or remove the dependency array.","line":65,"column":6,"nodeType":"ArrayExpression","endLine":65,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadSavedSessions]","fix":{"range":[1924,1926],"text":"[loadSavedSessions]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'saveSession'. Either include it or remove the dependency array.","line":72,"column":6,"nodeType":"ArrayExpression","endLine":72,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [currentSession, saveSession]","fix":{"range":[2053,2069],"text":"[currentSession, saveSession]"}}]},{"ruleId":"no-unused-vars","severity":2,"message":"'actionType' is defined but never used.","line":190,"column":56,"nodeType":"Identifier","messageId":"unusedVar","endLine":190,"endColumn":75,"suggestions":[{"messageId":"removeVar","data":{"varName":"actionType"},"fix":{"range":[5360,5381],"text":""},"desc":"Remove unused variable 'actionType'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'actionType' is defined but never used. Allowed unused args must match /^_/u.","line":190,"column":56,"nodeType":null,"messageId":"unusedVar","endLine":190,"endColumn":66}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/features/claude/useClaude.ts - Fixed to work with your Campaign type\nimport { useState, useCallback, useEffect } from \"react\";\n\nimport { Campaign } from \"@/models/campaign\";\n\nimport {\n  generateClaudeConversation,\n  ClaudeServiceError,\n  ClaudeMessage,\n  ClaudeResponse,\n} from \"./claudeService\";\nimport { getClaudePrompt } from \"./getClaudePrompt\";\n\n// Local storage keys\nconst CONVERSATION_STORAGE_KEY = \"nexus_claude_conversations\";\nconst LAST_CAMPAIGN_KEY = \"nexus_claude_last_campaign\";\n\nexport interface ConversationSession {\n  id: string;\n  campaignId?: string;\n  campaignName?: string;\n  messages: ClaudeMessage[];\n  createdAt: string;\n  lastUpdated: string;\n}\n\ninterface UseClaudeResult {\n  isLoading: boolean;\n  error: string | null;\n  response: ClaudeResponse | null;\n  conversationHistory: ClaudeMessage[];\n  currentSession: ConversationSession | null;\n  sessions: ConversationSession[];\n\n  // Actions\n  askClaude: (\n    prompt: string,\n    currentCampaign?: Campaign,\n    actionType?: string,\n  ) => Promise<void>;\n  askClaudeWithContext: (\n    actionType: string,\n    currentCampaign: Campaign,\n  ) => Promise<void>;\n  clearConversation: () => void;\n  loadSession: (sessionId: string) => void;\n  deleteSession: (sessionId: string) => void;\n  createNewSession: (campaign?: Campaign) => void;\n  cancelRequest?: () => void;\n}\n\nexport function useClaude(): UseClaudeResult {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [response, setResponse] = useState<ClaudeResponse | null>(null);\n  const [currentSession, setCurrentSession] =\n    useState<ConversationSession | null>(null);\n  const [sessions, setSessions] = useState<ConversationSession[]>([]);\n  const [abortController, setAbortController] =\n    useState<AbortController | null>(null);\n\n  // Load saved conversations on mount\n  useEffect(() => {\n    loadSavedSessions();\n  }, []);\n\n  // Auto-save current session\n  useEffect(() => {\n    if (currentSession) {\n      saveSession(currentSession);\n    }\n  }, [currentSession]);\n\n  const loadSavedSessions = useCallback(() => {\n    try {\n      const saved = localStorage.getItem(CONVERSATION_STORAGE_KEY);\n      if (saved) {\n        const parsedSessions = JSON.parse(saved) as ConversationSession[];\n        setSessions(parsedSessions);\n\n        // Load the most recent session\n        if (parsedSessions.length > 0) {\n          const latest = parsedSessions.sort(\n            (a, b) =>\n              new Date(b.lastUpdated).getTime() -\n              new Date(a.lastUpdated).getTime(),\n          )[0];\n          setCurrentSession(latest);\n        }\n      }\n    } catch (error) {\n      console.error(\"Failed to load saved conversations:\", error);\n    }\n  }, []);\n\n  const saveSession = useCallback(\n    (session: ConversationSession) => {\n      try {\n        const updatedSessions = sessions.filter((s) => s.id !== session.id);\n        updatedSessions.push(session);\n\n        // Keep only last 10 sessions to prevent storage bloat\n        const recentSessions = updatedSessions\n          .sort(\n            (a, b) =>\n              new Date(b.lastUpdated).getTime() -\n              new Date(a.lastUpdated).getTime(),\n          )\n          .slice(0, 10);\n\n        setSessions(recentSessions);\n        localStorage.setItem(\n          CONVERSATION_STORAGE_KEY,\n          JSON.stringify(recentSessions),\n        );\n      } catch (error) {\n        console.error(\"Failed to save conversation session:\", error);\n      }\n    },\n    [sessions],\n  );\n\n  const createNewSession = useCallback((campaign?: Campaign) => {\n    const newSession: ConversationSession = {\n      id: `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      campaignId: campaign?.id,\n      campaignName: campaign?.name,\n      messages: [],\n      createdAt: new Date().toISOString(),\n      lastUpdated: new Date().toISOString(),\n    };\n\n    setCurrentSession(newSession);\n    setResponse(null);\n    setError(null);\n\n    // Save campaign context for future sessions\n    if (campaign) {\n      localStorage.setItem(\n        LAST_CAMPAIGN_KEY,\n        JSON.stringify({\n          id: campaign.id,\n          name: campaign.name,\n        }),\n      );\n    }\n  }, []);\n\n  const loadSession = useCallback(\n    (sessionId: string) => {\n      const session = sessions.find((s) => s.id === sessionId);\n      if (session) {\n        setCurrentSession(session);\n        setResponse(\n          session.messages.length > 0\n            ? {\n                content:\n                  session.messages[session.messages.length - 1]?.content || \"\",\n              }\n            : null,\n        );\n        setError(null);\n      }\n    },\n    [sessions],\n  );\n\n  const deleteSession = useCallback(\n    (sessionId: string) => {\n      const updatedSessions = sessions.filter((s) => s.id !== sessionId);\n      setSessions(updatedSessions);\n      localStorage.setItem(\n        CONVERSATION_STORAGE_KEY,\n        JSON.stringify(updatedSessions),\n      );\n\n      if (currentSession?.id === sessionId) {\n        if (updatedSessions.length > 0) {\n          setCurrentSession(updatedSessions[0]);\n        } else {\n          setCurrentSession(null);\n          setResponse(null);\n        }\n      }\n    },\n    [sessions, currentSession],\n  );\n\n  const askClaude = useCallback(\n    async (prompt: string, currentCampaign?: Campaign, actionType?: string) => {\n      // Cancel any existing request\n      if (abortController) {\n        abortController.abort();\n      }\n\n      const newAbortController = new AbortController();\n      setAbortController(newAbortController);\n      setIsLoading(true);\n      setError(null);\n\n      // Create session if none exists\n      let session = currentSession;\n      if (!session) {\n        session = {\n          id: `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n          campaignId: currentCampaign?.id,\n          campaignName: currentCampaign?.name,\n          messages: [],\n          createdAt: new Date().toISOString(),\n          lastUpdated: new Date().toISOString(),\n        };\n        setCurrentSession(session);\n      }\n\n      // Build context-aware prompt - safer property access\n      const buildCampaignContext = (campaign: Campaign) => {\n        const parts = [];\n        if (campaign.name) parts.push(`- Name: ${campaign.name}`);\n        if (campaign.description)\n          parts.push(`- Description: ${campaign.description}`);\n        if (campaign.goal)\n          parts.push(`- Goal: $${campaign.goal.toLocaleString()}`);\n        if (campaign.raised !== undefined)\n          parts.push(`- Raised: $${campaign.raised.toLocaleString()}`);\n        if (campaign.progress !== undefined)\n          parts.push(`- Progress: ${campaign.progress}%`);\n        if (campaign.daysLeft !== undefined)\n          parts.push(`- Days Left: ${campaign.daysLeft}`);\n        if (campaign.deadline) parts.push(`- Deadline: ${campaign.deadline}`);\n\n        return parts.length > 0\n          ? `\\n\\nCampaign Context:\\n${parts.join(\"\\n\")}`\n          : \"\";\n      };\n\n      const contextualPrompt = currentCampaign\n        ? `${prompt}${buildCampaignContext(currentCampaign)}`\n        : prompt;\n\n      const userMessage: ClaudeMessage = {\n        role: \"user\",\n        content: contextualPrompt,\n      };\n\n      const updatedMessages = [...session.messages, userMessage];\n\n      try {\n        // Check if request was cancelled\n        if (newAbortController.signal.aborted) {\n          return;\n        }\n\n        const aiResponse = await generateClaudeConversation(updatedMessages);\n\n        // Check again if request was cancelled\n        if (newAbortController.signal.aborted) {\n          return;\n        }\n\n        const assistantMessage: ClaudeMessage = {\n          role: \"assistant\",\n          content: aiResponse.content,\n        };\n\n        const finalMessages = [...updatedMessages, assistantMessage];\n\n        const updatedSession: ConversationSession = {\n          ...session,\n          messages: finalMessages,\n          lastUpdated: new Date().toISOString(),\n        };\n\n        setCurrentSession(updatedSession);\n        setResponse(aiResponse);\n      } catch (err) {\n        if (newAbortController.signal.aborted) {\n          return; // Request was cancelled, don't show error\n        }\n\n        if (err instanceof ClaudeServiceError) {\n          setError(`${err.name}: ${err.message}`);\n        } else {\n          setError(\"An unexpected error occurred while generating content.\");\n        }\n      } finally {\n        if (!newAbortController.signal.aborted) {\n          setIsLoading(false);\n        }\n        setAbortController(null);\n      }\n    },\n    [currentSession, abortController],\n  );\n\n  const askClaudeWithContext = useCallback(\n    async (actionType: string, currentCampaign: Campaign) => {\n      if (!currentCampaign) {\n        setError(\"Please select a campaign first to get specific assistance.\");\n        return;\n      }\n\n      try {\n        const prompt = getClaudePrompt(actionType, currentCampaign);\n        await askClaude(prompt, currentCampaign, actionType);\n      } catch (err) {\n        console.error(\"Error generating Claude prompt:\", err);\n        setError(\"Failed to generate prompt for campaign context.\");\n      }\n    },\n    [askClaude],\n  );\n\n  const clearConversation = useCallback(() => {\n    if (currentSession) {\n      const clearedSession: ConversationSession = {\n        ...currentSession,\n        messages: [],\n        lastUpdated: new Date().toISOString(),\n      };\n      setCurrentSession(clearedSession);\n    }\n    setResponse(null);\n    setError(null);\n  }, [currentSession]);\n\n  const cancelRequest = useCallback(() => {\n    if (abortController) {\n      abortController.abort();\n      setAbortController(null);\n      setIsLoading(false);\n    }\n  }, [abortController]);\n\n  return {\n    isLoading,\n    error,\n    response,\n    conversationHistory: currentSession?.messages || [],\n    currentSession,\n    sessions,\n    askClaude,\n    askClaudeWithContext,\n    clearConversation,\n    loadSession,\n    deleteSession,\n    createNewSession,\n    cancelRequest,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/hooks/useCampaigns.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/hooks/useKeyboardShortcuts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/hooks/useNotifications.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/models/analytics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/models/campaign.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/models/donor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/models/donorSegments.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/panels/AnalyticsDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":1,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":33,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":33,"endColumn":25,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1144,1144],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1144,1144],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAnalyticsData'. Either include it or remove the dependency array.","line":34,"column":6,"nodeType":"ArrayExpression","endLine":34,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [filters, loadAnalyticsData]","fix":{"range":[1170,1179],"text":"[filters, loadAnalyticsData]"}}]},{"ruleId":"no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":67,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":67,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":67,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":17}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\n\nimport AnalyticsFiltersComponent from \"../components/AnalyticsFiltersComponent\";\nimport DonorInsightsPanel from \"../components/DonorInsightsPanel\";\nimport LoadingSpinner from \"../components/LoadingSpinner\";\nimport MetricsOverview from \"../components/MetricsOverview\";\nimport {\n  AnalyticsFilters,\n  OrganizationAnalytics,\n  DonorInsights,\n} from \"../models/analytics\";\nimport { analyticsService } from \"../services/analyticsService\";\n\ntype AnalyticsView = \"overview\" | \"campaigns\" | \"donors\" | \"export\";\n\nconst AnalyticsDashboard: React.FC = () => {\n  const [activeView, setActiveView] = useState<AnalyticsView>(\"overview\");\n  const [orgAnalytics, setOrgAnalytics] =\n    useState<OrganizationAnalytics | null>(null);\n  const [donorInsights, setDonorInsights] = useState<DonorInsights | null>(\n    null,\n  );\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [filters, setFilters] = useState<AnalyticsFilters>({\n    dateRange: {\n      startDate: \"2024-01-01\",\n      endDate: \"2024-08-31\",\n    },\n  });\n\n  useEffect(() => {\n    loadAnalyticsData();\n  }, [filters]);\n\n  const loadAnalyticsData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const [orgData, donorData] = await Promise.all([\n        analyticsService.getOrganizationAnalytics(filters),\n        analyticsService.getDonorInsights(filters),\n      ]);\n\n      setOrgAnalytics(orgData);\n      setDonorInsights(donorData);\n    } catch (err) {\n      setError(\n        err instanceof Error ? err.message : \"Failed to load analytics data\",\n      );\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleExportData = async () => {\n    try {\n      const csvUrl = await analyticsService.exportAnalyticsData(\n        \"organization\",\n        filters,\n      );\n      const link = document.createElement(\"a\");\n      link.href = csvUrl;\n      link.download = `analytics-export-${new Date().toISOString().split(\"T\")[0]}.csv`;\n      link.click();\n    } catch (err) {\n      setError(\"Failed to export data\");\n    }\n  };\n\n  const navigationItems = [\n    { key: \"overview\", label: \"Overview\", icon: \"📊\" },\n    { key: \"campaigns\", label: \"Campaign Performance\", icon: \"🎯\" },\n    { key: \"donors\", label: \"Donor Insights\", icon: \"👥\" },\n    { key: \"export\", label: \"Export Data\", icon: \"📈\" },\n  ];\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center py-12\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"bg-red-50 border border-red-200 rounded-lg p-6\">\n        <div className=\"flex\">\n          <svg\n            className=\"h-5 w-5 text-red-400 mt-0.5\"\n            viewBox=\"0 0 20 20\"\n            fill=\"currentColor\"\n          >\n            <path\n              fillRule=\"evenodd\"\n              d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\"\n              clipRule=\"evenodd\"\n            />\n          </svg>\n          <div className=\"ml-3\">\n            <h3 className=\"text-sm font-medium text-red-800\">\n              Analytics Error\n            </h3>\n            <p className=\"text-sm text-red-700 mt-1\">{error}</p>\n            <button\n              onClick={loadAnalyticsData}\n              className=\"mt-2 text-sm text-red-800 hover:text-red-900 underline\"\n            >\n              Try Again\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">\n            Analytics Dashboard\n          </h1>\n          <p className=\"text-gray-600\">\n            Comprehensive insights into your fundraising performance and donor\n            engagement\n          </p>\n        </div>\n\n        <div className=\"flex items-center gap-3\">\n          <button\n            onClick={loadAnalyticsData}\n            className=\"px-3 py-2 text-sm text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors flex items-center gap-2\"\n          >\n            <svg\n              className=\"w-4 h-4\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"\n              />\n            </svg>\n            Refresh\n          </button>\n          <button\n            onClick={handleExportData}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium text-sm transition-colors flex items-center gap-2\"\n          >\n            <svg\n              className=\"w-4 h-4\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"\n              />\n            </svg>\n            Export Data\n          </button>\n        </div>\n      </div>\n\n      <AnalyticsFiltersComponent\n        filters={filters}\n        onFiltersChange={setFilters}\n      />\n\n      <div className=\"border-b border-gray-200\">\n        <nav className=\"-mb-px flex space-x-8\">\n          {navigationItems.map((item) => (\n            <button\n              key={item.key}\n              onClick={() => setActiveView(item.key as AnalyticsView)}\n              className={`py-2 px-1 border-b-2 font-medium text-sm whitespace-nowrap flex items-center gap-2 ${\n                activeView === item.key\n                  ? \"border-blue-500 text-blue-600\"\n                  : \"border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\"\n              } transition-colors`}\n            >\n              <span>{item.icon}</span>\n              {item.label}\n            </button>\n          ))}\n        </nav>\n      </div>\n\n      <div className=\"space-y-6\">\n        {activeView === \"overview\" && orgAnalytics && (\n          <>\n            <MetricsOverview />\n            <div className=\"bg-white p-6 rounded-lg shadow\">\n              <h3 className=\"text-lg font-semibold mb-4\">\n                Performance Overview\n              </h3>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"text-center\">\n                  <p className=\"text-2xl font-bold text-blue-600\">\n                    ${orgAnalytics.currentPeriod.totalRaised.toLocaleString()}\n                  </p>\n                  <p className=\"text-sm text-gray-600\">Current Period</p>\n                </div>\n                <div className=\"text-center\">\n                  <p className=\"text-2xl font-bold text-green-600\">\n                    ${orgAnalytics.previousPeriod.totalRaised.toLocaleString()}\n                  </p>\n                  <p className=\"text-sm text-gray-600\">Previous Period</p>\n                </div>\n              </div>\n            </div>\n          </>\n        )}\n\n        {activeView === \"campaigns\" && orgAnalytics && (\n          <div className=\"space-y-6\">\n            <div className=\"bg-white p-6 rounded-lg shadow\">\n              <h3 className=\"text-lg font-semibold mb-4\">\n                Top Performing Campaigns\n              </h3>\n              <div className=\"space-y-3\">\n                {orgAnalytics.topPerformingCampaigns.map(\n                  (campaign: {\n                    id: React.Key | null | undefined;\n                    name:\n                      | string\n                      | number\n                      | bigint\n                      | boolean\n                      | React.ReactElement<\n                          unknown,\n                          string | React.JSXElementConstructor<any>\n                        >\n                      | Iterable<React.ReactNode>\n                      | React.ReactPortal\n                      | Promise<\n                          | string\n                          | number\n                          | bigint\n                          | boolean\n                          | React.ReactPortal\n                          | React.ReactElement<\n                              unknown,\n                              string | React.JSXElementConstructor<any>\n                            >\n                          | Iterable<React.ReactNode>\n                          | null\n                          | undefined\n                        >\n                      | null\n                      | undefined;\n                    raised: {\n                      toLocaleString: () =>\n                        | string\n                        | number\n                        | bigint\n                        | boolean\n                        | React.ReactElement<\n                            unknown,\n                            string | React.JSXElementConstructor<any>\n                          >\n                        | Iterable<React.ReactNode>\n                        | React.ReactPortal\n                        | Promise<\n                            | string\n                            | number\n                            | bigint\n                            | boolean\n                            | React.ReactPortal\n                            | React.ReactElement<\n                                unknown,\n                                string | React.JSXElementConstructor<any>\n                              >\n                            | Iterable<React.ReactNode>\n                            | null\n                            | undefined\n                          >\n                        | null\n                        | undefined;\n                    };\n                    goal: {\n                      toLocaleString: () =>\n                        | string\n                        | number\n                        | bigint\n                        | boolean\n                        | React.ReactElement<\n                            unknown,\n                            string | React.JSXElementConstructor<any>\n                          >\n                        | Iterable<React.ReactNode>\n                        | React.ReactPortal\n                        | Promise<\n                            | string\n                            | number\n                            | bigint\n                            | boolean\n                            | React.ReactPortal\n                            | React.ReactElement<\n                                unknown,\n                                string | React.JSXElementConstructor<any>\n                              >\n                            | Iterable<React.ReactNode>\n                            | null\n                            | undefined\n                          >\n                        | null\n                        | undefined;\n                    };\n                  }) => (\n                    <div\n                      key={campaign.id}\n                      className=\"flex justify-between items-center p-3 bg-gray-50 rounded\"\n                    >\n                      <span className=\"font-medium\">{campaign.name}</span>\n                      <div className=\"text-right\">\n                        <p className=\"font-semibold\">\n                          ${campaign.raised.toLocaleString()}\n                        </p>\n                        <p className=\"text-sm text-gray-600\">\n                          Goal: ${campaign.goal.toLocaleString()}\n                        </p>\n                      </div>\n                    </div>\n                  ),\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {activeView === \"donors\" && donorInsights && (\n          <DonorInsightsPanel insights={donorInsights} />\n        )}\n\n        {activeView === \"export\" && (\n          <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n              Export Analytics Data\n            </h3>\n            <p className=\"text-gray-600 mb-4\">\n              Download fundraising and donor performance data filtered by the\n              current date range and selected criteria.\n            </p>\n            <button\n              onClick={handleExportData}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n            >\n              Export All Data\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AnalyticsDashboard;\n","usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/panels/CampaignsPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":1,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":29,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":29,"endColumn":17,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1040,1040],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1040,1040],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":1,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":75,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":75,"endColumn":17,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2167,2167],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2167,2167],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\n\nimport { KPIWidget } from \"../components/AnalyticsWidgets\";\nimport { CampaignDetail } from \"../components/CampaignDetail\";\nimport CampaignList from \"../components/CampaignList\";\nimport { CampaignModal } from \"../components/CampaignModal\";\nimport LoadingSpinner from \"../components/LoadingSpinner\";\nimport {\n  Campaign,\n  CampaignCreateRequest,\n  CampaignUpdateRequest,\n  CampaignStats,\n} from \"../models/campaign\";\nimport { campaignService } from \"../services/campaignService\";\n\ntype ViewMode = \"list\" | \"detail\";\n\nconst CampaignsPanel: React.FC = () => {\n  const [viewMode, setViewMode] = useState<ViewMode>(\"list\");\n  const [selectedCampaign, setSelectedCampaign] = useState<Campaign | null>(\n    null,\n  );\n  const [showModal, setShowModal] = useState(false);\n  const [modalMode, setModalMode] = useState<\"create\" | \"edit\">(\"create\");\n  const [stats, setStats] = useState<CampaignStats | null>(null);\n  const [loadingStats, setLoadingStats] = useState(true);\n\n  useEffect(() => {\n    loadStats();\n  }, []);\n\n  const loadStats = async () => {\n    try {\n      setLoadingStats(true);\n      const data = await campaignService.getCampaignStats();\n      setStats(data);\n    } catch (error) {\n      console.error(\"Failed to load campaign stats:\", error);\n    } finally {\n      setLoadingStats(false);\n    }\n  };\n\n  const handleCreateCampaign = () => {\n    setSelectedCampaign(null);\n    setModalMode(\"create\");\n    setShowModal(true);\n  };\n\n  const handleEditCampaign = (campaign: Campaign) => {\n    setSelectedCampaign(campaign);\n    setModalMode(\"edit\");\n    setShowModal(true);\n  };\n\n  const handleViewCampaign = (campaign: Campaign) => {\n    setSelectedCampaign(campaign);\n    setViewMode(\"detail\");\n  };\n\n  const handleBackToList = () => {\n    setViewMode(\"list\");\n    setSelectedCampaign(null);\n  };\n\n  const handleSaveCampaign = async (\n    data: CampaignCreateRequest | CampaignUpdateRequest,\n  ) => {\n    if (modalMode === \"create\") {\n      await campaignService.createCampaign(data as CampaignCreateRequest);\n    } else {\n      await campaignService.updateCampaign(data as CampaignUpdateRequest);\n    }\n\n    loadStats();\n\n    if (modalMode === \"edit\" && selectedCampaign && viewMode === \"detail\") {\n      const updated = await campaignService.getCampaignById(\n        selectedCampaign.id,\n      );\n      if (updated) setSelectedCampaign(updated);\n    }\n  };\n\n  if (viewMode === \"detail\" && selectedCampaign) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center gap-4\">\n          <button\n            onClick={handleBackToList}\n            className=\"flex items-center gap-2 text-gray-600 hover:text-gray-900 transition-colors\"\n          >\n            <svg\n              className=\"w-5 h-5\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M15 19l-7-7 7-7\"\n              />\n            </svg>\n            Back to Campaigns\n          </button>\n        </div>\n\n        <CampaignDetail\n          campaign={selectedCampaign}\n          onEdit={handleEditCampaign}\n          onBack={handleBackToList}\n        />\n\n        <CampaignModal\n          isOpen={showModal}\n          onClose={() => setShowModal(false)}\n          onSave={handleSaveCampaign}\n          initialData={selectedCampaign}\n          mode={modalMode}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">\n          Campaign Overview\n        </h2>\n        {loadingStats ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {[1, 2, 3, 4].map((i) => (\n              <div\n                key={i}\n                className=\"bg-white rounded-lg border border-gray-200 p-4\"\n              >\n                <LoadingSpinner size=\"sm\" />\n              </div>\n            ))}\n          </div>\n        ) : stats ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <KPIWidget\n              title=\"Total Campaigns\"\n              value={stats.totalCampaigns}\n              format=\"number\"\n              color=\"blue\"\n            />\n            <KPIWidget\n              title=\"Active Campaigns\"\n              value={stats.activeCampaigns}\n              format=\"number\"\n              color=\"green\"\n            />\n            <KPIWidget\n              title=\"Total Raised\"\n              value={stats.totalRaised}\n              format=\"currency\"\n              color=\"purple\"\n            />\n            <KPIWidget\n              title=\"Success Rate\"\n              value={stats.successRate}\n              format=\"percentage\"\n              color=\"red\"\n            />\n          </div>\n        ) : (\n          <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n            <p className=\"text-yellow-800\">\n              Unable to load campaign statistics.\n            </p>\n          </div>\n        )}\n      </div>\n\n      <CampaignList\n        onCreateCampaign={handleCreateCampaign}\n        onEditCampaign={handleEditCampaign}\n        onViewCampaign={handleViewCampaign}\n      />\n\n      <CampaignModal\n        isOpen={showModal}\n        onClose={() => setShowModal(false)}\n        onSave={handleSaveCampaign}\n        initialData={selectedCampaign}\n        mode={modalMode}\n      />\n    </div>\n  );\n};\n\nexport default CampaignsPanel;\n","usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/panels/DashboardPanel.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'loading' is assigned a value but never used.","line":117,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":117,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"loading"},"fix":{"range":[3316,3323],"text":""},"desc":"Remove unused variable 'loading'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'loading' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":117,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":117,"endColumn":17}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/panels/DashboardPanel.tsx - Fully modernized with unified design system\nimport {\n  Target,\n  TrendingUp,\n  Bot,\n  Users,\n  DollarSign,\n  Mail,\n  Calendar,\n  Plus,\n  BarChart3,\n} from \"lucide-react\";\nimport React, { useState } from \"react\";\n\nimport { KPIWidget } from \"../components/AnalyticsWidgets\";\nimport { CampaignModal } from \"../components/CampaignModal\";\nimport {\n  CampaignCreateRequest,\n  CampaignUpdateRequest,\n} from \"../models/campaign\";\n\ninterface DashboardPanelProps {\n  totalDonors?: number;\n  totalRevenue?: number;\n  activeCampaigns?: number;\n}\n\ninterface QuickActionCardProps {\n  title: string;\n  description: string;\n  icon: React.ComponentType<{ className?: string }>;\n  onClick?: () => void;\n  color?: \"blue\" | \"green\" | \"purple\" | \"indigo\";\n}\n\nconst QuickActionCard: React.FC<QuickActionCardProps> = ({\n  title,\n  description,\n  icon: Icon,\n  onClick,\n  color = \"blue\",\n}) => {\n  const colorClasses = {\n    blue: \"border-blue-500/20 bg-blue-500/5 hover:bg-blue-500/10 hover:border-blue-500/40\",\n    green:\n      \"border-green-500/20 bg-green-500/5 hover:bg-green-500/10 hover:border-green-500/40\",\n    purple:\n      \"border-purple-500/20 bg-purple-500/5 hover:bg-purple-500/10 hover:border-purple-500/40\",\n    indigo:\n      \"border-indigo-500/20 bg-indigo-500/5 hover:bg-indigo-500/10 hover:border-indigo-500/40\",\n  };\n\n  const iconColors = {\n    blue: \"text-blue-400\",\n    green: \"text-green-400\",\n    purple: \"text-purple-400\",\n    indigo: \"text-indigo-400\",\n  };\n\n  return (\n    <div\n      onClick={onClick}\n      className={`\n        group card-base p-6 cursor-pointer transition-all duration-300 border\n        ${colorClasses[color]}\n      `}\n    >\n      <div className=\"flex items-start space-x-4\">\n        <div className=\"p-3 rounded-xl bg-slate-800/50 border border-slate-700/50 group-hover:scale-105 transition-transform duration-200\">\n          <Icon className={`w-6 h-6 ${iconColors[color]}`} />\n        </div>\n        <div className=\"flex-1 min-w-0\">\n          <h3 className=\"text-white font-semibold text-lg mb-2 group-hover:text-blue-300 transition-colors\">\n            {title}\n          </h3>\n          <p className=\"text-slate-400 text-sm leading-relaxed\">\n            {description}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst MilestoneItem: React.FC<{\n  title: string;\n  date: string;\n  status: \"upcoming\" | \"progress\" | \"completed\";\n}> = ({ title, date, status }) => {\n  const statusColors = {\n    upcoming: { dot: \"bg-yellow-400\", text: \"text-yellow-400\" },\n    progress: { dot: \"bg-blue-400\", text: \"text-blue-400\" },\n    completed: { dot: \"bg-green-400\", text: \"text-green-400\" },\n  };\n\n  return (\n    <div className=\"flex items-start space-x-3 group\">\n      <div\n        className={`w-2 h-2 rounded-full mt-2 flex-shrink-0 ${statusColors[status].dot}`}\n      />\n      <div className=\"flex-1 min-w-0\">\n        <p className=\"text-slate-300 text-sm font-medium group-hover:text-white transition-colors\">\n          {title}\n        </p>\n        <p className={`text-xs mt-0.5 ${statusColors[status].text}`}>{date}</p>\n      </div>\n    </div>\n  );\n};\n\nconst DashboardPanel: React.FC<DashboardPanelProps> = ({\n  totalDonors = 128,\n  totalRevenue = 45750,\n  activeCampaigns = 3,\n}) => {\n  const [showModal, setShowModal] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const handleSaveCampaign = async (\n    data: CampaignCreateRequest | CampaignUpdateRequest,\n  ): Promise<void> => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Simulate API call\n      await new Promise((resolve) => setTimeout(resolve, 1500));\n      console.log(\"Saved campaign:\", data);\n      setShowModal(false);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : \"Failed to save campaign\");\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Sample chart data for visualization\n  const chartData = [\n    { month: \"Mar\", donors: 140 },\n    { month: \"Apr\", donors: 165 },\n    { month: \"May\", donors: 180 },\n    { month: \"Jun\", donors: 175 },\n    { month: \"Jul\", donors: 160 },\n    { month: \"Aug\", donors: 185 },\n    { month: \"Sep\", donors: 200 },\n  ];\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Error Display */}\n      {error && (\n        <div className=\"card-base p-4 border-red-500/30 bg-red-500/5 animate-fade-in\">\n          <div className=\"flex items-start space-x-3\">\n            <div className=\"w-5 h-5 text-red-400 mt-0.5\">⚠️</div>\n            <div className=\"flex-1\">\n              <p className=\"text-red-300 text-sm font-medium\">Campaign Error</p>\n              <p className=\"text-red-400/80 text-sm mt-1\">{error}</p>\n              <button\n                onClick={() => setError(null)}\n                className=\"text-red-300 hover:text-red-200 text-sm mt-2 underline\"\n              >\n                Dismiss\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Welcome Section */}\n      <div className=\"card-base p-6 border-l-4 border-l-blue-500\">\n        <div className=\"flex justify-between items-start\">\n          <div>\n            <h2 className=\"text-white text-2xl font-bold mb-2\">\n              Welcome back! 👋\n            </h2>\n            <p className=\"text-slate-400 text-lg\">\n              Here's what's happening with your campaigns today\n            </p>\n          </div>\n          <button\n            onClick={() => setShowModal(true)}\n            className=\"button-primary flex items-center space-x-2 shadow-lg\"\n          >\n            <Plus className=\"w-4 h-4\" />\n            <span>New Campaign</span>\n          </button>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div>\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-white text-xl font-semibold\">\n            Performance Overview\n          </h3>\n          <button className=\"text-slate-400 hover:text-white text-sm flex items-center gap-2 transition-colors\">\n            <BarChart3 className=\"w-4 h-4\" />\n            View Detailed Analytics\n          </button>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <KPIWidget\n            title=\"Active Campaigns\"\n            value={activeCampaigns}\n            trend=\"neutral\"\n            icon={<Target className=\"w-5 h-5\" />}\n          />\n          <KPIWidget\n            title=\"Total Donors\"\n            value={totalDonors}\n            icon={<Users className=\"w-5 h-5\" />}\n          />\n          <KPIWidget\n            title=\"Funds Raised\"\n            value={`$${totalRevenue.toLocaleString()}`}\n            icon={<DollarSign className=\"w-5 h-5\" />}\n          />\n          <KPIWidget\n            title=\"Emails Sent\"\n            value=\"8,290\"\n            icon={<Mail className=\"w-5 h-5\" />}\n          />\n        </div>\n      </div>\n\n      {/* Visual Chart Section */}\n      <div className=\"card-base p-6\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <div>\n            <h3 className=\"text-white text-xl font-semibold mb-2\">\n              Donor Growth Trend\n            </h3>\n            <p className=\"text-slate-400\">\n              Monthly donor acquisition over the last 7 months\n            </p>\n          </div>\n          <div className=\"text-right\">\n            <p className=\"text-2xl font-bold text-green-400\">+15.8%</p>\n            <p className=\"text-sm text-slate-400\">Growth rate</p>\n          </div>\n        </div>\n\n        {/* Simple Chart Visualization */}\n        <div className=\"h-64 flex items-end justify-around p-4 space-x-2 bg-slate-900/50 rounded-xl border border-slate-700/30\">\n          {chartData.map((item, index) => (\n            <div\n              key={index}\n              className=\"flex-1 flex flex-col items-center space-y-2\"\n            >\n              <div\n                className=\"bg-gradient-to-t from-blue-600 to-blue-400 rounded-t-sm w-full transition-all duration-500 hover:from-blue-500 hover:to-blue-300 cursor-pointer relative group\"\n                style={{ height: `${(item.donors / 220) * 100}%` }}\n              >\n                {/* Tooltip */}\n                <div className=\"absolute -top-8 left-1/2 -translate-x-1/2 bg-slate-800 text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap\">\n                  {item.donors} donors\n                </div>\n              </div>\n              <span className=\"text-xs text-slate-400 font-medium\">\n                {item.month}\n              </span>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Quick Actions */}\n      <div>\n        <h3 className=\"text-white text-xl font-semibold mb-6\">Quick Actions</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <QuickActionCard\n            icon={Target}\n            title=\"Create Campaign\"\n            description=\"Launch a new fundraising campaign with AI-powered content generation\"\n            onClick={() => setShowModal(true)}\n            color=\"blue\"\n          />\n          <QuickActionCard\n            icon={TrendingUp}\n            title=\"View Analytics\"\n            description=\"Deep dive into campaign performance, donor insights, and ROI metrics\"\n            color=\"green\"\n          />\n          <QuickActionCard\n            icon={Bot}\n            title=\"AI Assistant\"\n            description=\"Generate compelling campaign content, emails, and social media posts\"\n            color=\"purple\"\n          />\n        </div>\n      </div>\n\n      {/* Upcoming Milestones */}\n      <div>\n        <h3 className=\"text-white text-xl font-semibold mb-6\">\n          Upcoming Milestones\n        </h3>\n        <div className=\"card-base p-6\">\n          <div className=\"space-y-4\">\n            <MilestoneItem\n              title=\"Girlstart EOY draft due\"\n              date=\"Aug 12, 2024\"\n              status=\"upcoming\"\n            />\n            <MilestoneItem\n              title=\"BBHH NTXGD Match Confirmed\"\n              date=\"Aug 18, 2024\"\n              status=\"progress\"\n            />\n            <MilestoneItem\n              title=\"CASA Campaign Launch\"\n              date=\"Sept 1, 2024\"\n              status=\"upcoming\"\n            />\n            <MilestoneItem\n              title=\"Q3 Reporting Complete\"\n              date=\"July 30, 2024\"\n              status=\"completed\"\n            />\n          </div>\n\n          <div className=\"mt-6 pt-4 border-t border-slate-700/50\">\n            <button className=\"text-blue-400 hover:text-blue-300 text-sm font-medium flex items-center gap-2 transition-colors\">\n              <Calendar className=\"w-4 h-4\" />\n              View all milestones\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Campaign Modal */}\n      <CampaignModal\n        isOpen={showModal}\n        onClose={() => setShowModal(false)}\n        onSave={handleSaveCampaign}\n        mode=\"create\"\n      />\n    </div>\n  );\n};\n\nexport default DashboardPanel;\n","usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/panels/DonorsPlaceholder.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/panels/MessagingAssistPanel.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'type' is defined but never used.","line":23,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"type"},"fix":{"range":[641,649],"text":""},"desc":"Remove unused variable 'type'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'type' is defined but never used. Allowed unused args must match /^_/u.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":7}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/panels/MessagingAssistPanel.tsx - Enhanced version with dark theme\nimport { Bot, Copy, RotateCcw, Zap, ArrowRight } from \"lucide-react\";\nimport React, { useState } from \"react\";\n\nimport LoadingSpinner from \"../components/LoadingSpinner\";\nimport { generateClaudeResponse } from \"../features/claude/claudeService\";\n\ntype MessageType = \"Email\" | \"Subject Line\" | \"Social Post\" | \"CTA Button\";\n\ninterface QuickActionProps {\n  icon: React.ReactNode;\n  title: string;\n  description: string;\n  type: MessageType;\n  isActive: boolean;\n  onClick: () => void;\n}\n\nconst QuickAction: React.FC<QuickActionProps> = ({\n  icon,\n  title,\n  description,\n  type,\n  isActive,\n  onClick,\n}) => (\n  <button\n    onClick={onClick}\n    className={`w-full group text-left transition-all duration-200 ${\n      isActive\n        ? \"bg-blue-600/20 border-blue-500/50\"\n        : \"bg-slate-800/30 border-slate-700/30 hover:bg-slate-700/40\"\n    } border rounded-xl p-4`}\n  >\n    <div className=\"flex items-start space-x-4\">\n      <div\n        className={`p-2 rounded-lg transition-colors ${\n          isActive\n            ? \"bg-blue-500/30 text-blue-400\"\n            : \"bg-blue-500/20 text-blue-400 group-hover:bg-blue-500/30\"\n        }`}\n      >\n        {icon}\n      </div>\n      <div className=\"flex-1\">\n        <h3\n          className={`font-semibold mb-1 transition-colors ${\n            isActive ? \"text-blue-300\" : \"text-white group-hover:text-blue-400\"\n          }`}\n        >\n          {title}\n        </h3>\n        <p className=\"text-slate-400 text-sm leading-relaxed\">{description}</p>\n      </div>\n      <ArrowRight\n        className={`w-5 h-5 text-slate-400 transition-all duration-200 ${\n          isActive\n            ? \"opacity-100 translate-x-1\"\n            : \"opacity-0 group-hover:opacity-100 group-hover:translate-x-1\"\n        }`}\n      />\n    </div>\n  </button>\n);\n\nexport default function MessagingAssistantPanel() {\n  const [messageType, setMessageType] = useState<MessageType>(\"Email\");\n  const [context, setContext] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [copySuccess, setCopySuccess] = useState(false);\n\n  const promptTemplate = {\n    Email: `Write a compelling fundraising email for the following campaign:\\n\\n`,\n    \"Subject Line\": `Write 5 attention-grabbing subject lines for a fundraising email based on this campaign:\\n\\n`,\n    \"Social Post\": `Write an engaging social media post to support this fundraising campaign:\\n\\n`,\n    \"CTA Button\": `Write 5 compelling call-to-action button texts for this fundraising ask:\\n\\n`,\n  };\n\n  const messageTypes = [\n    {\n      type: \"Email\" as MessageType,\n      icon: <span className=\"text-lg\">✉️</span>,\n      title: \"Draft Donor Email\",\n      description:\n        \"Create a complete fundraising email with compelling storytelling and clear call-to-action\",\n    },\n    {\n      type: \"Subject Line\" as MessageType,\n      icon: <span className=\"text-lg\">📧</span>,\n      title: \"Generate Subject Lines\",\n      description:\n        \"Get multiple attention-grabbing subject lines optimized for open rates\",\n    },\n    {\n      type: \"Social Post\" as MessageType,\n      icon: <span className=\"text-lg\">📱</span>,\n      title: \"Social Media Post\",\n      description:\n        \"Craft engaging social content to amplify your campaign reach\",\n    },\n    {\n      type: \"CTA Button\" as MessageType,\n      icon: <span className=\"text-lg\">🔘</span>,\n      title: \"Call-to-Action Text\",\n      description: \"Generate compelling button text that drives donations\",\n    },\n  ];\n\n  const handleGenerate = async () => {\n    if (!context.trim()) return;\n\n    setLoading(true);\n    setResult(\"\");\n    setError(null);\n\n    try {\n      const prompt = `${promptTemplate[messageType]}${context}`;\n      const response = await generateClaudeResponse(prompt);\n      setResult(response.content);\n    } catch (err: any) {\n      setError(err.message || \"Failed to generate content\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCopy = async () => {\n    try {\n      await navigator.clipboard.writeText(result);\n      setCopySuccess(true);\n      setTimeout(() => setCopySuccess(false), 2000);\n    } catch (err) {\n      console.error(\"Failed to copy:\", err);\n    }\n  };\n\n  const handleReset = () => {\n    setResult(\"\");\n    setError(null);\n    setContext(\"\");\n    setCopySuccess(false);\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto space-y-8\">\n      {/* Header */}\n      <div className=\"text-center\">\n        <div className=\"flex items-center justify-center space-x-3 mb-4\">\n          <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl flex items-center justify-center\">\n            <Bot className=\"w-6 h-6 text-white\" />\n          </div>\n          <h1 className=\"text-3xl font-bold text-white\">\n            AI Messaging Assistant\n          </h1>\n        </div>\n        <p className=\"text-slate-400 text-lg\">\n          Generate compelling fundraising content powered by Claude AI\n        </p>\n      </div>\n\n      {/* Content Type Selection */}\n      <div>\n        <h2 className=\"text-white text-xl font-semibold mb-6\">\n          Choose Content Type\n        </h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {messageTypes.map(({ type, icon, title, description }) => (\n            <QuickAction\n              key={type}\n              icon={icon}\n              title={title}\n              description={description}\n              type={type}\n              isActive={messageType === type}\n              onClick={() => setMessageType(type)}\n            />\n          ))}\n        </div>\n      </div>\n\n      {/* Input Section */}\n      <div className=\"bg-slate-800/30 border border-slate-700/30 rounded-xl p-6\">\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"block text-white font-medium mb-3\">\n              Campaign Context & Details\n            </label>\n            <textarea\n              rows={6}\n              value={context}\n              onChange={(e) => setContext(e.target.value)}\n              className=\"w-full bg-slate-800/50 border border-slate-700/50 text-white placeholder-slate-400 rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 resize-none\"\n              placeholder={`Describe your campaign details:\\n\\n• Campaign name and goal\\n• Target audience\\n• Key message or story\\n• Deadline or urgency\\n• Any specific requirements...`}\n            />\n          </div>\n\n          <div className=\"flex justify-between items-center\">\n            <div className=\"text-sm text-slate-400\">\n              Selected:{\" \"}\n              <span className=\"text-blue-400 font-medium\">{messageType}</span>\n            </div>\n            <button\n              onClick={handleGenerate}\n              disabled={loading || !context.trim()}\n              className=\"bg-blue-600 hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed text-white px-6 py-3 rounded-lg font-medium transition-all duration-200 flex items-center space-x-2\"\n            >\n              <Zap className=\"w-4 h-4\" />\n              <span>\n                {loading ? \"Generating...\" : `Generate ${messageType}`}\n              </span>\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Loading State */}\n      {loading && (\n        <div className=\"bg-slate-800/30 border border-slate-700/30 rounded-xl p-8\">\n          <div className=\"text-center space-y-4\">\n            <LoadingSpinner size=\"lg\" />\n            <div>\n              <h3 className=\"text-white font-medium mb-2\">\n                Claude is crafting your {messageType.toLowerCase()}...\n              </h3>\n              <p className=\"text-slate-400 text-sm\">\n                This may take up to 30 seconds\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Error State */}\n      {error && (\n        <div className=\"bg-red-900/20 border border-red-800/50 rounded-xl p-6\">\n          <div className=\"flex items-start space-x-3\">\n            <div className=\"text-red-400 text-xl\">⚠️</div>\n            <div>\n              <h3 className=\"text-red-300 font-medium mb-1\">\n                Generation Failed\n              </h3>\n              <p className=\"text-red-400 text-sm\">{error}</p>\n              <button\n                onClick={handleGenerate}\n                className=\"mt-3 text-red-300 hover:text-red-200 text-sm underline\"\n              >\n                Try Again\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Results */}\n      {result && (\n        <div className=\"bg-slate-800/30 border border-slate-700/30 rounded-xl overflow-hidden\">\n          {/* Results Header */}\n          <div className=\"px-6 py-4 border-b border-slate-700/30 flex justify-between items-center\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center\">\n                <Bot className=\"w-4 h-4 text-white\" />\n              </div>\n              <h3 className=\"text-white font-semibold\">\n                AI-Generated {messageType}\n              </h3>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <button\n                onClick={handleCopy}\n                className={`flex items-center space-x-2 px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${\n                  copySuccess\n                    ? \"bg-green-500/20 text-green-300\"\n                    : \"bg-slate-700/50 text-slate-300 hover:bg-slate-600/50 hover:text-white\"\n                }`}\n              >\n                <Copy className=\"w-4 h-4\" />\n                <span>{copySuccess ? \"Copied!\" : \"Copy\"}</span>\n              </button>\n              <button\n                onClick={handleReset}\n                className=\"flex items-center space-x-2 px-3 py-2 bg-slate-700/50 text-slate-300 hover:bg-slate-600/50 hover:text-white rounded-lg text-sm font-medium transition-all duration-200\"\n              >\n                <RotateCcw className=\"w-4 h-4\" />\n                <span>New Request</span>\n              </button>\n            </div>\n          </div>\n\n          {/* Results Content */}\n          <div className=\"p-6\">\n            <div className=\"bg-slate-900/50 rounded-lg p-6\">\n              <pre className=\"text-slate-200 text-sm whitespace-pre-wrap font-sans leading-relaxed\">\n                {result}\n              </pre>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/panels/NotificationsPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/panels/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/reducers/notificationsReducer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/services/analyticsService.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'filters' is defined but never used.","line":62,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":62,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"filters"},"fix":{"range":[1529,1561],"text":""},"desc":"Remove unused variable 'filters'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'filters' is defined but never used. Allowed unused args must match /^_/u.","line":62,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":12},{"ruleId":"no-unused-vars","severity":2,"message":"'filters' is defined but never used.","line":149,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":149,"endColumn":52,"suggestions":[{"messageId":"removeVar","data":{"varName":"filters"},"fix":{"range":[3637,3663],"text":""},"desc":"Remove unused variable 'filters'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'filters' is defined but never used. Allowed unused args must match /^_/u.","line":149,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":149,"endColumn":33},{"ruleId":"no-unused-vars","severity":2,"message":"'filters' is defined but never used.","line":175,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":175,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"filters"},"fix":{"range":[4293,4320],"text":""},"desc":"Remove unused variable 'filters'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'filters' is defined but never used. Allowed unused args must match /^_/u.","line":175,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":175,"endColumn":12},{"ruleId":"no-unused-vars","severity":2,"message":"'type' is defined but never used.","line":217,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":217,"endColumn":48,"suggestions":[{"messageId":"removeVar","data":{"varName":"type"},"fix":{"range":[5450,5494],"text":""},"desc":"Remove unused variable 'type'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'type' is defined but never used. Allowed unused args must match /^_/u.","line":217,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":217,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'filters' is defined but never used.","line":218,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":218,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"filters"},"fix":{"range":[5493,5525],"text":""},"desc":"Remove unused variable 'filters'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'filters' is defined but never used. Allowed unused args must match /^_/u.","line":218,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":218,"endColumn":12}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/services/analyticsService.ts\n\nimport {\n  AnalyticsFilters,\n  CampaignAnalytics,\n  DonorInsights,\n  OrganizationAnalytics,\n} from \"../models/analytics\";\n\nclass AnalyticsService {\n  // --------------------------\n  // Helpers\n  // --------------------------\n\n  private generateTimeSeriesData(\n    startDate: string,\n    endDate: string,\n    totalRaised: number,\n    totalDonors: number,\n  ) {\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    const days = Math.ceil(\n      (end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24),\n    );\n    const data = [];\n    let cumulativeRaised = 0;\n    let cumulativeDonors = 0;\n\n    for (let i = 0; i < days; i++) {\n      const currentDate = new Date(start);\n      currentDate.setDate(start.getDate() + i);\n\n      const dailyRaised = Math.round(\n        (totalRaised * 0.8 * Math.random() + totalRaised * 0.2) / days,\n      );\n      const dailyDonors = Math.round(\n        (totalDonors * 0.8 * Math.random() + totalDonors * 0.2) / days,\n      );\n\n      cumulativeRaised += dailyRaised;\n      cumulativeDonors += dailyDonors;\n\n      data.push({\n        date: currentDate.toISOString().split(\"T\")[0],\n        dailyRaised,\n        dailyDonors,\n        cumulativeRaised: Math.min(cumulativeRaised, totalRaised),\n        cumulativeDonors: Math.min(cumulativeDonors, totalDonors),\n      });\n    }\n\n    return data;\n  }\n\n  // --------------------------\n  // Campaign Analytics\n  // --------------------------\n\n  async getCampaignAnalytics(\n    campaignId: string,\n    filters?: AnalyticsFilters,\n  ): Promise<CampaignAnalytics> {\n    await new Promise((resolve) => setTimeout(resolve, 800));\n\n    return {\n      campaignId,\n      campaignName: \"Back to School Drive\",\n      timeframe: {\n        startDate: \"2024-07-01\",\n        endDate: \"2024-08-31\",\n      },\n      fundraisingMetrics: {\n        totalRaised: 32500,\n        goalAmount: 50000,\n        completionRate: 65,\n        donorCount: 127,\n        averageGiftSize: 256,\n        largestGift: 2500,\n        smallestGift: 25,\n        repeatDonorRate: 34.5,\n      },\n      outreachMetrics: {\n        emailsSent: 3200,\n        emailsOpened: 1440,\n        emailsClicked: 396,\n        openRate: 45,\n        clickThroughRate: 12.4,\n        unsubscribeRate: 1.2,\n        bounceRate: 2.1,\n      },\n      conversionMetrics: {\n        websiteVisits: 1850,\n        donationPageViews: 485,\n        conversionRate: 26.2,\n        abandonmentRate: 15.8,\n        averageTimeOnPage: 142,\n      },\n      donorSegmentation: {\n        firstTimeDonors: 83,\n        returningDonors: 44,\n        majorGiftDonors: 8,\n        midLevelDonors: 23,\n        smallGiftDonors: 96,\n      },\n      timeSeriesData: this.generateTimeSeriesData(\n        \"2024-07-01\",\n        \"2024-08-31\",\n        32500,\n        127,\n      ),\n      channelPerformance: [\n        {\n          channel: \"Email\",\n          donorCount: 56,\n          totalRaised: 14560,\n          averageGift: 260,\n          conversionRate: 28.5,\n        },\n        {\n          channel: \"Social Media\",\n          donorCount: 34,\n          totalRaised: 6800,\n          averageGift: 200,\n          conversionRate: 18.2,\n        },\n        {\n          channel: \"Website\",\n          donorCount: 28,\n          totalRaised: 8540,\n          averageGift: 305,\n          conversionRate: 31.4,\n        },\n        {\n          channel: \"Events\",\n          donorCount: 9,\n          totalRaised: 2600,\n          averageGift: 289,\n          conversionRate: 45.0,\n        },\n      ],\n    };\n  }\n\n  // --------------------------\n  // Donor Insights\n  // --------------------------\n\n  async getDonorInsights(filters?: AnalyticsFilters): Promise<DonorInsights> {\n    await new Promise((resolve) => setTimeout(resolve, 600));\n\n    return {\n      topDonors: [\n        { id: \"d1\", name: \"Alice M.\", totalGiven: 12000 },\n        { id: \"d2\", name: \"Bob H.\", totalGiven: 11000 },\n        { id: \"d3\", name: \"Samantha P.\", totalGiven: 9800 },\n      ],\n      donorRetention: {\n        current: 67,\n        previous: 54,\n        change: 13,\n      },\n      acquisition: {\n        newDonors: 87,\n        returningDonors: 40,\n      },\n    };\n  }\n\n  // --------------------------\n  // Organization Analytics\n  // --------------------------\n\n  async getOrganizationAnalytics(\n    filters?: AnalyticsFilters,\n  ): Promise<OrganizationAnalytics> {\n    await new Promise((resolve) => setTimeout(resolve, 700));\n\n    return {\n      currentPeriod: {\n        startDate: \"2024-01-01\",\n        endDate: \"2024-08-31\",\n        totalRaised: 485600,\n        donorCount: 1247,\n        campaignCount: 12,\n      },\n      previousPeriod: {\n        startDate: \"2023-01-01\",\n        endDate: \"2023-08-31\",\n        totalRaised: 398200,\n        donorCount: 1089,\n        campaignCount: 10,\n      },\n      growthMetrics: {\n        raisedChange: 21.9,\n        donorsChange: 14.5,\n        campaignsChange: 20.0,\n      },\n      performanceComparisons: {\n        current: 485600,\n        previous: 398200,\n        label: \"Fundraising Performance\",\n      },\n      topPerformingCampaigns: [\n        { id: \"1\", name: \"Youth Sports Program\", raised: 35000, goal: 35000 },\n        { id: \"2\", name: \"Back to School Drive\", raised: 32500, goal: 50000 },\n        { id: \"3\", name: \"Emergency Food Relief\", raised: 18750, goal: 25000 },\n      ],\n    };\n  }\n\n  // --------------------------\n  // CSV Export\n  // --------------------------\n\n  async exportAnalyticsData(\n    type: \"campaign\" | \"donor\" | \"organization\",\n    filters?: AnalyticsFilters,\n  ): Promise<string> {\n    await new Promise((resolve) => setTimeout(resolve, 1500));\n\n    return `data:text/csv;charset=utf-8,${encodeURIComponent(\n      \"Campaign,Total Raised,Donor Count,Goal Achievement\\nYouth Sports Program,35000,156,100%\\nBack to School Drive,32500,127,65%\\nEmergency Food Relief,18750,89,75%\",\n    )}`;\n  }\n}\n\nexport const analyticsService = new AnalyticsService();\nexport default analyticsService;\n","usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/services/apiClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/services/campaignService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/services/donorSegmentService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/utils/calculateDaysLeft.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/utils/campaignUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/utils/env.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/utils/generateId.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/utils/lazyWithPreload.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/viewModels/analyticsView.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/viewModels/campaignView.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'totalDays' is assigned a value but never used.","line":18,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"totalDays"},"fix":{"range":[461,563],"text":""},"desc":"Remove unused variable 'totalDays'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'totalDays' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":18,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":18}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Campaign } from \"../models/campaign\";\n\nexport interface CampaignCardProps {\n  id: string;\n  title: string;\n  subtitle: string;\n  progressPercent: number;\n  daysLeft: number;\n  status: Campaign[\"status\"];\n  category: Campaign[\"category\"];\n  highlight?: boolean;\n}\n\nexport function toCampaignCard(campaign: Campaign): CampaignCardProps {\n  const now = new Date();\n  const end = new Date(campaign.endDate);\n  const start = new Date(campaign.startDate);\n  const totalDays = Math.max(\n    1,\n    (end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24),\n  );\n  const progressPercent = Math.min(\n    100,\n    Math.round((campaign.raised / campaign.goal) * 100),\n  );\n  const daysLeft = Math.max(\n    0,\n    Math.ceil((end.getTime() - now.getTime()) / (1000 * 60 * 60 * 24)),\n  );\n\n  return {\n    id: campaign.id,\n    title: campaign.name,\n    subtitle: campaign.description ?? \"\",\n    progressPercent,\n    daysLeft,\n    status: campaign.status,\n    category: campaign.category,\n    highlight: progressPercent >= 90,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/viewModels/donorChartView.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/viewModels/donorSegmentChartView.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/src/viewModels/donorView.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/tailwind.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/validate-migration.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'fs' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":2,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"fs"},"fix":{"range":[20,45],"text":""},"desc":"Remove unused variable 'fs'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'path' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":3,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"path"},"fix":{"range":[46,75],"text":""},"desc":"Remove unused variable 'path'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'warningCount' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":19,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"warningCount"},"fix":{"range":[408,429],"text":""},"desc":"Remove unused variable 'warningCount'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":31,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":13},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":45,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\nfunction log(message, level = \"info\") {\n  const colors = {\n    info: \"\u001b[36m\",\n    success: \"\u001b[32m\",\n    warning: \"\u001b[33m\",\n    error: \"\u001b[31m\",\n  };\n  console.log(`${colors[level]}[${level.toUpperCase()}]\u001b[0m ${message}`);\n}\n\nfunction quickValidation() {\n  log(\"🔍 Running migration validation...\", \"info\");\n\n  let errorCount = 0;\n  let warningCount = 0;\n\n  // Check for StatCard issues\n  try {\n    const result = require(\"child_process\").execSync(\n      'grep -r \"StatCard\" src/ --include=\"*.tsx\" --include=\"*.ts\"',\n      { encoding: \"utf8\" },\n    );\n    if (result.trim()) {\n      log(\"ERROR: Found StatCard usage\", \"error\");\n      errorCount++;\n    }\n  } catch (e) {\n    // No matches found, which is good\n  }\n\n  // Check for MetricCard issues\n  try {\n    const result = require(\"child_process\").execSync(\n      'grep -r \"MetricCard\" src/ --include=\"*.tsx\" --include=\"*.ts\"',\n      { encoding: \"utf8\" },\n    );\n    if (result.trim()) {\n      log(\"ERROR: Found MetricCard usage\", \"error\");\n      errorCount++;\n    }\n  } catch (e) {\n    // No matches found, which is good\n  }\n\n  log(`Errors: ${errorCount}`, errorCount > 0 ? \"error\" : \"success\");\n  return errorCount === 0;\n}\n\nconst success = quickValidation();\nprocess.exit(success ? 0 : 1);\n","usedDeprecatedRules":[]},{"filePath":"/Users/davehail/Developer/Nexus/vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]